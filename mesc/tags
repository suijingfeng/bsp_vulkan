!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	src/Frustum.hpp	/^    float A, B, C, D;$/;"	m	struct:Plane	access:public
ALLOCATION_TYPE	src/renderer/vulkan/vk_mem_alloc.h	/^    enum ALLOCATION_TYPE$/;"	g	struct:VmaAllocation_T	access:public
ALLOCATION_TYPE_BLOCK	src/renderer/vulkan/vk_mem_alloc.h	/^        ALLOCATION_TYPE_BLOCK,$/;"	e	enum:VmaAllocation_T::ALLOCATION_TYPE
ALLOCATION_TYPE_DEDICATED	src/renderer/vulkan/vk_mem_alloc.h	/^        ALLOCATION_TYPE_DEDICATED,$/;"	e	enum:VmaAllocation_T::ALLOCATION_TYPE
ALLOCATION_TYPE_NONE	src/renderer/vulkan/vk_mem_alloc.h	/^        ALLOCATION_TYPE_NONE,$/;"	e	enum:VmaAllocation_T::ALLOCATION_TYPE
AMD_VULKAN_MEMORY_ALLOCATOR_H	src/renderer/vulkan/vk_mem_alloc.h	24;"	d
APPLICATION_INCLUDED	src/Application.hpp	2;"	d
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	396;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	399;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	402;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	406;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	408;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	410;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	414;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	417;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	420;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	425;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	428;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	431;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	435;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	391;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	394;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	397;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	401;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	403;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	405;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	412;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	415;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	420;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	423;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	426;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	430;"	d	file:
Add	src/renderer/vulkan/vk_mem_alloc.h	/^    void Add(char ch) { m_Data.push_back(ch); }$/;"	f	class:VmaStringBuilder	access:public	signature:(char ch)
Add	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaStringBuilder::Add(const char* pStr)$/;"	f	class:VmaStringBuilder	signature:(const char* pStr)
AddAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaDefragmentator::AddAllocation(VmaAllocation hAlloc, VkBool32* pChanged)$/;"	f	class:VmaDefragmentator	signature:(VmaAllocation hAlloc, VkBool32* pChanged)
AddCamera	src/renderer/CameraDirector.cpp	/^int CameraDirector::AddCamera(const Math::Vector3f &position,$/;"	f	class:CameraDirector	signature:(const Math::Vector3f &position, const Math::Vector3f &up, const Math::Vector3f &right, const Math::Vector3f &view)
AddCamera	src/renderer/CameraDirector.cpp	/^int CameraDirector::AddCamera(float x, float y, float z)$/;"	f	class:CameraDirector	signature:(float x, float y, float z)
AddNewLine	src/renderer/vulkan/vk_mem_alloc.h	/^    void AddNewLine() { Add('\\n'); }$/;"	f	class:VmaStringBuilder	access:public	signature:()
AddNumber	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaStringBuilder::AddNumber(uint32_t num)$/;"	f	class:VmaStringBuilder	signature:(uint32_t num)
AddNumber	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaStringBuilder::AddNumber(uint64_t num)$/;"	f	class:VmaStringBuilder	signature:(uint64_t num)
AddPointer	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaStringBuilder::AddPointer(const void* ptr)$/;"	f	class:VmaStringBuilder	signature:(const void* ptr)
AddPoolStats	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::AddPoolStats(VmaPoolStats& inoutStats) const$/;"	f	class:VmaBlockMetadata	signature:(VmaPoolStats& inoutStats) const
AddStats	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::AddStats(VmaStats* pStats)$/;"	f	class:VmaBlockVector	signature:(VmaStats* pStats)
Alloc	src/renderer/vulkan/vk_mem_alloc.h	/^T* VmaPoolAllocator<T>::Alloc()$/;"	f	class:VmaPoolAllocator	signature:()
Alloc	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::Alloc($/;"	f	class:VmaBlockMetadata	signature:( const VmaAllocationRequest& request, VmaSuballocationType type, VkDeviceSize allocSize, VmaAllocation hAllocation)
Allocate	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaBlockVector::Allocate($/;"	f	class:VmaBlockVector	signature:( VmaPool hCurrentPool, uint32_t currentFrameIndex, const VkMemoryRequirements& vkMemReq, const VmaAllocationCreateInfo& createInfo, VmaSuballocationType suballocType, VmaAllocation* pAllocation)
AllocateDedicatedMemory	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocator_T::AllocateDedicatedMemory($/;"	f	class:VmaAllocator_T	signature:( VkDeviceSize size, VmaSuballocationType suballocType, uint32_t memTypeIndex, bool map, bool isUserDataString, void* pUserData, VkBuffer dedicatedBuffer, VkImage dedicatedImage, VmaAllocation* pAllocation)
AllocateMemory	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocator_T::AllocateMemory($/;"	f	class:VmaAllocator_T	signature:( const VkMemoryRequirements& vkMemReq, bool requiresDedicatedAllocation, bool prefersDedicatedAllocation, VkBuffer dedicatedBuffer, VkImage dedicatedImage, const VmaAllocationCreateInfo& createInfo, VmaSuballocationType suballocType, VmaAllocation* pAllocation)
AllocateMemoryForImage	src/renderer/vulkan/vk_mem_alloc.h	/^static VkResult AllocateMemoryForImage($/;"	f	signature:( VmaAllocator allocator, VkImage image, const VmaAllocationCreateInfo* pAllocationCreateInfo, VmaSuballocationType suballocType, VmaAllocation* pAllocation)
AllocateMemoryOfType	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocator_T::AllocateMemoryOfType($/;"	f	class:VmaAllocator_T	signature:( const VkMemoryRequirements& vkMemReq, bool dedicatedAllocation, VkBuffer dedicatedBuffer, VkImage dedicatedImage, const VmaAllocationCreateInfo& createInfo, uint32_t memTypeIndex, VmaSuballocationType suballocType, VmaAllocation* pAllocation)
AllocateVulkanMemory	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocator_T::AllocateVulkanMemory(const VkMemoryAllocateInfo* pAllocateInfo, VkDeviceMemory* pMemory)$/;"	f	class:VmaAllocator_T	signature:(const VkMemoryAllocateInfo* pAllocateInfo, VkDeviceMemory* pMemory)
AllocationInfo	src/renderer/vulkan/vk_mem_alloc.h	/^        AllocationInfo() :$/;"	f	struct:VmaDefragmentator::AllocationInfo	access:public	signature:()
AllocationInfo	src/renderer/vulkan/vk_mem_alloc.h	/^    struct AllocationInfo$/;"	s	class:VmaDefragmentator	access:private
AllocationInfoSizeGreater	src/renderer/vulkan/vk_mem_alloc.h	/^    struct AllocationInfoSizeGreater$/;"	s	class:VmaDefragmentator	access:private
AllocationVectorType	src/renderer/vulkan/vk_mem_alloc.h	/^    typedef VmaVector< VmaAllocation, VmaStlAllocator<VmaAllocation> > AllocationVectorType;$/;"	t	struct:VmaAllocator_T	access:public
Application	src/Application.hpp	/^class Application$/;"	c
Application::FindEntityAttribute	src/Application.cpp	/^bool Application::FindEntityAttribute(const std::string &entity, const char *entityName, const char *attribName, std::string &output)$/;"	f	class:Application	signature:(const std::string &entity, const char *entityName, const char *attribName, std::string &output)
Application::FindPlayerStart	src/Application.cpp	/^Math::Vector3f Application::FindPlayerStart(const char *entities)$/;"	f	class:Application	signature:(const char *entities)
Application::KeyPressed	src/Application.cpp	/^bool Application::KeyPressed(KeyCode key)$/;"	f	class:Application	signature:(KeyCode key)
Application::OnKeyPress	src/Application.cpp	/^void Application::OnKeyPress(KeyCode key)$/;"	f	class:Application	signature:(KeyCode key)
Application::OnKeyRelease	src/Application.cpp	/^void Application::OnKeyRelease(KeyCode key)$/;"	f	class:Application	signature:(KeyCode key)
Application::OnMouseMove	src/Application.cpp	/^void Application::OnMouseMove(int x, int y)$/;"	f	class:Application	signature:(int x, int y)
Application::OnRender	src/Application.cpp	/^void Application::OnRender()$/;"	f	class:Application	signature:()
Application::OnStart	src/Application.cpp	/^void Application::OnStart(int argc, char **argv)$/;"	f	class:Application	signature:(int argc, char **argv)
Application::OnTerminate	src/Application.cpp	/^void Application::OnTerminate()$/;"	f	class:Application	signature:()
Application::OnUpdate	src/Application.cpp	/^void Application::OnUpdate(float dt)$/;"	f	class:Application	signature:(float dt)
Application::OnWindowMinimized	src/Application.cpp	/^void Application::OnWindowMinimized(bool minimized)$/;"	f	class:Application	signature:(bool minimized)
Application::OnWindowResize	src/Application.cpp	/^void Application::OnWindowResize(int newWidth, int newHeight)$/;"	f	class:Application	signature:(int newWidth, int newHeight)
Application::Running	src/Application.hpp	/^    inline bool Running() const { return m_running; }$/;"	f	class:Application	access:public	signature:() const
Application::SetKeyPressed	src/Application.hpp	/^    inline void SetKeyPressed(KeyCode key, bool pressed) { m_keyStates[key] = pressed; }$/;"	f	class:Application	access:private	signature:(KeyCode key, bool pressed)
Application::Terminate	src/Application.hpp	/^    inline void Terminate() { m_running = false; }$/;"	f	class:Application	access:public	signature:()
Application::UpdateCamera	src/Application.cpp	/^void Application::UpdateCamera(float dt)$/;"	f	class:Application	signature:(float dt)
Application::m_debugRenderState	src/Application.hpp	/^    uint8_t  m_debugRenderState = RenderMapStats;$/;"	m	class:Application	access:private
Application::m_keyStates	src/Application.hpp	/^    std::map<KeyCode, bool> m_keyStates;$/;"	m	class:Application	access:private
Application::m_noRedraw	src/Application.hpp	/^    bool m_noRedraw    = false;   \/\/  do not perform window redraw$/;"	m	class:Application	access:private
Application::m_q3map	src/Application.hpp	/^    BspMap  *m_q3map   = nullptr; \/\/ loaded map$/;"	m	class:Application	access:private
Application::m_q3stats	src/Application.hpp	/^    StatsUI *m_q3stats = nullptr; \/\/ map stats UI$/;"	m	class:Application	access:private
Application::m_running	src/Application.hpp	/^    bool m_running     = true;    \/\/ application is running$/;"	m	class:Application	access:private
B	src/Frustum.hpp	/^    float A, B, C, D;$/;"	m	struct:Plane	access:public
BSPMAP_INCLUDED	src/BspMap.hpp	2;"	d
Back	src/renderer/vulkan/vk_mem_alloc.h	/^    ItemType* Back() { return m_pBack; }$/;"	f	class:VmaRawList	access:public	signature:()
Back	src/renderer/vulkan/vk_mem_alloc.h	/^    const ItemType* Back() const { return m_pBack; }$/;"	f	class:VmaRawList	access:public	signature:() const
BeginArray	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::BeginArray(bool singleLine)$/;"	f	class:VmaJsonWriter	signature:(bool singleLine)
BeginObject	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::BeginObject(bool singleLine)$/;"	f	class:VmaJsonWriter	signature:(bool singleLine)
BeginString	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::BeginString(const char* pStr)$/;"	f	class:VmaJsonWriter	signature:(const char* pStr)
BeginValue	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::BeginValue(bool isString)$/;"	f	class:VmaJsonWriter	signature:(bool isString)
BlockAllocMap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocation_T::BlockAllocMap()$/;"	f	class:VmaAllocation_T	signature:()
BlockAllocUnmap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocation_T::BlockAllocUnmap()$/;"	f	class:VmaAllocation_T	signature:()
BlockAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^    struct BlockAllocation$/;"	s	struct:VmaAllocation_T	access:private
BlockInfo	src/renderer/vulkan/vk_mem_alloc.h	/^        BlockInfo(const VkAllocationCallbacks* pAllocationCallbacks) :$/;"	f	struct:VmaDefragmentator::BlockInfo	access:public	signature:(const VkAllocationCallbacks* pAllocationCallbacks)
BlockInfo	src/renderer/vulkan/vk_mem_alloc.h	/^    struct BlockInfo$/;"	s	class:VmaDefragmentator	access:private
BlockInfoCompareMoveDestination	src/renderer/vulkan/vk_mem_alloc.h	/^    struct BlockInfoCompareMoveDestination$/;"	s	class:VmaDefragmentator	access:private
BlockInfoVector	src/renderer/vulkan/vk_mem_alloc.h	/^    typedef VmaVector< BlockInfo*, VmaStlAllocator<BlockInfo*> > BlockInfoVector;$/;"	t	class:VmaDefragmentator	access:private
BlockPointerLess	src/renderer/vulkan/vk_mem_alloc.h	/^    struct BlockPointerLess$/;"	s	class:VmaDefragmentator	access:private
BoxInFrustum	src/Frustum.cpp	/^bool Frustum::BoxInFrustum(const Math::Vector3f *vertices)$/;"	f	class:Frustum	signature:(const Math::Vector3f *vertices)
BrushSides	src/q3bsp/Q3Bsp.hpp	/^    BrushSides,$/;"	e	enum:LumpTypes
Brushes	src/q3bsp/Q3Bsp.hpp	/^    Brushes,$/;"	e	enum:LumpTypes
BspMap	src/BspMap.hpp	/^    BspMap(bool bspValid) : m_bspValid(bspValid) {}$/;"	f	class:BspMap	access:public	signature:(bool bspValid)
BspMap	src/BspMap.hpp	/^class BspMap$/;"	c
BspMap::BspMap	src/BspMap.hpp	/^    BspMap(bool bspValid) : m_bspValid(bspValid) {}$/;"	f	class:BspMap	access:public	signature:(bool bspValid)
BspMap::GetMapStats	src/BspMap.hpp	/^    inline const BspStats &GetMapStats() const { return m_mapStats; }$/;"	f	class:BspMap	access:public	signature:() const
BspMap::HasRenderFlag	src/BspMap.hpp	/^    inline bool  HasRenderFlag(int flag) const { return (m_renderFlags & flag) == flag; }$/;"	f	class:BspMap	access:public	signature:(int flag) const
BspMap::Valid	src/BspMap.hpp	/^    inline bool  Valid() const { return m_bspValid; }$/;"	f	class:BspMap	access:public	signature:() const
BspMap::m_bspValid	src/BspMap.hpp	/^    bool     m_bspValid;$/;"	m	class:BspMap	access:protected
BspMap::m_mapStats	src/BspMap.hpp	/^    BspStats m_mapStats;$/;"	m	class:BspMap	access:protected
BspMap::m_renderFlags	src/BspMap.hpp	/^    int      m_renderFlags = 0;$/;"	m	class:BspMap	access:protected
BspMap::~BspMap	src/BspMap.hpp	/^    virtual ~BspMap() {}$/;"	f	class:BspMap	access:public	signature:()
BspStats	src/q3bsp/Q3BspRenderHelpers.hpp	/^struct BspStats$/;"	s
BspStats::totalFaces	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int totalFaces      = 0;$/;"	m	struct:BspStats	access:public
BspStats::totalPatches	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int totalPatches    = 0;$/;"	m	struct:BspStats	access:public
BspStats::totalVertices	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int totalVertices   = 0;$/;"	m	struct:BspStats	access:public
BspStats::visibleFaces	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int visibleFaces    = 0;$/;"	m	struct:BspStats	access:public
BspStats::visiblePatches	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int visiblePatches  = 0;$/;"	m	struct:BspStats	access:public
Buffer	src/renderer/vulkan/Buffers.hpp	/^    struct Buffer$/;"	s	namespace:vk
BufferOptions	src/renderer/vulkan/Buffers.hpp	/^    struct BufferOptions$/;"	s	namespace:vk
C	src/Frustum.hpp	/^    float A, B, C, D;$/;"	m	struct:Plane	access:public
CAMERADIRECTOR_INCLUDED	src/renderer/CameraDirector.hpp	2;"	d
CAMERA_INCLUDED	src/renderer/Camera.hpp	2;"	d
CAM_DOF6	src/renderer/Camera.hpp	/^        CAM_DOF6,$/;"	e	enum:Camera::CameraMode
CAM_FPS	src/renderer/Camera.hpp	/^        CAM_FPS,$/;"	e	enum:Camera::CameraMode
CAM_ORTHO	src/renderer/Camera.hpp	/^        CAM_ORTHO$/;"	e	enum:Camera::CameraMode
CASE	src/renderer/stb_image.c	2218;"	d	file:
CASE	src/renderer/stb_image.c	2231;"	d	file:
CASE	src/renderer/stb_image.c	2234;"	d	file:
CASE	src/renderer/stb_image.c	2247;"	d	file:
CASE	src/renderer/stb_image.c	586;"	d	file:
CASE	src/renderer/stb_image.c	604;"	d	file:
CHAR_HEIGHT	src/renderer/Font.cpp	/^static const int CHAR_HEIGHT = 9;$/;"	v	file:
CHAR_SPACING	src/renderer/Font.cpp	/^static const float CHAR_SPACING = 1.5f;$/;"	v	file:
CHAR_WIDTH	src/renderer/Font.cpp	/^static const int CHAR_WIDTH  = 8;$/;"	v	file:
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/suijingfeng\/game\/quake_bsp_vulkan\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/suijingfeng\/game\/quake_bsp_vulkan$/;"	m
CMDBUFFER_HPP_	src/renderer/vulkan/CmdBuffer.hpp	2;"	d
COLLECTION_TYPE	src/renderer/vulkan/vk_mem_alloc.h	/^    enum COLLECTION_TYPE$/;"	g	class:VmaJsonWriter	access:private
COLLECTION_TYPE_ARRAY	src/renderer/vulkan/vk_mem_alloc.h	/^        COLLECTION_TYPE_ARRAY,$/;"	e	enum:VmaJsonWriter::COLLECTION_TYPE
COLLECTION_TYPE_OBJECT	src/renderer/vulkan/vk_mem_alloc.h	/^        COLLECTION_TYPE_OBJECT,$/;"	e	enum:VmaJsonWriter::COLLECTION_TYPE
COMBO	src/renderer/stb_image.c	585;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	14;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	150;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	153;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	210;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	219;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	237;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	262;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	265;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	268;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	37;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	45;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	57;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	75;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	96;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	212;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	221;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	224;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	257;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	260;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	263;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	62;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	105;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	172;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	194;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	225;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	230;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	247;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	252;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	68;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	78;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	91;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	185;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	215;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	242;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	106;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	120;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	185;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	20;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	214;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	226;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	240;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	248;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	39;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	47;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	54;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	69;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	92;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	197;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	248;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	100;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	114;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	121;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	159;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	174;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	188;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	199;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	215;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	227;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	232;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	241;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	254;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	41;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	48;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	93;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	204;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	234;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	249;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	165;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	206;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
CalcAllocationStatInfo	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::CalcAllocationStatInfo(VmaStatInfo& outInfo) const$/;"	f	class:VmaBlockMetadata	signature:(VmaStatInfo& outInfo) const
CalcCost	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize CalcCost() const$/;"	f	struct:VmaAllocationRequest	access:public	signature:() const
CalcHasNonMovableAllocations	src/renderer/vulkan/vk_mem_alloc.h	/^        void CalcHasNonMovableAllocations()$/;"	f	struct:VmaDefragmentator::BlockInfo	access:public	signature:()
CalcPreferredBlockSize	src/renderer/vulkan/vk_mem_alloc.h	/^VkDeviceSize VmaAllocator_T::CalcPreferredBlockSize(uint32_t memTypeIndex)$/;"	f	class:VmaAllocator_T	signature:(uint32_t memTypeIndex)
CalculateStats	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::CalculateStats(VmaStats* pStats)$/;"	f	class:VmaAllocator_T	signature:(VmaStats* pStats)
CalculateVisibleFaces	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::CalculateVisibleFaces(const Math::Vector3f &cameraPosition)$/;"	f	class:Q3BspMap	signature:(const Math::Vector3f &cameraPosition)
Camera	src/renderer/Camera.cpp	/^Camera::Camera(const Math::Vector3f &position,$/;"	f	class:Camera	signature:(const Math::Vector3f &position, const Math::Vector3f &up, const Math::Vector3f &right, const Math::Vector3f &view )
Camera	src/renderer/Camera.cpp	/^Camera::Camera(float x, float y, float z) : m_position(x, y, z),$/;"	f	class:Camera	signature:(float x, float y, float z)
Camera	src/renderer/Camera.hpp	/^class Camera$/;"	c
Camera::CAM_DOF6	src/renderer/Camera.hpp	/^        CAM_DOF6,$/;"	e	enum:Camera::CameraMode
Camera::CAM_FPS	src/renderer/Camera.hpp	/^        CAM_FPS,$/;"	e	enum:Camera::CameraMode
Camera::CAM_ORTHO	src/renderer/Camera.hpp	/^        CAM_ORTHO$/;"	e	enum:Camera::CameraMode
Camera::Camera	src/renderer/Camera.cpp	/^Camera::Camera(const Math::Vector3f &position,$/;"	f	class:Camera	signature:(const Math::Vector3f &position, const Math::Vector3f &up, const Math::Vector3f &right, const Math::Vector3f &view )
Camera::Camera	src/renderer/Camera.cpp	/^Camera::Camera(float x, float y, float z) : m_position(x, y, z),$/;"	f	class:Camera	signature:(float x, float y, float z)
Camera::CameraMode	src/renderer/Camera.hpp	/^    enum CameraMode$/;"	g	class:Camera	access:public
Camera::GetMode	src/renderer/Camera.hpp	/^    inline CameraMode GetMode() { return m_mode; }$/;"	f	class:Camera	access:public	signature:()
Camera::Move	src/renderer/Camera.cpp	/^void Camera::Move(const Math::Vector3f &Direction)$/;"	f	class:Camera	signature:(const Math::Vector3f &Direction)
Camera::MoveForward	src/renderer/Camera.cpp	/^void Camera::MoveForward(float Distance)$/;"	f	class:Camera	signature:(float Distance)
Camera::MoveUpward	src/renderer/Camera.cpp	/^void Camera::MoveUpward(float Distance)$/;"	f	class:Camera	signature:(float Distance)
Camera::OnMouseMove	src/renderer/Camera.cpp	/^void Camera::OnMouseMove(int x, int y)$/;"	f	class:Camera	signature:(int x, int y)
Camera::Position	src/renderer/Camera.hpp	/^    const Math::Vector3f &Position() const { return m_position; }$/;"	f	class:Camera	access:public	signature:() const
Camera::ProjectionMatrix	src/renderer/Camera.hpp	/^    const Math::Matrix4f &ProjectionMatrix() const { return m_projectionMatrix; }$/;"	f	class:Camera	access:public	signature:() const
Camera::RotateCamera	src/renderer/Camera.cpp	/^void Camera::RotateCamera(const Math::Quaternion &q)$/;"	f	class:Camera	signature:(const Math::Quaternion &q)
Camera::RotateCamera	src/renderer/Camera.cpp	/^void Camera::RotateCamera(float angle, float x, float y, float z)$/;"	f	class:Camera	signature:(float angle, float x, float y, float z)
Camera::SetMode	src/renderer/Camera.cpp	/^void Camera::SetMode(CameraMode cm)$/;"	f	class:Camera	signature:(CameraMode cm)
Camera::SetRightVector	src/renderer/Camera.hpp	/^    void SetRightVector(float x, float y, float z)$/;"	f	class:Camera	access:public	signature:(float x, float y, float z)
Camera::SetUpVector	src/renderer/Camera.hpp	/^    void SetUpVector(float x, float y, float z)$/;"	f	class:Camera	access:public	signature:(float x, float y, float z)
Camera::SetViewVector	src/renderer/Camera.hpp	/^    void SetViewVector(float x, float y, float z)$/;"	f	class:Camera	access:public	signature:(float x, float y, float z)
Camera::Strafe	src/renderer/Camera.cpp	/^void Camera::Strafe(float Distance)$/;"	f	class:Camera	signature:(float Distance)
Camera::UpdateProjection	src/renderer/Camera.cpp	/^void Camera::UpdateProjection()$/;"	f	class:Camera	signature:()
Camera::UpdateView	src/renderer/Camera.cpp	/^void Camera::UpdateView()$/;"	f	class:Camera	signature:()
Camera::ViewMatrix	src/renderer/Camera.hpp	/^    const Math::Matrix4f &ViewMatrix() const { return m_viewMatrix; }$/;"	f	class:Camera	access:public	signature:() const
Camera::m_mode	src/renderer/Camera.hpp	/^    CameraMode     m_mode;$/;"	m	class:Camera	access:private
Camera::m_position	src/renderer/Camera.hpp	/^    Math::Vector3f m_position;$/;"	m	class:Camera	access:private
Camera::m_projectionMatrix	src/renderer/Camera.hpp	/^    Math::Matrix4f m_projectionMatrix;$/;"	m	class:Camera	access:private
Camera::m_rightVector	src/renderer/Camera.hpp	/^    Math::Vector3f m_rightVector;$/;"	m	class:Camera	access:private
Camera::m_rotation	src/renderer/Camera.hpp	/^    Math::Vector3f m_rotation;$/;"	m	class:Camera	access:private
Camera::m_upVector	src/renderer/Camera.hpp	/^    Math::Vector3f m_upVector;$/;"	m	class:Camera	access:private
Camera::m_viewMatrix	src/renderer/Camera.hpp	/^    Math::Matrix4f m_viewMatrix;$/;"	m	class:Camera	access:private
Camera::m_viewVector	src/renderer/Camera.hpp	/^    Math::Vector3f m_viewVector;$/;"	m	class:Camera	access:private
Camera::m_yLimit	src/renderer/Camera.hpp	/^    float          m_yLimit;$/;"	m	class:Camera	access:private
Camera::rotateX	src/renderer/Camera.cpp	/^void Camera::rotateX(float angle)$/;"	f	class:Camera	signature:(float angle)
Camera::rotateY	src/renderer/Camera.cpp	/^void Camera::rotateY(float angle)$/;"	f	class:Camera	signature:(float angle)
Camera::rotateZ	src/renderer/Camera.cpp	/^void Camera::rotateZ(float angle)$/;"	f	class:Camera	signature:(float angle)
CameraDirector	src/renderer/CameraDirector.hpp	/^class CameraDirector$/;"	c
CameraDirector::AddCamera	src/renderer/CameraDirector.cpp	/^int CameraDirector::AddCamera(const Math::Vector3f &position,$/;"	f	class:CameraDirector	signature:(const Math::Vector3f &position, const Math::Vector3f &up, const Math::Vector3f &right, const Math::Vector3f &view)
CameraDirector::AddCamera	src/renderer/CameraDirector.cpp	/^int CameraDirector::AddCamera(float x, float y, float z)$/;"	f	class:CameraDirector	signature:(float x, float y, float z)
CameraDirector::GetActiveCamera	src/renderer/CameraDirector.hpp	/^    Camera *GetActiveCamera()        { return m_activeCamera; }$/;"	f	class:CameraDirector	access:public	signature:()
CameraDirector::GetCamera	src/renderer/CameraDirector.hpp	/^    Camera *GetCamera(int camIdx)    { return m_cameras[camIdx]; }$/;"	f	class:CameraDirector	access:public	signature:(int camIdx)
CameraDirector::OnMouseMove	src/renderer/CameraDirector.cpp	/^void CameraDirector::OnMouseMove(int x, int y)$/;"	f	class:CameraDirector	signature:(int x, int y)
CameraDirector::SetActiveCamera	src/renderer/CameraDirector.hpp	/^    void SetActiveCamera(int camIdx) { m_activeCamera = m_cameras[camIdx]; }$/;"	f	class:CameraDirector	access:public	signature:(int camIdx)
CameraDirector::m_activeCamera	src/renderer/CameraDirector.hpp	/^    Camera *m_activeCamera = nullptr;$/;"	m	class:CameraDirector	access:private
CameraDirector::m_cameras	src/renderer/CameraDirector.hpp	/^    std::vector<Camera *> m_cameras;$/;"	m	class:CameraDirector	access:private
CameraDirector::~CameraDirector	src/renderer/CameraDirector.cpp	/^CameraDirector::~CameraDirector()$/;"	f	class:CameraDirector	signature:()
CameraMode	src/renderer/Camera.hpp	/^    enum CameraMode$/;"	g	class:Camera	access:public
CanBecomeLost	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaAllocation_T::CanBecomeLost() const$/;"	f	class:VmaAllocation_T	signature:() const
ChangeBlockAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^    void ChangeBlockAllocation($/;"	f	struct:VmaAllocation_T	access:public	signature:( VmaDeviceMemoryBlock* block, VkDeviceSize offset)
CheckAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaBlockMetadata::CheckAllocation($/;"	f	class:VmaBlockMetadata	signature:( uint32_t currentFrameIndex, uint32_t frameInUseCount, VkDeviceSize bufferImageGranularity, VkDeviceSize allocSize, VkDeviceSize allocAlignment, VmaSuballocationType allocType, VmaSuballocationList::const_iterator suballocItem, bool canMakeOtherLost, VkDeviceSize* pOffset, size_t* itemsToMakeLostCount, VkDeviceSize* pSumFreeSize, VkDeviceSize* pSumItemSize) const
Clear	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaPoolAllocator<T>::Clear()$/;"	f	class:VmaPoolAllocator	signature:()
Clear	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaRawList<T>::Clear()$/;"	f	class:VmaRawList	signature:()
ClusterVisible	src/q3bsp/Q3BspMap.cpp	/^bool Q3BspMap::ClusterVisible(int cameraCluster, int testCluster) const$/;"	f	class:Q3BspMap	signature:(int cameraCluster, int testCluster) const
CmdBufferList	src/renderer/vulkan/CmdBuffer.hpp	/^    typedef std::vector<VkCommandBuffer> CmdBufferList;$/;"	t	namespace:vk
CompareExchangeLastUseFrameIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    bool CompareExchangeLastUseFrameIndex(uint32_t& expected, uint32_t desired)$/;"	f	struct:VmaAllocation_T	access:public	signature:(uint32_t& expected, uint32_t desired)
ContinueString	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::ContinueString(const char* pStr)$/;"	f	class:VmaJsonWriter	signature:(const char* pStr)
ContinueString	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::ContinueString(uint32_t n)$/;"	f	class:VmaJsonWriter	signature:(uint32_t n)
ContinueString	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::ContinueString(uint64_t n)$/;"	f	class:VmaJsonWriter	signature:(uint64_t n)
ContinueString_Pointer	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::ContinueString_Pointer(const void* ptr)$/;"	f	class:VmaJsonWriter	signature:(const void* ptr)
CreateAllocationRequest	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaBlockMetadata::CreateAllocationRequest($/;"	f	class:VmaBlockMetadata	signature:( uint32_t currentFrameIndex, uint32_t frameInUseCount, VkDeviceSize bufferImageGranularity, VkDeviceSize allocSize, VkDeviceSize allocAlignment, VmaSuballocationType allocType, bool canMakeOtherLost, VmaAllocationRequest* pAllocationRequest)
CreateBlock	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaBlockVector::CreateBlock(VkDeviceSize blockSize, size_t* pNewBlockIndex)$/;"	f	class:VmaBlockVector	signature:(VkDeviceSize blockSize, size_t* pNewBlockIndex)
CreateBuffersForFace	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::CreateBuffersForFace(const Q3BspFaceLump &face, int idx)$/;"	f	class:Q3BspMap	signature:(const Q3BspFaceLump &face, int idx)
CreateBuffersForPatch	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::CreateBuffersForPatch(int idx)$/;"	f	class:Q3BspMap	signature:(int idx)
CreateDepthBuffer	src/renderer/RenderContext.cpp	/^void RenderContext::CreateDepthBuffer(const VkCommandPool &commandPool)$/;"	f	class:RenderContext	signature:(const VkCommandPool &commandPool)
CreateDescriptor	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::CreateDescriptor(const vk::Texture **textures, vk::Descriptor *descriptor)$/;"	f	class:Q3BspMap	signature:(const vk::Texture **textures, vk::Descriptor *descriptor)
CreateDescriptor	src/renderer/Font.cpp	/^void Font::CreateDescriptor(const vk::Texture *texture, vk::Descriptor *descriptor)$/;"	f	class:Font	signature:(const vk::Texture *texture, vk::Descriptor *descriptor)
CreateDescriptorSetLayout	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::CreateDescriptorSetLayout()$/;"	f	class:Q3BspMap	signature:()
CreateFirstAllocationRequest	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::CreateFirstAllocationRequest(VmaAllocationRequest* pAllocationRequest)$/;"	f	class:VmaBlockMetadata	signature:(VmaAllocationRequest* pAllocationRequest)
CreateFramebuffers	src/renderer/RenderContext.cpp	/^bool RenderContext::CreateFramebuffers(const vk::RenderPass &renderPass)$/;"	f	class:RenderContext	signature:(const vk::RenderPass &renderPass)
CreateImageViews	src/renderer/RenderContext.cpp	/^bool RenderContext::CreateImageViews()$/;"	f	class:RenderContext	signature:()
CreateLostAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::CreateLostAllocation(VmaAllocation* pAllocation)$/;"	f	class:VmaAllocator_T	signature:(VmaAllocation* pAllocation)
CreateMinBlocks	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaBlockVector::CreateMinBlocks()$/;"	f	class:VmaBlockVector	signature:()
CreateNewBlock	src/renderer/vulkan/vk_mem_alloc.h	/^typename VmaPoolAllocator<T>::ItemBlock& VmaPoolAllocator<T>::CreateNewBlock()$/;"	f	class:VmaPoolAllocator	signature:()
CreatePatch	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::CreatePatch(const Q3BspFaceLump &f)$/;"	f	class:Q3BspMap	signature:(const Q3BspFaceLump &f)
CreatePool	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocator_T::CreatePool(const VmaPoolCreateInfo* pCreateInfo, VmaPool* pPool)$/;"	f	class:VmaAllocator_T	signature:(const VmaPoolCreateInfo* pCreateInfo, VmaPool* pPool)
CreateSemaphores	src/renderer/RenderContext.cpp	/^void RenderContext::CreateSemaphores()$/;"	f	class:RenderContext	signature:()
CrossProduct	src/Math.cpp	/^    Vector3f Vector3f::CrossProduct(const Vector3f &v2) const$/;"	f	class:Math::Vector3f	signature:(const Vector3f &v2) const
D	src/Frustum.hpp	/^    float A, B, C, D;$/;"	m	struct:Plane	access:public
DEC	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	439;"	d	file:
DEC	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	434;"	d	file:
DNL	src/renderer/stb_image.c	1327;"	d	file:
DedicatedAllocCalcStatsInfo	src/renderer/vulkan/vk_mem_alloc.h	/^    void DedicatedAllocCalcStatsInfo(VmaStatInfo& outInfo)$/;"	f	struct:VmaAllocation_T	access:public	signature:(VmaStatInfo& outInfo)
DedicatedAllocMap	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocation_T::DedicatedAllocMap(VmaAllocator hAllocator, void** ppData)$/;"	f	class:VmaAllocation_T	signature:(VmaAllocator hAllocator, void** ppData)
DedicatedAllocUnmap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocation_T::DedicatedAllocUnmap(VmaAllocator hAllocator)$/;"	f	class:VmaAllocation_T	signature:(VmaAllocator hAllocator)
DedicatedAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^    struct DedicatedAllocation$/;"	s	struct:VmaAllocation_T	access:private
Defragment	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocator_T::Defragment($/;"	f	class:VmaAllocator_T	signature:( VmaAllocation* pAllocations, size_t allocationCount, VkBool32* pAllocationsChanged, const VmaDefragmentationInfo* pDefragmentationInfo, VmaDefragmentationStats* pDefragmentationStats)
Defragment	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaBlockVector::Defragment($/;"	f	class:VmaBlockVector	signature:( VmaDefragmentationStats* pDefragmentationStats, VkDeviceSize& maxBytesToMove, uint32_t& maxAllocationsToMove)
Defragment	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaDefragmentator::Defragment($/;"	f	class:VmaDefragmentator	signature:( VkDeviceSize maxBytesToMove, uint32_t maxAllocationsToMove)
DefragmentRound	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaDefragmentator::DefragmentRound($/;"	f	class:VmaDefragmentator	signature:( VkDeviceSize maxBytesToMove, uint32_t maxAllocationsToMove)
Descriptor	src/renderer/vulkan/Base.hpp	/^    struct Descriptor$/;"	s	namespace:vk
Destroy	src/renderer/RenderContext.cpp	/^void RenderContext::Destroy()$/;"	f	class:RenderContext	signature:()
Destroy	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaDeviceMemoryBlock::Destroy(VmaAllocator allocator)$/;"	f	class:VmaDeviceMemoryBlock	signature:(VmaAllocator allocator)
DestroyDefragmentator	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::DestroyDefragmentator()$/;"	f	class:VmaBlockVector	signature:()
DestroyDepthBuffer	src/renderer/RenderContext.cpp	/^void RenderContext::DestroyDepthBuffer()$/;"	f	class:RenderContext	signature:()
DestroyFramebuffers	src/renderer/RenderContext.cpp	/^void RenderContext::DestroyFramebuffers()$/;"	f	class:RenderContext	signature:()
DestroyImageViews	src/renderer/RenderContext.cpp	/^void RenderContext::DestroyImageViews()$/;"	f	class:RenderContext	signature:()
DestroyPool	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::DestroyPool(VmaPool pool)$/;"	f	class:VmaAllocator_T	signature:(VmaPool pool)
Device	src/renderer/vulkan/Base.hpp	/^    struct Device$/;"	s	namespace:vk
DotProduct	src/Math.cpp	/^    float Vector3f::DotProduct(const Vector3f &v2) const$/;"	f	class:Math::Vector3f	signature:(const Vector3f &v2) const
DrawChar	src/renderer/Font.cpp	/^void Font::DrawChar(const Math::Vector3f &pos, int w, int h, int uo, int vo, int offset, const Math::Vector3f &color)$/;"	f	class:Font	signature:(const Math::Vector3f &pos, int w, int h, int uo, int vo, int offset, const Math::Vector3f &color)
EOI	src/renderer/stb_image.c	1329;"	d	file:
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
Effects	src/q3bsp/Q3Bsp.hpp	/^    Effects,$/;"	e	enum:LumpTypes
EndArray	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::EndArray()$/;"	f	class:VmaJsonWriter	signature:()
EndObject	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::EndObject()$/;"	f	class:VmaJsonWriter	signature:()
EndString	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::EndString(const char* pStr)$/;"	f	class:VmaJsonWriter	signature:(const char* pStr)
EnsureDefragmentator	src/renderer/vulkan/vk_mem_alloc.h	/^VmaDefragmentator* VmaBlockVector::EnsureDefragmentator($/;"	f	class:VmaBlockVector	signature:( VmaAllocator hAllocator, uint32_t currentFrameIndex)
EnsureMapping	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaDefragmentator::BlockInfo::EnsureMapping(VmaAllocator hAllocator, void** ppMappedData)$/;"	f	class:VmaDefragmentator::BlockInfo	signature:(VmaAllocator hAllocator, void** ppMappedData)
Entities	src/q3bsp/Q3Bsp.hpp	/^    Entities = 0,$/;"	e	enum:LumpTypes
ExtractPlane	src/Frustum.cpp	/^void Frustum::ExtractPlane(Plane &plane, const Math::Matrix4f &mvpMatrix, int row)$/;"	f	class:Frustum	signature:(Plane &plane, const Math::Matrix4f &mvpMatrix, int row)
FAST_BITS	src/renderer/stb_image.c	684;"	d	file:
FLAGS	src/renderer/vulkan/vk_mem_alloc.h	/^    enum FLAGS$/;"	g	struct:VmaAllocation_T	access:private
FLAG_USER_DATA_STRING	src/renderer/vulkan/vk_mem_alloc.h	/^        FLAG_USER_DATA_STRING = 0x01,$/;"	e	enum:VmaAllocation_T::FLAGS
FONT_HPP	src/renderer/Font.hpp	2;"	d
FRUSTUM_INCLUDED	src/Frustum.hpp	2;"	d
F_avg	src/renderer/stb_image.c	/^   F_none=0, F_sub=1, F_up=2, F_avg=3, F_paeth=4,$/;"	e	enum:__anon12	file:
F_avg_first	src/renderer/stb_image.c	/^   F_avg_first, F_paeth_first$/;"	e	enum:__anon12	file:
F_none	src/renderer/stb_image.c	/^   F_none=0, F_sub=1, F_up=2, F_avg=3, F_paeth=4,$/;"	e	enum:__anon12	file:
F_paeth	src/renderer/stb_image.c	/^   F_none=0, F_sub=1, F_up=2, F_avg=3, F_paeth=4,$/;"	e	enum:__anon12	file:
F_paeth_first	src/renderer/stb_image.c	/^   F_avg_first, F_paeth_first$/;"	e	enum:__anon12	file:
F_sub	src/renderer/stb_image.c	/^   F_none=0, F_sub=1, F_up=2, F_avg=3, F_paeth=4,$/;"	e	enum:__anon12	file:
F_up	src/renderer/stb_image.c	/^   F_none=0, F_sub=1, F_up=2, F_avg=3, F_paeth=4,$/;"	e	enum:__anon12	file:
FaceBuffers	src/q3bsp/Q3BspRenderHelpers.hpp	/^struct FaceBuffers$/;"	s
FaceBuffers::descriptor	src/q3bsp/Q3BspRenderHelpers.hpp	/^    vk::Descriptor descriptor;$/;"	m	struct:FaceBuffers	access:public
FaceBuffers::indexBuffer	src/q3bsp/Q3BspRenderHelpers.hpp	/^    vk::Buffer indexBuffer;$/;"	m	struct:FaceBuffers	access:public
FaceBuffers::indexCount	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int indexCount  = 0;$/;"	m	struct:FaceBuffers	access:public
FaceBuffers::vertexBuffer	src/q3bsp/Q3BspRenderHelpers.hpp	/^    vk::Buffer vertexBuffer;$/;"	m	struct:FaceBuffers	access:public
FaceBuffers::vertexCount	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int vertexCount = 0;$/;"	m	struct:FaceBuffers	access:public
FaceTypeBillboard	src/q3bsp/Q3Bsp.hpp	/^    FaceTypeBillboard = 4$/;"	e	enum:FaceTypes
FaceTypeMesh	src/q3bsp/Q3Bsp.hpp	/^    FaceTypeMesh = 3,$/;"	e	enum:FaceTypes
FaceTypePatch	src/q3bsp/Q3Bsp.hpp	/^    FaceTypePatch = 2,$/;"	e	enum:FaceTypes
FaceTypePolygon	src/q3bsp/Q3Bsp.hpp	/^    FaceTypePolygon = 1,$/;"	e	enum:FaceTypes
FaceTypes	src/q3bsp/Q3Bsp.hpp	/^enum FaceTypes$/;"	g
Faces	src/q3bsp/Q3Bsp.hpp	/^    Faces,$/;"	e	enum:LumpTypes
FindCameraLeaf	src/q3bsp/Q3BspMap.cpp	/^int Q3BspMap::FindCameraLeaf(const Math::Vector3f &cameraPosition) const$/;"	f	class:Q3BspMap	signature:(const Math::Vector3f &cameraPosition) const
FindEntityAttribute	src/Application.cpp	/^bool Application::FindEntityAttribute(const std::string &entity, const char *entityName, const char *attribName, std::string &output)$/;"	f	class:Application	signature:(const std::string &entity, const char *entityName, const char *attribName, std::string &output)
FindPlayerStart	src/Application.cpp	/^Math::Vector3f Application::FindPlayerStart(const char *entities)$/;"	f	class:Application	signature:(const char *entities)
FirstFreeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^        uint32_t FirstFreeIndex;$/;"	m	struct:VmaPoolAllocator::ItemBlock	access:public
Font	src/renderer/Font.cpp	/^Font::Font(const char *tex) : m_scale(1.f, 1.f), m_position(0.0f, 0.0f, 0.0f), m_color(1.f, 1.f, 1.f)$/;"	f	class:Font	signature:(const char *tex)
Font	src/renderer/Font.hpp	/^class Font$/;"	c
Font::CreateDescriptor	src/renderer/Font.cpp	/^void Font::CreateDescriptor(const vk::Texture *texture, vk::Descriptor *descriptor)$/;"	f	class:Font	signature:(const vk::Texture *texture, vk::Descriptor *descriptor)
Font::DrawChar	src/renderer/Font.cpp	/^void Font::DrawChar(const Math::Vector3f &pos, int w, int h, int uo, int vo, int offset, const Math::Vector3f &color)$/;"	f	class:Font	signature:(const Math::Vector3f &pos, int w, int h, int uo, int vo, int offset, const Math::Vector3f &color)
Font::Font	src/renderer/Font.cpp	/^Font::Font(const char *tex) : m_scale(1.f, 1.f), m_position(0.0f, 0.0f, 0.0f), m_color(1.f, 1.f, 1.f)$/;"	f	class:Font	signature:(const char *tex)
Font::Glyph	src/renderer/Font.hpp	/^    struct Glyph$/;"	s	class:Font	access:private
Font::Glyph::verts	src/renderer/Font.hpp	/^        GlyphVertex verts[4];$/;"	m	struct:Font::Glyph	access:public
Font::GlyphVertex	src/renderer/Font.hpp	/^    struct GlyphVertex$/;"	s	class:Font	access:private
Font::GlyphVertex::color	src/renderer/Font.hpp	/^        float color[3];$/;"	m	struct:Font::GlyphVertex	access:public
Font::GlyphVertex::pos	src/renderer/Font.hpp	/^        float pos[3];$/;"	m	struct:Font::GlyphVertex	access:public
Font::GlyphVertex::uv	src/renderer/Font.hpp	/^        float uv[2];$/;"	m	struct:Font::GlyphVertex	access:public
Font::MAX_CHARS	src/renderer/Font.hpp	/^    static const int MAX_CHARS = 300;$/;"	m	class:Font	access:private
Font::RebuildPipeline	src/renderer/Font.cpp	/^void Font::RebuildPipeline()$/;"	f	class:Font	signature:()
Font::RecordCommandBuffers	src/renderer/Font.cpp	/^void Font::RecordCommandBuffers()$/;"	f	class:Font	signature:()
Font::RenderFinish	src/renderer/Font.cpp	/^void Font::RenderFinish()$/;"	f	class:Font	signature:()
Font::RenderStart	src/renderer/Font.cpp	/^void Font::RenderStart()$/;"	f	class:Font	signature:()
Font::RenderText	src/renderer/Font.cpp	/^void Font::RenderText(const std::string &text)$/;"	f	class:Font	signature:(const std::string &text)
Font::RenderText	src/renderer/Font.cpp	/^void Font::RenderText(const std::string &text, const Math::Vector3f &position, const Math::Vector3f &color)$/;"	f	class:Font	signature:(const std::string &text, const Math::Vector3f &position, const Math::Vector3f &color)
Font::RenderText	src/renderer/Font.cpp	/^void Font::RenderText(const std::string &text, float x, float y, float z)$/;"	f	class:Font	signature:(const std::string &text, float x, float y, float z)
Font::RenderText	src/renderer/Font.cpp	/^void Font::RenderText(const std::string &text, float x, float y, float z, float r, float g, float b)$/;"	f	class:Font	signature:(const std::string &text, float x, float y, float z, float r, float g, float b)
Font::SetColor	src/renderer/Font.hpp	/^    void SetColor(const Math::Vector3f &color) { m_color = color; }$/;"	f	class:Font	access:public	signature:(const Math::Vector3f &color)
Font::SetPosition	src/renderer/Font.hpp	/^    void SetPosition(const Math::Vector3f &position) { m_position = position; }$/;"	f	class:Font	access:public	signature:(const Math::Vector3f &position)
Font::SetScale	src/renderer/Font.hpp	/^    void SetScale(const Math::Vector2f &scale) { m_scale = scale; }$/;"	f	class:Font	access:public	signature:(const Math::Vector2f &scale)
Font::m_charBuffer	src/renderer/Font.hpp	/^    Glyph  m_charBuffer[MAX_CHARS]; \/\/ character data for vertex buffer$/;"	m	class:Font	access:private
Font::m_charCount	src/renderer/Font.hpp	/^    int    m_charCount = 0;         \/\/ number of characters currently queued for drawing$/;"	m	class:Font	access:private
Font::m_color	src/renderer/Font.hpp	/^    Math::Vector3f  m_color;$/;"	m	class:Font	access:private
Font::m_commandBuffers	src/renderer/Font.hpp	/^    vk::CmdBufferList m_commandBuffers;$/;"	m	class:Font	access:private
Font::m_commandPool	src/renderer/Font.hpp	/^    VkCommandPool  m_commandPool;$/;"	m	class:Font	access:private
Font::m_descriptor	src/renderer/Font.hpp	/^    vk::Descriptor m_descriptor;$/;"	m	class:Font	access:private
Font::m_mappedData	src/renderer/Font.hpp	/^    Glyph *m_mappedData = nullptr;  \/\/ pointer to currently mapped Vulkan data$/;"	m	class:Font	access:private
Font::m_pipeline	src/renderer/Font.hpp	/^    vk::Pipeline   m_pipeline;$/;"	m	class:Font	access:private
Font::m_position	src/renderer/Font.hpp	/^    Math::Vector3f  m_position;$/;"	m	class:Font	access:private
Font::m_renderPass	src/renderer/Font.hpp	/^    vk::RenderPass m_renderPass;$/;"	m	class:Font	access:private
Font::m_scale	src/renderer/Font.hpp	/^    Math::Vector2f  m_scale;$/;"	m	class:Font	access:private
Font::m_texture	src/renderer/Font.hpp	/^    GameTexture*    m_texture = nullptr;$/;"	m	class:Font	access:private
Font::m_vbInfo	src/renderer/Font.hpp	/^    vk::VertexBufferInfo m_vbInfo;$/;"	m	class:Font	access:private
Font::m_vertexBuffer	src/renderer/Font.hpp	/^    vk::Buffer     m_vertexBuffer;$/;"	m	class:Font	access:private
Font::~Font	src/renderer/Font.cpp	/^Font::~Font()$/;"	f	class:Font	signature:()
Free	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::Free(const VmaAllocation allocation)$/;"	f	class:VmaBlockMetadata	signature:(const VmaAllocation allocation)
Free	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::Free($/;"	f	class:VmaBlockVector	signature:( VmaAllocation hAllocation)
Free	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaPoolAllocator<T>::Free(T* ptr)$/;"	f	class:VmaPoolAllocator	signature:(T* ptr)
FreeDedicatedMemory	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::FreeDedicatedMemory(VmaAllocation allocation)$/;"	f	class:VmaAllocator_T	signature:(VmaAllocation allocation)
FreeMemory	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::FreeMemory(const VmaAllocation allocation)$/;"	f	class:VmaAllocator_T	signature:(const VmaAllocation allocation)
FreeSuballocation	src/renderer/vulkan/vk_mem_alloc.h	/^VmaSuballocationList::iterator VmaBlockMetadata::FreeSuballocation(VmaSuballocationList::iterator suballocItem)$/;"	f	class:VmaBlockMetadata	signature:(VmaSuballocationList::iterator suballocItem)
FreeUserDataString	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocation_T::FreeUserDataString(VmaAllocator hAllocator)$/;"	f	class:VmaAllocation_T	signature:(VmaAllocator hAllocator)
FreeVulkanMemory	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::FreeVulkanMemory(uint32_t memoryType, VkDeviceSize size, VkDeviceMemory hMemory)$/;"	f	class:VmaAllocator_T	signature:(uint32_t memoryType, VkDeviceSize size, VkDeviceMemory hMemory)
Front	src/renderer/vulkan/vk_mem_alloc.h	/^    ItemType* Front() { return m_pFront; }$/;"	f	class:VmaRawList	access:public	signature:()
Front	src/renderer/vulkan/vk_mem_alloc.h	/^    const ItemType* Front() const { return m_pFront; }$/;"	f	class:VmaRawList	access:public	signature:() const
Frustum	src/Frustum.hpp	/^class Frustum$/;"	c
Frustum::BoxInFrustum	src/Frustum.cpp	/^bool Frustum::BoxInFrustum(const Math::Vector3f *vertices)$/;"	f	class:Frustum	signature:(const Math::Vector3f *vertices)
Frustum::ExtractPlane	src/Frustum.cpp	/^void Frustum::ExtractPlane(Plane &plane, const Math::Matrix4f &mvpMatrix, int row)$/;"	f	class:Frustum	signature:(Plane &plane, const Math::Matrix4f &mvpMatrix, int row)
Frustum::UpdatePlanes	src/Frustum.cpp	/^void Frustum::UpdatePlanes()$/;"	f	class:Frustum	signature:()
Frustum::m_planes	src/Frustum.hpp	/^    Plane m_planes[6];$/;"	m	class:Frustum	access:private
GAMETEXTURE_INCLUDED	src/renderer/GameTexture.hpp	2;"	d
GameTexture	src/renderer/GameTexture.cpp	/^GameTexture::GameTexture(const char *filename)$/;"	f	class:GameTexture	signature:(const char *filename)
GameTexture	src/renderer/GameTexture.hpp	/^class GameTexture$/;"	c
GameTexture::GameTexture	src/renderer/GameTexture.cpp	/^GameTexture::GameTexture(const char *filename)$/;"	f	class:GameTexture	signature:(const char *filename)
GameTexture::Height	src/renderer/GameTexture.hpp	/^    const int Height() const { return m_height; }$/;"	f	class:GameTexture	access:public	signature:() const
GameTexture::Load	src/renderer/GameTexture.cpp	/^bool GameTexture::Load(const VkCommandPool &commandPool, bool filtering)$/;"	f	class:GameTexture	signature:(const VkCommandPool &commandPool, bool filtering)
GameTexture::Width	src/renderer/GameTexture.hpp	/^    const int Width()  const { return m_width; }$/;"	f	class:GameTexture	access:public	signature:() const
GameTexture::m_components	src/renderer/GameTexture.hpp	/^    int m_components;$/;"	m	class:GameTexture	access:private
GameTexture::m_height	src/renderer/GameTexture.hpp	/^    int m_height;$/;"	m	class:GameTexture	access:private
GameTexture::m_textureData	src/renderer/GameTexture.hpp	/^    unsigned char *m_textureData;$/;"	m	class:GameTexture	access:private
GameTexture::m_vkTexture	src/renderer/GameTexture.hpp	/^    vk::Texture m_vkTexture;$/;"	m	class:GameTexture	access:private
GameTexture::m_width	src/renderer/GameTexture.hpp	/^    int m_width;$/;"	m	class:GameTexture	access:private
GameTexture::operator const vk::Texture*	src/renderer/GameTexture.hpp	/^    operator const vk::Texture*() const { return &m_vkTexture; }$/;"	f	class:GameTexture	access:public	signature:() const
GameTexture::~GameTexture	src/renderer/GameTexture.cpp	/^GameTexture::~GameTexture()$/;"	f	class:GameTexture	signature:()
GetActiveCamera	src/renderer/CameraDirector.hpp	/^    Camera *GetActiveCamera()        { return m_activeCamera; }$/;"	f	class:CameraDirector	access:public	signature:()
GetAlignment	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetAlignment() const { return m_Alignment; }$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
GetAllocationCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkAllocationCallbacks* GetAllocationCallbacks() const$/;"	f	struct:VmaAllocator_T	access:public	signature:() const
GetAllocationCount	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t GetAllocationCount() const { return m_Suballocations.size() - m_FreeCount; }$/;"	f	class:VmaBlockMetadata	access:public	signature:() const
GetAllocationInfo	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::GetAllocationInfo(VmaAllocation hAllocation, VmaAllocationInfo* pAllocationInfo)$/;"	f	class:VmaAllocator_T	signature:(VmaAllocation hAllocation, VmaAllocationInfo* pAllocationInfo)
GetAllocationsMoved	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t GetAllocationsMoved() const { return m_AllocationsMoved; }$/;"	f	class:VmaDefragmentator	access:public	signature:() const
GetBlock	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaDeviceMemoryBlock* GetBlock() const$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
GetBlockVector	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaBlockVector& GetBlockVector() { return m_BlockVector; }$/;"	f	struct:VmaPool_T	access:public	signature:()
GetBufferImageGranularity	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetBufferImageGranularity() const { return m_BufferImageGranularity; }$/;"	f	struct:VmaBlockVector	access:public	signature:() const
GetBufferImageGranularity	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetBufferImageGranularity() const$/;"	f	struct:VmaAllocator_T	access:public	signature:() const
GetBufferMemoryRequirements	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::GetBufferMemoryRequirements($/;"	f	class:VmaAllocator_T	signature:( VkBuffer hBuffer, VkMemoryRequirements& memReq, bool& requiresDedicatedAllocation, bool& prefersDedicatedAllocation) const
GetBytesMoved	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetBytesMoved() const { return m_BytesMoved; }$/;"	f	class:VmaDefragmentator	access:public	signature:() const
GetCamera	src/renderer/CameraDirector.hpp	/^    Camera *GetCamera(int camIdx)    { return m_cameras[camIdx]; }$/;"	f	class:CameraDirector	access:public	signature:(int camIdx)
GetConjugate	src/Math.cpp	/^    Quaternion Quaternion::GetConjugate() const$/;"	f	class:Math::Quaternion	signature:() const
GetCount	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t GetCount() const { return m_Count; }$/;"	f	class:VmaRawList	access:public	signature:() const
GetData	src/renderer/vulkan/vk_mem_alloc.h	/^    const char* GetData() const { return m_Data.data(); }$/;"	f	class:VmaStringBuilder	access:public	signature:() const
GetFrameInUseCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t GetFrameInUseCount() const { return m_FrameInUseCount; }$/;"	f	struct:VmaBlockVector	access:public	signature:() const
GetImageMemoryRequirements	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::GetImageMemoryRequirements($/;"	f	class:VmaAllocator_T	signature:( VkImage hImage, VkMemoryRequirements& memReq, bool& requiresDedicatedAllocation, bool& prefersDedicatedAllocation) const
GetInstance	src/renderer/TextureManager.cpp	/^TextureManager* TextureManager::GetInstance()$/;"	f	class:TextureManager	signature:()
GetLastUseFrameIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t GetLastUseFrameIndex() const$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
GetLength	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t GetLength() const { return m_Data.size(); }$/;"	f	class:VmaStringBuilder	access:public	signature:() const
GetMapStats	src/BspMap.hpp	/^    inline const BspStats &GetMapStats() const { return m_mapStats; }$/;"	f	class:BspMap	access:public	signature:() const
GetMappedData	src/renderer/vulkan/vk_mem_alloc.h	/^    void* GetMappedData() const { return m_pMappedData; }$/;"	f	class:VmaDeviceMemoryMapping	access:public	signature:() const
GetMappedData	src/renderer/vulkan/vk_mem_alloc.h	/^void* VmaAllocation_T::GetMappedData() const$/;"	f	class:VmaAllocation_T	signature:() const
GetMemory	src/renderer/vulkan/vk_mem_alloc.h	/^VkDeviceMemory VmaAllocation_T::GetMemory() const$/;"	f	class:VmaAllocation_T	signature:() const
GetMemoryHeapCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t GetMemoryHeapCount() const { return m_MemProps.memoryHeapCount; }$/;"	f	struct:VmaAllocator_T	access:public	signature:() const
GetMemoryTypeCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t GetMemoryTypeCount() const { return m_MemProps.memoryTypeCount; }$/;"	f	struct:VmaAllocator_T	access:public	signature:() const
GetMemoryTypeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t GetMemoryTypeIndex() const { return m_MemoryTypeIndex; }$/;"	f	struct:VmaBlockVector	access:public	signature:() const
GetMemoryTypeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^uint32_t VmaAllocation_T::GetMemoryTypeIndex() const$/;"	f	class:VmaAllocation_T	signature:() const
GetMode	src/renderer/Camera.hpp	/^    inline CameraMode GetMode() { return m_mode; }$/;"	f	class:Camera	access:public	signature:()
GetOffset	src/renderer/vulkan/vk_mem_alloc.h	/^VkDeviceSize VmaAllocation_T::GetOffset() const$/;"	f	class:VmaAllocation_T	signature:() const
GetPool	src/renderer/vulkan/vk_mem_alloc.h	/^VmaPool VmaAllocation_T::GetPool() const$/;"	f	class:VmaAllocation_T	signature:() const
GetPoolStats	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::GetPoolStats(VmaPool pool, VmaPoolStats* pPoolStats)$/;"	f	class:VmaAllocator_T	signature:(VmaPool pool, VmaPoolStats* pPoolStats)
GetPoolStats	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::GetPoolStats(VmaPoolStats* pStats)$/;"	f	class:VmaBlockVector	signature:(VmaPoolStats* pStats)
GetPreferredBlockSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetPreferredBlockSize() const { return m_PreferredBlockSize; }$/;"	f	struct:VmaBlockVector	access:public	signature:() const
GetSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetSize() const { return m_Size; }$/;"	f	class:VmaBlockMetadata	access:public	signature:() const
GetSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetSize() const { return m_Size; }$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
GetSuballocationType	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaSuballocationType GetSuballocationType() const { return (VmaSuballocationType)m_SuballocationType; }$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
GetSumFreeSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetSumFreeSize() const { return m_SumFreeSize; }$/;"	f	class:VmaBlockMetadata	access:public	signature:() const
GetType	src/renderer/vulkan/vk_mem_alloc.h	/^    ALLOCATION_TYPE GetType() const { return (ALLOCATION_TYPE)m_Type; }$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
GetUnusedRangeSizeMax	src/renderer/vulkan/vk_mem_alloc.h	/^VkDeviceSize VmaBlockMetadata::GetUnusedRangeSizeMax() const$/;"	f	class:VmaBlockMetadata	signature:() const
GetUserData	src/renderer/vulkan/vk_mem_alloc.h	/^    void* GetUserData() const { return m_pUserData; }$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
GetVulkanFunctions	src/renderer/vulkan/vk_mem_alloc.h	/^    const VmaVulkanFunctions& GetVulkanFunctions() const$/;"	f	struct:VmaAllocator_T	access:public	signature:() const
Glyph	src/renderer/Font.hpp	/^    struct Glyph$/;"	s	class:Font	access:private
GlyphVertex	src/renderer/Font.hpp	/^    struct GlyphVertex$/;"	s	class:Font	access:private
HDR_BUFLEN	src/renderer/stb_image.c	3948;"	d	file:
HEX	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	450;"	d	file:
HEX	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	445;"	d	file:
HasRenderFlag	src/BspMap.hpp	/^    inline bool  HasRenderFlag(int flag) const { return (m_renderFlags & flag) == flag; }$/;"	f	class:BspMap	access:public	signature:(int flag) const
Height	src/renderer/GameTexture.hpp	/^    const int Height() const { return m_height; }$/;"	f	class:GameTexture	access:public	signature:() const
IDCT_1D	src/renderer/stb_image.c	941;"	d	file:
ID_VOID_MAIN	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
INDENT	src/renderer/vulkan/vk_mem_alloc.h	/^    static const char* const INDENT;$/;"	m	class:VmaJsonWriter	access:private
INDENT	src/renderer/vulkan/vk_mem_alloc.h	/^const char* const VmaJsonWriter::INDENT = "  ";$/;"	m	class:VmaJsonWriter
INPUTHANDLERS_INCLUDED	src/InputHandlers.hpp	2;"	d
Identity	src/Math.cpp	/^    void Matrix4f::Identity()$/;"	f	class:Math::Matrix4f	signature:()
ImportVulkanFunctions	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::ImportVulkanFunctions(const VmaVulkanFunctions* pVulkanFunctions)$/;"	f	class:VmaAllocator_T	signature:(const VmaVulkanFunctions* pVulkanFunctions)
IncrementallySortBlocks	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::IncrementallySortBlocks()$/;"	f	class:VmaBlockVector	signature:()
Init	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::Init()$/;"	f	class:Q3BspMap	signature:()
Init	src/renderer/RenderContext.cpp	/^bool RenderContext::Init(const char *title, int x, int y, int w, int h)$/;"	f	class:RenderContext	signature:(const char *title, int x, int y, int w, int h)
Init	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::Init(VkDeviceSize size)$/;"	f	class:VmaBlockMetadata	signature:(VkDeviceSize size)
Init	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaDeviceMemoryBlock::Init($/;"	f	class:VmaDeviceMemoryBlock	signature:( uint32_t newMemoryTypeIndex, VkDeviceMemory newMemory, VkDeviceSize newSize)
InitBlockAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^    void InitBlockAllocation($/;"	f	struct:VmaAllocation_T	access:public	signature:( VmaPool hPool, VmaDeviceMemoryBlock* block, VkDeviceSize offset, VkDeviceSize alignment, VkDeviceSize size, VmaSuballocationType suballocationType, bool mapped, bool canBecomeLost)
InitDedicatedAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^    void InitDedicatedAllocation($/;"	f	struct:VmaAllocation_T	access:public	signature:( uint32_t memoryTypeIndex, VkDeviceMemory hMemory, VmaSuballocationType suballocationType, void* pMappedData, VkDeviceSize size)
InitLost	src/renderer/vulkan/vk_mem_alloc.h	/^    void InitLost()$/;"	f	struct:VmaAllocation_T	access:public	signature:()
InitStatInfo	src/renderer/vulkan/vk_mem_alloc.h	/^static void InitStatInfo(VmaStatInfo& outInfo)$/;"	f	signature:(VmaStatInfo& outInfo)
InitVulkan	src/renderer/RenderContext.cpp	/^bool RenderContext::InitVulkan()$/;"	f	class:RenderContext	signature:()
InsertAfter	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::InsertAfter(ItemType* pItem)$/;"	f	class:VmaRawList	signature:(ItemType* pItem)
InsertAfter	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::InsertAfter(ItemType* pItem, const T& value)$/;"	f	class:VmaRawList	signature:(ItemType* pItem, const T& value)
InsertBefore	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::InsertBefore(ItemType* pItem)$/;"	f	class:VmaRawList	signature:(ItemType* pItem)
InsertBefore	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::InsertBefore(ItemType* pItem, const T& value)$/;"	f	class:VmaRawList	signature:(ItemType* pItem, const T& value)
Invert	src/Math.cpp	/^    void Matrix4f::Invert()$/;"	f	class:Math::Matrix4f	signature:()
IsEmpty	src/renderer/vulkan/vk_mem_alloc.h	/^    bool IsEmpty() const { return m_Blocks.empty(); }$/;"	f	struct:VmaBlockVector	access:public	signature:() const
IsEmpty	src/renderer/vulkan/vk_mem_alloc.h	/^    bool IsEmpty() const { return m_Count == 0; }$/;"	f	class:VmaRawList	access:public	signature:() const
IsEmpty	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaBlockMetadata::IsEmpty() const$/;"	f	class:VmaBlockMetadata	signature:() const
IsPersistentMap	src/renderer/vulkan/vk_mem_alloc.h	/^    bool IsPersistentMap() const { return (m_MapCount & MAP_COUNT_FLAG_PERSISTENT_MAP) != 0; }$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
IsUserDataString	src/renderer/vulkan/vk_mem_alloc.h	/^    bool IsUserDataString() const { return (m_Flags & FLAG_USER_DATA_STRING) != 0; }$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
Item	src/renderer/vulkan/vk_mem_alloc.h	/^    union Item$/;"	u	class:VmaPoolAllocator	access:private
ItemBlock	src/renderer/vulkan/vk_mem_alloc.h	/^    struct ItemBlock$/;"	s	class:VmaPoolAllocator	access:private
ItemType	src/renderer/vulkan/vk_mem_alloc.h	/^    typedef VmaListItem<T> ItemType;$/;"	t	class:VmaRawList	access:public
KEY_0	src/InputHandlers.hpp	/^    KEY_0,$/;"	e	enum:KeyCode
KEY_1	src/InputHandlers.hpp	/^    KEY_1,$/;"	e	enum:KeyCode
KEY_2	src/InputHandlers.hpp	/^    KEY_2,$/;"	e	enum:KeyCode
KEY_3	src/InputHandlers.hpp	/^    KEY_3,$/;"	e	enum:KeyCode
KEY_4	src/InputHandlers.hpp	/^    KEY_4,$/;"	e	enum:KeyCode
KEY_5	src/InputHandlers.hpp	/^    KEY_5,$/;"	e	enum:KeyCode
KEY_6	src/InputHandlers.hpp	/^    KEY_6,$/;"	e	enum:KeyCode
KEY_7	src/InputHandlers.hpp	/^    KEY_7,$/;"	e	enum:KeyCode
KEY_8	src/InputHandlers.hpp	/^    KEY_8,$/;"	e	enum:KeyCode
KEY_9	src/InputHandlers.hpp	/^    KEY_9,$/;"	e	enum:KeyCode
KEY_A	src/InputHandlers.hpp	/^    KEY_A,$/;"	e	enum:KeyCode
KEY_B	src/InputHandlers.hpp	/^    KEY_B,$/;"	e	enum:KeyCode
KEY_C	src/InputHandlers.hpp	/^    KEY_C,$/;"	e	enum:KeyCode
KEY_D	src/InputHandlers.hpp	/^    KEY_D,$/;"	e	enum:KeyCode
KEY_E	src/InputHandlers.hpp	/^    KEY_E,$/;"	e	enum:KeyCode
KEY_ESC	src/InputHandlers.hpp	/^    KEY_ESC,$/;"	e	enum:KeyCode
KEY_F	src/InputHandlers.hpp	/^    KEY_F,$/;"	e	enum:KeyCode
KEY_F1	src/InputHandlers.hpp	/^    KEY_F1,$/;"	e	enum:KeyCode
KEY_F10	src/InputHandlers.hpp	/^    KEY_F10,$/;"	e	enum:KeyCode
KEY_F11	src/InputHandlers.hpp	/^    KEY_F11,$/;"	e	enum:KeyCode
KEY_F12	src/InputHandlers.hpp	/^    KEY_F12,$/;"	e	enum:KeyCode
KEY_F2	src/InputHandlers.hpp	/^    KEY_F2,$/;"	e	enum:KeyCode
KEY_F3	src/InputHandlers.hpp	/^    KEY_F3,$/;"	e	enum:KeyCode
KEY_F4	src/InputHandlers.hpp	/^    KEY_F4,$/;"	e	enum:KeyCode
KEY_F5	src/InputHandlers.hpp	/^    KEY_F5,$/;"	e	enum:KeyCode
KEY_F6	src/InputHandlers.hpp	/^    KEY_F6,$/;"	e	enum:KeyCode
KEY_F7	src/InputHandlers.hpp	/^    KEY_F7,$/;"	e	enum:KeyCode
KEY_F8	src/InputHandlers.hpp	/^    KEY_F8,$/;"	e	enum:KeyCode
KEY_F9	src/InputHandlers.hpp	/^    KEY_F9,$/;"	e	enum:KeyCode
KEY_G	src/InputHandlers.hpp	/^    KEY_G,$/;"	e	enum:KeyCode
KEY_H	src/InputHandlers.hpp	/^    KEY_H,$/;"	e	enum:KeyCode
KEY_I	src/InputHandlers.hpp	/^    KEY_I,$/;"	e	enum:KeyCode
KEY_J	src/InputHandlers.hpp	/^    KEY_J,$/;"	e	enum:KeyCode
KEY_K	src/InputHandlers.hpp	/^    KEY_K,$/;"	e	enum:KeyCode
KEY_L	src/InputHandlers.hpp	/^    KEY_L,$/;"	e	enum:KeyCode
KEY_M	src/InputHandlers.hpp	/^    KEY_M,$/;"	e	enum:KeyCode
KEY_N	src/InputHandlers.hpp	/^    KEY_N,$/;"	e	enum:KeyCode
KEY_NULL	src/InputHandlers.hpp	/^    KEY_NULL,$/;"	e	enum:KeyCode
KEY_O	src/InputHandlers.hpp	/^    KEY_O,$/;"	e	enum:KeyCode
KEY_P	src/InputHandlers.hpp	/^    KEY_P,$/;"	e	enum:KeyCode
KEY_Q	src/InputHandlers.hpp	/^    KEY_Q,$/;"	e	enum:KeyCode
KEY_R	src/InputHandlers.hpp	/^    KEY_R,$/;"	e	enum:KeyCode
KEY_S	src/InputHandlers.hpp	/^    KEY_S,$/;"	e	enum:KeyCode
KEY_SPACE	src/InputHandlers.hpp	/^    KEY_SPACE,$/;"	e	enum:KeyCode
KEY_T	src/InputHandlers.hpp	/^    KEY_T,$/;"	e	enum:KeyCode
KEY_TILDE	src/InputHandlers.hpp	/^    KEY_TILDE$/;"	e	enum:KeyCode
KEY_U	src/InputHandlers.hpp	/^    KEY_U,$/;"	e	enum:KeyCode
KEY_V	src/InputHandlers.hpp	/^    KEY_V,$/;"	e	enum:KeyCode
KEY_W	src/InputHandlers.hpp	/^    KEY_W,$/;"	e	enum:KeyCode
KEY_X	src/InputHandlers.hpp	/^    KEY_X,$/;"	e	enum:KeyCode
KEY_Y	src/InputHandlers.hpp	/^    KEY_Y,$/;"	e	enum:KeyCode
KEY_Z	src/InputHandlers.hpp	/^    KEY_Z,$/;"	e	enum:KeyCode
KeyCode	src/InputHandlers.hpp	/^enum KeyCode$/;"	g
KeyPressed	src/Application.cpp	/^bool Application::KeyPressed(KeyCode key)$/;"	f	class:Application	signature:(KeyCode key)
LOG_MESSAGE	src/Utils.hpp	20;"	d
LOG_MESSAGE	src/Utils.hpp	6;"	d
LOG_MESSAGE_ASSERT	src/Utils.hpp	12;"	d
LOG_MESSAGE_ASSERT	src/Utils.hpp	21;"	d
LeafBrushes	src/q3bsp/Q3Bsp.hpp	/^    LeafBrushes,$/;"	e	enum:LumpTypes
LeafFaces	src/q3bsp/Q3Bsp.hpp	/^    LeafFaces,$/;"	e	enum:LumpTypes
Leafs	src/q3bsp/Q3Bsp.hpp	/^    Leafs,$/;"	e	enum:LumpTypes
Length	src/Math.hpp	/^        float Length()$/;"	f	class:Math::Vector3f	access:public	signature:()
LightVols	src/q3bsp/Q3Bsp.hpp	/^    LightVols,$/;"	e	enum:LumpTypes
Lightmaps	src/q3bsp/Q3Bsp.hpp	/^    Lightmaps,$/;"	e	enum:LumpTypes
Load	src/q3bsp/Q3BspLoader.cpp	/^Q3BspMap *Q3BspLoader::Load(const std::string &filename)$/;"	f	class:Q3BspLoader	signature:(const std::string &filename)
Load	src/renderer/GameTexture.cpp	/^bool GameTexture::Load(const VkCommandPool &commandPool, bool filtering)$/;"	f	class:GameTexture	signature:(const VkCommandPool &commandPool, bool filtering)
LoadBspHeader	src/q3bsp/Q3BspLoader.cpp	/^void Q3BspLoader::LoadBspHeader(Q3BspHeader &hdr, std::ifstream &fstream)$/;"	f	class:Q3BspLoader	signature:(Q3BspHeader &hdr, std::ifstream &fstream)
LoadEntitiesLump	src/q3bsp/Q3BspLoader.cpp	/^void Q3BspLoader::LoadEntitiesLump(Q3BspMap *map, std::ifstream &fstream)$/;"	f	class:Q3BspLoader	signature:(Q3BspMap *map, std::ifstream &fstream)
LoadLightmaps	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::LoadLightmaps()$/;"	f	class:Q3BspMap	signature:()
LoadLump	src/q3bsp/Q3BspLoader.hpp	/^void Q3BspLoader::LoadLump(Q3BspMap *map, LumpTypes lType, std::vector<T> &container, std::ifstream &fstream)$/;"	f	class:Q3BspLoader	signature:(Q3BspMap *map, LumpTypes lType, std::vector<T> &container, std::ifstream &fstream)
LoadTexture	src/renderer/TextureManager.cpp	/^GameTexture *TextureManager::LoadTexture(const char *textureName, const VkCommandPool &commandPool, bool filtering)$/;"	f	class:TextureManager	signature:(const char *textureName, const VkCommandPool &commandPool, bool filtering)
LoadTextures	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::LoadTextures()$/;"	f	class:Q3BspMap	signature:()
LoadVisDataLump	src/q3bsp/Q3BspLoader.cpp	/^void Q3BspLoader::LoadVisDataLump(Q3BspMap *map, std::ifstream &fstream)$/;"	f	class:Q3BspLoader	signature:(Q3BspMap *map, std::ifstream &fstream)
Lock	src/renderer/vulkan/vk_mem_alloc.h	/^       void Lock() { m_Mutex.lock(); }$/;"	f	class:VmaMutex	access:public	signature:()
LogError	src/Utils.cpp	/^void LogError(const char *msg)$/;"	f	signature:(const char *msg)
LumpTypes	src/q3bsp/Q3Bsp.hpp	/^enum LumpTypes$/;"	g
MAP_COUNT_FLAG_PERSISTENT_MAP	src/renderer/vulkan/vk_mem_alloc.h	/^    static const uint8_t MAP_COUNT_FLAG_PERSISTENT_MAP = 0x80;$/;"	m	struct:VmaAllocation_T	access:private
MARKER_none	src/renderer/stb_image.c	1055;"	d	file:
MATH_INCLUDED	src/Math.hpp	2;"	d
MAX_CHARS	src/renderer/Font.hpp	/^    static const int MAX_CHARS = 300;$/;"	m	class:Font	access:private
MakeAllocationsLost	src/renderer/vulkan/vk_mem_alloc.h	/^uint32_t VmaBlockMetadata::MakeAllocationsLost(uint32_t currentFrameIndex, uint32_t frameInUseCount)$/;"	f	class:VmaBlockMetadata	signature:(uint32_t currentFrameIndex, uint32_t frameInUseCount)
MakeLost	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaAllocation_T::MakeLost(uint32_t currentFrameIndex, uint32_t frameInUseCount)$/;"	f	class:VmaAllocation_T	signature:(uint32_t currentFrameIndex, uint32_t frameInUseCount)
MakeOrthogonal	src/Math.cpp	/^    void MakeOrthogonal(Math::Matrix4f &matrix, float left, float right, float bottom, float top, float nearPlane, float farPlane)$/;"	f	namespace:Math	signature:(Math::Matrix4f &matrix, float left, float right, float bottom, float top, float nearPlane, float farPlane)
MakePerspective	src/Math.cpp	/^    void MakePerspective(Math::Matrix4f &matrix, float fov, float scrRatio, float nearPlane, float farPlane)$/;"	f	namespace:Math	signature:(Math::Matrix4f &matrix, float fov, float scrRatio, float nearPlane, float farPlane)
MakePoolAllocationsLost	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::MakePoolAllocationsLost($/;"	f	class:VmaAllocator_T	signature:( VmaPool hPool, size_t* pLostAllocationCount)
MakePoolAllocationsLost	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::MakePoolAllocationsLost($/;"	f	class:VmaBlockVector	signature:( uint32_t currentFrameIndex, size_t* pLostAllocationCount)
MakeRequestedAllocationsLost	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaBlockMetadata::MakeRequestedAllocationsLost($/;"	f	class:VmaBlockMetadata	signature:( uint32_t currentFrameIndex, uint32_t frameInUseCount, VmaAllocationRequest* pAllocationRequest)
MakeView	src/Math.cpp	/^    void MakeView(Math::Matrix4f &matrix, const Math::Vector3f &eye, const Math::Vector3f &target, const Math::Vector3f &up)$/;"	f	namespace:Math	signature:(Math::Matrix4f &matrix, const Math::Vector3f &eye, const Math::Vector3f &target, const Math::Vector3f &up)
Map	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocator_T::Map(VmaAllocation hAllocation, void** ppData)$/;"	f	class:VmaAllocator_T	signature:(VmaAllocation hAllocation, void** ppData)
Map	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaDeviceMemoryBlock::Map(VmaAllocator hAllocator, void** ppData)$/;"	f	class:VmaDeviceMemoryBlock	signature:(VmaAllocator hAllocator, void** ppData)
Map	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaDeviceMemoryMapping::Map(VmaAllocator hAllocator, VkDeviceMemory hMemory, void **ppData)$/;"	f	class:VmaDeviceMemoryMapping	signature:(VmaAllocator hAllocator, VkDeviceMemory hMemory, void **ppData)
Math	src/Math.cpp	/^namespace Math$/;"	n	file:
Math	src/Math.hpp	/^namespace Math$/;"	n
Math::MakeOrthogonal	src/Math.cpp	/^    void MakeOrthogonal(Math::Matrix4f &matrix, float left, float right, float bottom, float top, float nearPlane, float farPlane)$/;"	f	namespace:Math	signature:(Math::Matrix4f &matrix, float left, float right, float bottom, float top, float nearPlane, float farPlane)
Math::MakePerspective	src/Math.cpp	/^    void MakePerspective(Math::Matrix4f &matrix, float fov, float scrRatio, float nearPlane, float farPlane)$/;"	f	namespace:Math	signature:(Math::Matrix4f &matrix, float fov, float scrRatio, float nearPlane, float farPlane)
Math::MakeView	src/Math.cpp	/^    void MakeView(Math::Matrix4f &matrix, const Math::Vector3f &eye, const Math::Vector3f &target, const Math::Vector3f &up)$/;"	f	namespace:Math	signature:(Math::Matrix4f &matrix, const Math::Vector3f &eye, const Math::Vector3f &target, const Math::Vector3f &up)
Math::Matrix4f	src/Math.hpp	/^    struct Matrix4f$/;"	s	namespace:Math
Math::Matrix4f::Identity	src/Math.cpp	/^    void Matrix4f::Identity()$/;"	f	class:Math::Matrix4f	signature:()
Math::Matrix4f::Invert	src/Math.cpp	/^    void Matrix4f::Invert()$/;"	f	class:Math::Matrix4f	signature:()
Math::Matrix4f::Matrix4f	src/Math.hpp	/^        Matrix4f()$/;"	f	struct:Math::Matrix4f	access:public	signature:()
Math::Matrix4f::Matrix4f	src/Math.hpp	/^        Matrix4f(float *mData)$/;"	f	struct:Math::Matrix4f	access:public	signature:(float *mData)
Math::Matrix4f::Matrix4f	src/Math.hpp	/^        Matrix4f(float m0,  float m1,  float m2,  float m3,$/;"	f	struct:Math::Matrix4f	access:public	signature:(float m0, float m1, float m2, float m3, float m4, float m5, float m6, float m7, float m8, float m9, float m10, float m11, float m12, float m13, float m14, float m15)
Math::Matrix4f::One	src/Math.cpp	/^    void Matrix4f::One()$/;"	f	class:Math::Matrix4f	signature:()
Math::Matrix4f::Transpose	src/Math.cpp	/^    void Matrix4f::Transpose()$/;"	f	class:Math::Matrix4f	signature:()
Math::Matrix4f::Zero	src/Math.cpp	/^    void Matrix4f::Zero()$/;"	f	class:Math::Matrix4f	signature:()
Math::Matrix4f::m_m	src/Math.hpp	/^        float m_m[16];$/;"	m	struct:Math::Matrix4f	access:public
Math::Matrix4f::operator *	src/Math.cpp	/^    Matrix4f Matrix4f::operator*(const Matrix4f &m2) const$/;"	f	class:Math::Matrix4f	signature:(const Matrix4f &m2) const
Math::Matrix4f::operator *	src/Math.cpp	/^    Vector3f Matrix4f::operator*(const Vector3f &v) const$/;"	f	class:Math::Matrix4f	signature:(const Vector3f &v) const
Math::Matrix4f::operator *	src/Math.cpp	/^    Vector4f Matrix4f::operator*(const Vector4f &v) const$/;"	f	class:Math::Matrix4f	signature:(const Vector4f &v) const
Math::Matrix4f::operator []	src/Math.hpp	/^        const float& operator[](unsigned int i)const{ return m_m[i]; }$/;"	f	struct:Math::Matrix4f	access:public	signature:(unsigned int i) const
Math::Matrix4f::operator []	src/Math.hpp	/^        float& operator[](unsigned int i){ return m_m[i]; }$/;"	f	struct:Math::Matrix4f	access:public	signature:(unsigned int i)
Math::PointBehindPlane	src/Math.hpp	/^        PointBehindPlane,$/;"	e	enum:Math::PointPlanePosition
Math::PointInFrontOfPlane	src/Math.hpp	/^        PointInFrontOfPlane$/;"	e	enum:Math::PointPlanePosition
Math::PointPlanePos	src/Math.cpp	/^    int PointPlanePos(float normalX, float normalY, float normalZ, float intercept, const Math::Vector3f &point)$/;"	f	namespace:Math	signature:(float normalX, float normalY, float normalZ, float intercept, const Math::Vector3f &point)
Math::PointPlanePosition	src/Math.hpp	/^    enum PointPlanePosition$/;"	g	namespace:Math
Math::Quaternion	src/Math.hpp	/^    class Quaternion$/;"	c	namespace:Math
Math::Quaternion::GetConjugate	src/Math.cpp	/^    Quaternion Quaternion::GetConjugate() const$/;"	f	class:Math::Quaternion	signature:() const
Math::Quaternion::Normalize	src/Math.cpp	/^    void Quaternion::Normalize()$/;"	f	class:Math::Quaternion	signature:()
Math::Quaternion::Quaternion	src/Math.hpp	/^        Quaternion() {}$/;"	f	class:Math::Quaternion	access:public	signature:()
Math::Quaternion::Quaternion	src/Math.hpp	/^        Quaternion(const Quaternion &q2) : m_x(q2.m_x), m_y(q2.m_y), m_z(q2.m_z), m_w(q2.m_w) {}$/;"	f	class:Math::Quaternion	access:public	signature:(const Quaternion &q2)
Math::Quaternion::Quaternion	src/Math.hpp	/^        Quaternion(const Vector3f &axis, float angle) : m_x( axis.m_x * sinf(angle\/2) ),$/;"	f	class:Math::Quaternion	access:public	signature:(const Vector3f &axis, float angle)
Math::Quaternion::Quaternion	src/Math.hpp	/^        Quaternion(float x, float y, float z, float w) : m_x(x), m_y(y), m_z(z), m_w(w) {}$/;"	f	class:Math::Quaternion	access:public	signature:(float x, float y, float z, float w)
Math::Quaternion::QuickNormalize	src/Math.cpp	/^    void Quaternion::QuickNormalize()$/;"	f	class:Math::Quaternion	signature:()
Math::Quaternion::m_w	src/Math.hpp	/^        float m_w = 0.f;$/;"	m	class:Math::Quaternion	access:public
Math::Quaternion::m_x	src/Math.hpp	/^        float m_x = 0.f;$/;"	m	class:Math::Quaternion	access:public
Math::Quaternion::m_y	src/Math.hpp	/^        float m_y = 0.f;$/;"	m	class:Math::Quaternion	access:public
Math::Quaternion::m_z	src/Math.hpp	/^        float m_z = 0.f;$/;"	m	class:Math::Quaternion	access:public
Math::Quaternion::operator *	src/Math.cpp	/^    Quaternion Quaternion::operator*(const Quaternion &q2) const$/;"	f	class:Math::Quaternion	signature:(const Quaternion &q2) const
Math::Quaternion::operator *	src/Math.cpp	/^    Vector3f Quaternion::operator*(const Vector3f &vec) const$/;"	f	class:Math::Quaternion	signature:(const Vector3f &vec) const
Math::QuickInverseSqrt	src/Math.cpp	/^    float QuickInverseSqrt( float number )$/;"	f	namespace:Math	signature:( float number )
Math::Scale	src/Math.cpp	/^    void Scale(Matrix4f &matrix, float x, float y, float z)$/;"	f	namespace:Math	signature:(Matrix4f &matrix, float x, float y, float z)
Math::Translate	src/Math.cpp	/^    void Translate(Matrix4f &matrix, float x, float y, float z)$/;"	f	namespace:Math	signature:(Matrix4f &matrix, float x, float y, float z)
Math::Vector2f	src/Math.hpp	/^    struct Vector2f$/;"	s	namespace:Math
Math::Vector2f::Vector2f	src/Math.hpp	/^        Vector2f() {}$/;"	f	struct:Math::Vector2f	access:public	signature:()
Math::Vector2f::Vector2f	src/Math.hpp	/^        Vector2f(float x, float y) : m_x(x), m_y(y) {}$/;"	f	struct:Math::Vector2f	access:public	signature:(float x, float y)
Math::Vector2f::m_x	src/Math.hpp	/^        float m_x = 0.f;$/;"	m	struct:Math::Vector2f	access:public
Math::Vector2f::m_y	src/Math.hpp	/^        float m_y = 0.f;$/;"	m	struct:Math::Vector2f	access:public
Math::Vector3f	src/Math.hpp	/^    class Vector3f$/;"	c	namespace:Math
Math::Vector3f::CrossProduct	src/Math.cpp	/^    Vector3f Vector3f::CrossProduct(const Vector3f &v2) const$/;"	f	class:Math::Vector3f	signature:(const Vector3f &v2) const
Math::Vector3f::DotProduct	src/Math.cpp	/^    float Vector3f::DotProduct(const Vector3f &v2) const$/;"	f	class:Math::Vector3f	signature:(const Vector3f &v2) const
Math::Vector3f::Length	src/Math.hpp	/^        float Length()$/;"	f	class:Math::Vector3f	access:public	signature:()
Math::Vector3f::Normalize	src/Math.cpp	/^    void Vector3f::Normalize()$/;"	f	class:Math::Vector3f	signature:()
Math::Vector3f::QuickNormalize	src/Math.cpp	/^    void Vector3f::QuickNormalize()$/;"	f	class:Math::Vector3f	signature:()
Math::Vector3f::Vector3f	src/Math.hpp	/^        Vector3f() {}$/;"	f	class:Math::Vector3f	access:public	signature:()
Math::Vector3f::Vector3f	src/Math.hpp	/^        Vector3f(const Vector3f &v2) : m_x(v2.m_x), m_y(v2.m_y), m_z(v2.m_z) {}$/;"	f	class:Math::Vector3f	access:public	signature:(const Vector3f &v2)
Math::Vector3f::Vector3f	src/Math.hpp	/^        Vector3f(float x, float y, float z) : m_x(x), m_y(y), m_z(z) {}$/;"	f	class:Math::Vector3f	access:public	signature:(float x, float y, float z)
Math::Vector3f::m_x	src/Math.hpp	/^        float m_x = 0.f;$/;"	m	class:Math::Vector3f	access:public
Math::Vector3f::m_y	src/Math.hpp	/^        float m_y = 0.f;$/;"	m	class:Math::Vector3f	access:public
Math::Vector3f::m_z	src/Math.hpp	/^        float m_z = 0.f;$/;"	m	class:Math::Vector3f	access:public
Math::Vector3f::operator *	src/Math.cpp	/^    Vector3f Vector3f::operator*( float r ) const$/;"	f	class:Math::Vector3f	signature:( float r ) const
Math::Vector3f::operator +	src/Math.cpp	/^    Vector3f Vector3f::operator+(const Vector3f &v2) const $/;"	f	class:Math::Vector3f	signature:(const Vector3f &v2) const
Math::Vector3f::operator -	src/Math.cpp	/^    Vector3f Vector3f::operator-(const Vector3f &v2) const$/;"	f	class:Math::Vector3f	signature:(const Vector3f &v2) const
Math::Vector3f::operator /	src/Math.cpp	/^    Vector3f Vector3f::operator\/(float r) const$/;"	f	class:Math::Vector3f	signature:(float r) const
Math::Vector4f	src/Math.hpp	/^    struct Vector4f$/;"	s	namespace:Math
Math::Vector4f::Vector4f	src/Math.hpp	/^        Vector4f() {}$/;"	f	struct:Math::Vector4f	access:public	signature:()
Math::Vector4f::Vector4f	src/Math.hpp	/^        Vector4f(float x, float y, float z, float w) : m_x(x), m_y(y), m_z(z), m_w(w) {}$/;"	f	struct:Math::Vector4f	access:public	signature:(float x, float y, float z, float w)
Math::Vector4f::m_w	src/Math.hpp	/^        float m_w = 0.f;$/;"	m	struct:Math::Vector4f	access:public
Math::Vector4f::m_x	src/Math.hpp	/^        float m_x = 0.f;$/;"	m	struct:Math::Vector4f	access:public
Math::Vector4f::m_y	src/Math.hpp	/^        float m_y = 0.f;$/;"	m	struct:Math::Vector4f	access:public
Math::Vector4f::m_z	src/Math.hpp	/^        float m_z = 0.f;$/;"	m	struct:Math::Vector4f	access:public
Matrix4f	src/Math.hpp	/^        Matrix4f()$/;"	f	struct:Math::Matrix4f	access:public	signature:()
Matrix4f	src/Math.hpp	/^        Matrix4f(float *mData)$/;"	f	struct:Math::Matrix4f	access:public	signature:(float *mData)
Matrix4f	src/Math.hpp	/^        Matrix4f(float m0,  float m1,  float m2,  float m3,$/;"	f	struct:Math::Matrix4f	access:public	signature:(float m0, float m1, float m2, float m3, float m4, float m5, float m6, float m7, float m8, float m9, float m10, float m11, float m12, float m13, float m14, float m15)
Matrix4f	src/Math.hpp	/^    struct Matrix4f$/;"	s	namespace:Math
MemoryTypeIndexToHeapIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t MemoryTypeIndexToHeapIndex(uint32_t memTypeIndex) const$/;"	f	struct:VmaAllocator_T	access:public	signature:(uint32_t memTypeIndex) const
MergeFreeWithNext	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::MergeFreeWithNext(VmaSuballocationList::iterator item)$/;"	f	class:VmaBlockMetadata	signature:(VmaSuballocationList::iterator item)
MeshVerts	src/q3bsp/Q3Bsp.hpp	/^    MeshVerts,$/;"	e	enum:LumpTypes
ModelViewProjectionMatrix	src/renderer/RenderContext.hpp	/^    Math::Matrix4f ModelViewProjectionMatrix; \/\/ global MVP used to orient the entire world$/;"	m	class:RenderContext	access:public
ModelViewProjectionMatrix	src/renderer/RenderContext.hpp	/^    Math::Matrix4f ModelViewProjectionMatrix;$/;"	m	struct:UniformBufferObject	access:public
Models	src/q3bsp/Q3Bsp.hpp	/^    Models,$/;"	e	enum:LumpTypes
MouseSensitivity	src/renderer/Camera.cpp	/^static const float MouseSensitivity = 800.f;$/;"	v	file:
Move	src/renderer/Camera.cpp	/^void Camera::Move(const Math::Vector3f &Direction)$/;"	f	class:Camera	signature:(const Math::Vector3f &Direction)
MoveForward	src/renderer/Camera.cpp	/^void Camera::MoveForward(float Distance)$/;"	f	class:Camera	signature:(float Distance)
MoveMakesSense	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaDefragmentator::MoveMakesSense($/;"	f	class:VmaDefragmentator	signature:( size_t dstBlockIndex, VkDeviceSize dstOffset, size_t srcBlockIndex, VkDeviceSize srcOffset)
MoveUpward	src/renderer/Camera.cpp	/^void Camera::MoveUpward(float Distance)$/;"	f	class:Camera	signature:(float Distance)
NextFreeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^        uint32_t NextFreeIndex;$/;"	m	union:VmaPoolAllocator::Item	access:public
Nodes	src/q3bsp/Q3Bsp.hpp	/^    Nodes,$/;"	e	enum:LumpTypes
Normalize	src/Math.cpp	/^    void Quaternion::Normalize()$/;"	f	class:Math::Quaternion	signature:()
Normalize	src/Math.cpp	/^    void Vector3f::Normalize()$/;"	f	class:Math::Vector3f	signature:()
OnKeyPress	src/Application.cpp	/^void Application::OnKeyPress(KeyCode key)$/;"	f	class:Application	signature:(KeyCode key)
OnKeyRelease	src/Application.cpp	/^void Application::OnKeyRelease(KeyCode key)$/;"	f	class:Application	signature:(KeyCode key)
OnMouseMove	src/Application.cpp	/^void Application::OnMouseMove(int x, int y)$/;"	f	class:Application	signature:(int x, int y)
OnMouseMove	src/renderer/Camera.cpp	/^void Camera::OnMouseMove(int x, int y)$/;"	f	class:Camera	signature:(int x, int y)
OnMouseMove	src/renderer/CameraDirector.cpp	/^void CameraDirector::OnMouseMove(int x, int y)$/;"	f	class:CameraDirector	signature:(int x, int y)
OnRender	src/Application.cpp	/^void Application::OnRender()$/;"	f	class:Application	signature:()
OnRender	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::OnRender()$/;"	f	class:Q3BspMap	signature:()
OnRender	src/q3bsp/Q3BspStatsUI.cpp	/^void Q3StatsUI::OnRender()$/;"	f	class:Q3StatsUI	signature:()
OnStart	src/Application.cpp	/^void Application::OnStart(int argc, char **argv)$/;"	f	class:Application	signature:(int argc, char **argv)
OnTerminate	src/Application.cpp	/^void Application::OnTerminate()$/;"	f	class:Application	signature:()
OnUpdate	src/Application.cpp	/^void Application::OnUpdate(float dt)$/;"	f	class:Application	signature:(float dt)
OnWindowChanged	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::OnWindowChanged()$/;"	f	class:Q3BspMap	signature:()
OnWindowChanged	src/q3bsp/Q3BspStatsUI.cpp	/^void Q3StatsUI::OnWindowChanged()$/;"	f	class:Q3StatsUI	signature:()
OnWindowMinimized	src/Application.cpp	/^void Application::OnWindowMinimized(bool minimized)$/;"	f	class:Application	signature:(bool minimized)
OnWindowResize	src/Application.cpp	/^void Application::OnWindowResize(int newWidth, int newHeight)$/;"	f	class:Application	signature:(int newWidth, int newHeight)
One	src/Math.cpp	/^    void Matrix4f::One()$/;"	f	class:Math::Matrix4f	signature:()
PFN_vmaAllocateDeviceMemoryFunction	src/renderer/vulkan/vk_mem_alloc.h	/^typedef void (VKAPI_PTR *PFN_vmaAllocateDeviceMemoryFunction)($/;"	t
PFN_vmaFreeDeviceMemoryFunction	src/renderer/vulkan/vk_mem_alloc.h	/^typedef void (VKAPI_PTR *PFN_vmaFreeDeviceMemoryFunction)($/;"	t
PI	src/Math.hpp	10;"	d
PIdiv180	src/Math.hpp	12;"	d
PIdiv180inv	src/Math.hpp	11;"	d
PIdiv2	src/Math.hpp	13;"	d
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	293;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	299;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	302;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	305;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	308;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	311;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	314;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	317;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	320;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	323;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	326;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	329;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	332;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	338;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	341;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	344;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	347;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	350;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	353;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	356;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	359;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	362;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	365;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	369;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	372;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	375;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	378;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	381;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	385;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	291;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	297;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	300;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	303;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	306;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	309;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	312;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	315;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	318;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	321;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	330;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	339;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	342;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	345;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	348;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	351;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	354;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	357;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	360;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	364;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	367;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	370;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	373;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	376;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	380;"	d	file:
PNG_TYPE	src/renderer/stb_image.c	2128;"	d	file:
Pipeline	src/renderer/vulkan/Pipeline.hpp	/^    struct Pipeline$/;"	s	namespace:vk
Plane	src/Frustum.hpp	/^struct Plane$/;"	s
Plane::A	src/Frustum.hpp	/^    float A, B, C, D;$/;"	m	struct:Plane	access:public
Plane::B	src/Frustum.hpp	/^    float A, B, C, D;$/;"	m	struct:Plane	access:public
Plane::C	src/Frustum.hpp	/^    float A, B, C, D;$/;"	m	struct:Plane	access:public
Plane::D	src/Frustum.hpp	/^    float A, B, C, D;$/;"	m	struct:Plane	access:public
Planes	src/q3bsp/Q3Bsp.hpp	/^    Planes,$/;"	e	enum:LumpTypes
PointBehindPlane	src/Math.hpp	/^        PointBehindPlane,$/;"	e	enum:Math::PointPlanePosition
PointInFrontOfPlane	src/Math.hpp	/^        PointInFrontOfPlane$/;"	e	enum:Math::PointPlanePosition
PointPlanePos	src/Math.cpp	/^    int PointPlanePos(float normalX, float normalY, float normalZ, float intercept, const Math::Vector3f &point)$/;"	f	namespace:Math	signature:(float normalX, float normalY, float normalZ, float intercept, const Math::Vector3f &point)
PointPlanePosition	src/Math.hpp	/^    enum PointPlanePosition$/;"	g	namespace:Math
PopBack	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaRawList<T>::PopBack()$/;"	f	class:VmaRawList	signature:()
PopFront	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaRawList<T>::PopFront()$/;"	f	class:VmaRawList	signature:()
Position	src/renderer/Camera.hpp	/^    const Math::Vector3f &Position() const { return m_position; }$/;"	f	class:Camera	access:public	signature:() const
Present	src/renderer/RenderContext.cpp	/^VkResult RenderContext::Present(bool uiVisible)$/;"	f	class:RenderContext	signature:(bool uiVisible)
PrintDetailedMap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::PrintDetailedMap(VmaJsonWriter& json)$/;"	f	class:VmaAllocator_T	signature:(VmaJsonWriter& json)
PrintDetailedMap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::PrintDetailedMap(class VmaJsonWriter& json) const$/;"	f	class:VmaBlockMetadata	signature:(class VmaJsonWriter& json) const
PrintDetailedMap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::PrintDetailedMap(class VmaJsonWriter& json)$/;"	f	class:VmaBlockVector	signature:(class VmaJsonWriter& json)
ProjectionMatrix	src/renderer/Camera.hpp	/^    const Math::Matrix4f &ProjectionMatrix() const { return m_projectionMatrix; }$/;"	f	class:Camera	access:public	signature:() const
PushBack	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::PushBack()$/;"	f	class:VmaRawList	signature:()
PushBack	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::PushBack(const T& value)$/;"	f	class:VmaRawList	signature:(const T& value)
PushFront	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::PushFront()$/;"	f	class:VmaRawList	signature:()
PushFront	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::PushFront(const T& value)$/;"	f	class:VmaRawList	signature:(const T& value)
Q3BSPLOADER_INCLUDED	src/q3bsp/Q3BspLoader.hpp	2;"	d
Q3BSPMAP_INCLUDED	src/q3bsp/Q3BspMap.hpp	2;"	d
Q3BSPPATCH_INCLUDED	src/q3bsp/Q3BspPatch.hpp	2;"	d
Q3BSPRENDERHELPERS_INCLUDED	src/q3bsp/Q3BspRenderHelpers.hpp	2;"	d
Q3BSPSTATSUI_INCLUDED	src/q3bsp/Q3BspStatsUI.hpp	2;"	d
Q3BSP_INCLUDED	src/q3bsp/Q3Bsp.hpp	2;"	d
Q3BspBiquadPatch	src/q3bsp/Q3BspPatch.hpp	/^class Q3BspBiquadPatch$/;"	c
Q3BspBiquadPatch::Tesselate	src/q3bsp/Q3BspPatch.cpp	/^void Q3BspBiquadPatch::Tesselate(int tessLevel)$/;"	f	class:Q3BspBiquadPatch	signature:(int tessLevel)
Q3BspBiquadPatch::controlPoints	src/q3bsp/Q3BspPatch.hpp	/^    Q3BspVertexLump              controlPoints[9];$/;"	m	class:Q3BspBiquadPatch	access:public
Q3BspBiquadPatch::m_indices	src/q3bsp/Q3BspPatch.hpp	/^    std::vector<unsigned int>    m_indices;$/;"	m	class:Q3BspBiquadPatch	access:public
Q3BspBiquadPatch::m_rowIndexPointers	src/q3bsp/Q3BspPatch.hpp	/^    unsigned int**  m_rowIndexPointers = nullptr;$/;"	m	class:Q3BspBiquadPatch	access:private
Q3BspBiquadPatch::m_tesselationLevel	src/q3bsp/Q3BspPatch.hpp	/^    int                          m_tesselationLevel = 0;$/;"	m	class:Q3BspBiquadPatch	access:public
Q3BspBiquadPatch::m_trianglesPerRow	src/q3bsp/Q3BspPatch.hpp	/^    int*            m_trianglesPerRow  = nullptr;$/;"	m	class:Q3BspBiquadPatch	access:private
Q3BspBiquadPatch::m_vertices	src/q3bsp/Q3BspPatch.hpp	/^    std::vector<Q3BspVertexLump> m_vertices;$/;"	m	class:Q3BspBiquadPatch	access:public
Q3BspBiquadPatch::~Q3BspBiquadPatch	src/q3bsp/Q3BspPatch.hpp	/^    ~Q3BspBiquadPatch()$/;"	f	class:Q3BspBiquadPatch	access:public	signature:()
Q3BspBrushLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspBrushLump$/;"	s
Q3BspBrushLump::brushSide	src/q3bsp/Q3Bsp.hpp	/^    int brushSide;$/;"	m	struct:Q3BspBrushLump	access:public
Q3BspBrushLump::n_brushSides	src/q3bsp/Q3Bsp.hpp	/^    int n_brushSides;$/;"	m	struct:Q3BspBrushLump	access:public
Q3BspBrushLump::texture	src/q3bsp/Q3Bsp.hpp	/^    int texture;$/;"	m	struct:Q3BspBrushLump	access:public
Q3BspBrushSideLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspBrushSideLump$/;"	s
Q3BspBrushSideLump::plane	src/q3bsp/Q3Bsp.hpp	/^    int plane;$/;"	m	struct:Q3BspBrushSideLump	access:public
Q3BspBrushSideLump::texture	src/q3bsp/Q3Bsp.hpp	/^    int texture;$/;"	m	struct:Q3BspBrushSideLump	access:public
Q3BspDirEntry	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspDirEntry$/;"	s
Q3BspDirEntry::length	src/q3bsp/Q3Bsp.hpp	/^    int length;$/;"	m	struct:Q3BspDirEntry	access:public
Q3BspDirEntry::offset	src/q3bsp/Q3Bsp.hpp	/^    int offset;$/;"	m	struct:Q3BspDirEntry	access:public
Q3BspEffectLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspEffectLump$/;"	s
Q3BspEffectLump::brush	src/q3bsp/Q3Bsp.hpp	/^    int  brush;$/;"	m	struct:Q3BspEffectLump	access:public
Q3BspEffectLump::name	src/q3bsp/Q3Bsp.hpp	/^    char name[64];$/;"	m	struct:Q3BspEffectLump	access:public
Q3BspEffectLump::unknown	src/q3bsp/Q3Bsp.hpp	/^    int  unknown;$/;"	m	struct:Q3BspEffectLump	access:public
Q3BspEntityLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspEntityLump$/;"	s
Q3BspEntityLump::ents	src/q3bsp/Q3Bsp.hpp	/^    char *ents;$/;"	m	struct:Q3BspEntityLump	access:public
Q3BspEntityLump::size	src/q3bsp/Q3Bsp.hpp	/^    int  size;$/;"	m	struct:Q3BspEntityLump	access:public
Q3BspFaceLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspFaceLump$/;"	s
Q3BspFaceLump::effect	src/q3bsp/Q3Bsp.hpp	/^    int   effect;$/;"	m	struct:Q3BspFaceLump	access:public
Q3BspFaceLump::lm_index	src/q3bsp/Q3Bsp.hpp	/^    int   lm_index;$/;"	m	struct:Q3BspFaceLump	access:public
Q3BspFaceLump::lm_origin	src/q3bsp/Q3Bsp.hpp	/^    vec3f lm_origin;$/;"	m	struct:Q3BspFaceLump	access:public
Q3BspFaceLump::lm_size	src/q3bsp/Q3Bsp.hpp	/^    vec2i lm_size;$/;"	m	struct:Q3BspFaceLump	access:public
Q3BspFaceLump::lm_start	src/q3bsp/Q3Bsp.hpp	/^    vec2i lm_start;$/;"	m	struct:Q3BspFaceLump	access:public
Q3BspFaceLump::lm_vecs	src/q3bsp/Q3Bsp.hpp	/^    vec3f lm_vecs[2];$/;"	m	struct:Q3BspFaceLump	access:public
Q3BspFaceLump::meshvert	src/q3bsp/Q3Bsp.hpp	/^    int   meshvert;$/;"	m	struct:Q3BspFaceLump	access:public
Q3BspFaceLump::n_meshverts	src/q3bsp/Q3Bsp.hpp	/^    int   n_meshverts;$/;"	m	struct:Q3BspFaceLump	access:public
Q3BspFaceLump::n_vertexes	src/q3bsp/Q3Bsp.hpp	/^    int   n_vertexes;$/;"	m	struct:Q3BspFaceLump	access:public
Q3BspFaceLump::normal	src/q3bsp/Q3Bsp.hpp	/^    vec3f normal;$/;"	m	struct:Q3BspFaceLump	access:public
Q3BspFaceLump::size	src/q3bsp/Q3Bsp.hpp	/^    vec2i size;$/;"	m	struct:Q3BspFaceLump	access:public
Q3BspFaceLump::texture	src/q3bsp/Q3Bsp.hpp	/^    int   texture;$/;"	m	struct:Q3BspFaceLump	access:public
Q3BspFaceLump::type	src/q3bsp/Q3Bsp.hpp	/^    int   type;$/;"	m	struct:Q3BspFaceLump	access:public
Q3BspFaceLump::vertex	src/q3bsp/Q3Bsp.hpp	/^    int   vertex;$/;"	m	struct:Q3BspFaceLump	access:public
Q3BspHeader	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspHeader$/;"	s
Q3BspHeader::direntries	src/q3bsp/Q3Bsp.hpp	/^    Q3BspDirEntry direntries[17];$/;"	m	struct:Q3BspHeader	access:public
Q3BspHeader::magic	src/q3bsp/Q3Bsp.hpp	/^    char          magic[4];$/;"	m	struct:Q3BspHeader	access:public
Q3BspHeader::version	src/q3bsp/Q3Bsp.hpp	/^    int           version;$/;"	m	struct:Q3BspHeader	access:public
Q3BspLeafBrushLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspLeafBrushLump$/;"	s
Q3BspLeafBrushLump::brush	src/q3bsp/Q3Bsp.hpp	/^    int brush;$/;"	m	struct:Q3BspLeafBrushLump	access:public
Q3BspLeafFaceLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspLeafFaceLump$/;"	s
Q3BspLeafFaceLump::face	src/q3bsp/Q3Bsp.hpp	/^    int face;$/;"	m	struct:Q3BspLeafFaceLump	access:public
Q3BspLeafLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspLeafLump$/;"	s
Q3BspLeafLump::area	src/q3bsp/Q3Bsp.hpp	/^    int   area;$/;"	m	struct:Q3BspLeafLump	access:public
Q3BspLeafLump::cluster	src/q3bsp/Q3Bsp.hpp	/^    int   cluster;$/;"	m	struct:Q3BspLeafLump	access:public
Q3BspLeafLump::leafBrush	src/q3bsp/Q3Bsp.hpp	/^    int   leafBrush;$/;"	m	struct:Q3BspLeafLump	access:public
Q3BspLeafLump::leafFace	src/q3bsp/Q3Bsp.hpp	/^    int   leafFace;$/;"	m	struct:Q3BspLeafLump	access:public
Q3BspLeafLump::maxs	src/q3bsp/Q3Bsp.hpp	/^    vec3i maxs;$/;"	m	struct:Q3BspLeafLump	access:public
Q3BspLeafLump::mins	src/q3bsp/Q3Bsp.hpp	/^    vec3i mins;$/;"	m	struct:Q3BspLeafLump	access:public
Q3BspLeafLump::n_leafBrushes	src/q3bsp/Q3Bsp.hpp	/^    int   n_leafBrushes;$/;"	m	struct:Q3BspLeafLump	access:public
Q3BspLeafLump::n_leafFaces	src/q3bsp/Q3Bsp.hpp	/^    int   n_leafFaces;$/;"	m	struct:Q3BspLeafLump	access:public
Q3BspLightMapLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspLightMapLump$/;"	s
Q3BspLightMapLump::map	src/q3bsp/Q3Bsp.hpp	/^    unsigned char map[128 * 128 * 3];$/;"	m	struct:Q3BspLightMapLump	access:public
Q3BspLightVolLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspLightVolLump$/;"	s
Q3BspLightVolLump::ambient	src/q3bsp/Q3Bsp.hpp	/^    unsigned char ambient[3];$/;"	m	struct:Q3BspLightVolLump	access:public
Q3BspLightVolLump::dir	src/q3bsp/Q3Bsp.hpp	/^    unsigned char dir[2];$/;"	m	struct:Q3BspLightVolLump	access:public
Q3BspLightVolLump::directional	src/q3bsp/Q3Bsp.hpp	/^    unsigned char directional[3];$/;"	m	struct:Q3BspLightVolLump	access:public
Q3BspLoader	src/q3bsp/Q3BspLoader.hpp	/^class Q3BspLoader$/;"	c
Q3BspLoader::Load	src/q3bsp/Q3BspLoader.cpp	/^Q3BspMap *Q3BspLoader::Load(const std::string &filename)$/;"	f	class:Q3BspLoader	signature:(const std::string &filename)
Q3BspLoader::LoadBspHeader	src/q3bsp/Q3BspLoader.cpp	/^void Q3BspLoader::LoadBspHeader(Q3BspHeader &hdr, std::ifstream &fstream)$/;"	f	class:Q3BspLoader	signature:(Q3BspHeader &hdr, std::ifstream &fstream)
Q3BspLoader::LoadEntitiesLump	src/q3bsp/Q3BspLoader.cpp	/^void Q3BspLoader::LoadEntitiesLump(Q3BspMap *map, std::ifstream &fstream)$/;"	f	class:Q3BspLoader	signature:(Q3BspMap *map, std::ifstream &fstream)
Q3BspLoader::LoadLump	src/q3bsp/Q3BspLoader.hpp	/^void Q3BspLoader::LoadLump(Q3BspMap *map, LumpTypes lType, std::vector<T> &container, std::ifstream &fstream)$/;"	f	class:Q3BspLoader	signature:(Q3BspMap *map, LumpTypes lType, std::vector<T> &container, std::ifstream &fstream)
Q3BspLoader::LoadVisDataLump	src/q3bsp/Q3BspLoader.cpp	/^void Q3BspLoader::LoadVisDataLump(Q3BspMap *map, std::ifstream &fstream)$/;"	f	class:Q3BspLoader	signature:(Q3BspMap *map, std::ifstream &fstream)
Q3BspMap	src/q3bsp/Q3BspMap.hpp	/^    Q3BspMap(bool bspValid) : BspMap(bspValid) {}$/;"	f	class:Q3BspMap	access:public	signature:(bool bspValid)
Q3BspMap	src/q3bsp/Q3BspMap.hpp	/^class Q3BspMap : public BspMap$/;"	c	inherits:BspMap
Q3BspMap::CalculateVisibleFaces	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::CalculateVisibleFaces(const Math::Vector3f &cameraPosition)$/;"	f	class:Q3BspMap	signature:(const Math::Vector3f &cameraPosition)
Q3BspMap::ClusterVisible	src/q3bsp/Q3BspMap.cpp	/^bool Q3BspMap::ClusterVisible(int cameraCluster, int testCluster) const$/;"	f	class:Q3BspMap	signature:(int cameraCluster, int testCluster) const
Q3BspMap::CreateBuffersForFace	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::CreateBuffersForFace(const Q3BspFaceLump &face, int idx)$/;"	f	class:Q3BspMap	signature:(const Q3BspFaceLump &face, int idx)
Q3BspMap::CreateBuffersForPatch	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::CreateBuffersForPatch(int idx)$/;"	f	class:Q3BspMap	signature:(int idx)
Q3BspMap::CreateDescriptor	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::CreateDescriptor(const vk::Texture **textures, vk::Descriptor *descriptor)$/;"	f	class:Q3BspMap	signature:(const vk::Texture **textures, vk::Descriptor *descriptor)
Q3BspMap::CreateDescriptorSetLayout	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::CreateDescriptorSetLayout()$/;"	f	class:Q3BspMap	signature:()
Q3BspMap::CreatePatch	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::CreatePatch(const Q3BspFaceLump &f)$/;"	f	class:Q3BspMap	signature:(const Q3BspFaceLump &f)
Q3BspMap::FindCameraLeaf	src/q3bsp/Q3BspMap.cpp	/^int Q3BspMap::FindCameraLeaf(const Math::Vector3f &cameraPosition) const$/;"	f	class:Q3BspMap	signature:(const Math::Vector3f &cameraPosition) const
Q3BspMap::Init	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::Init()$/;"	f	class:Q3BspMap	signature:()
Q3BspMap::LoadLightmaps	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::LoadLightmaps()$/;"	f	class:Q3BspMap	signature:()
Q3BspMap::LoadTextures	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::LoadTextures()$/;"	f	class:Q3BspMap	signature:()
Q3BspMap::OnRender	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::OnRender()$/;"	f	class:Q3BspMap	signature:()
Q3BspMap::OnWindowChanged	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::OnWindowChanged()$/;"	f	class:Q3BspMap	signature:()
Q3BspMap::Q3BspMap	src/q3bsp/Q3BspMap.hpp	/^    Q3BspMap(bool bspValid) : BspMap(bspValid) {}$/;"	f	class:Q3BspMap	access:public	signature:(bool bspValid)
Q3BspMap::RebuildPipelines	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::RebuildPipelines()$/;"	f	class:Q3BspMap	signature:()
Q3BspMap::RecordCommandBuffers	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::RecordCommandBuffers()$/;"	f	class:Q3BspMap	signature:()
Q3BspMap::SetLightmapGamma	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::SetLightmapGamma(float gamma)$/;"	f	class:Q3BspMap	signature:(float gamma)
Q3BspMap::ToggleRenderFlag	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::ToggleRenderFlag(int flag)$/;"	f	class:Q3BspMap	signature:(int flag)
Q3BspMap::brushSides	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspBrushSideLump> brushSides;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::brushes	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspBrushLump>     brushes;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::effects	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspEffectLump>    effects;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::entities	src/q3bsp/Q3BspMap.hpp	/^    Q3BspEntityLump entities;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::faces	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspFaceLump>      faces;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::header	src/q3bsp/Q3BspMap.hpp	/^    Q3BspHeader     header;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::leafBrushes	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspLeafBrushLump> leafBrushes;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::leafFaces	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspLeafFaceLump>  leafFaces;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::leaves	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspLeafLump>      leaves;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::lightMaps	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspLightMapLump>  lightMaps;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::lightVols	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspLightVolLump>  lightVols;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::m_commandBuffers	src/q3bsp/Q3BspMap.hpp	/^    vk::CmdBufferList m_commandBuffers;$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_commandPool	src/q3bsp/Q3BspMap.hpp	/^    VkCommandPool  m_commandPool = VK_NULL_HANDLE;$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_dsLayout	src/q3bsp/Q3BspMap.hpp	/^    VkDescriptorSetLayout m_dsLayout;$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_facesPipeline	src/q3bsp/Q3BspMap.hpp	/^    vk::Pipeline   m_facesPipeline; \/\/ used for rendering standard faces$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_frustum	src/q3bsp/Q3BspMap.hpp	/^    Frustum  m_frustum; \/\/ view frustum$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_lightmapTextures	src/q3bsp/Q3BspMap.hpp	/^    vk::Texture *m_lightmapTextures = nullptr;        \/\/ bsp lightmaps$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_missingTex	src/q3bsp/Q3BspMap.hpp	/^    GameTexture *m_missingTex = nullptr; \/\/ rendered if an in-game texture is missing$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_patchPipeline	src/q3bsp/Q3BspMap.hpp	/^    vk::Pipeline   m_patchPipeline; \/\/ used for rendering curves\/patches$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_patches	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspPatch *>       m_patches;        \/\/ curved surfaces$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_renderBuffers	src/q3bsp/Q3BspMap.hpp	/^    RenderBuffers m_renderBuffers;$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_renderFaces	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3FaceRenderable>   m_renderFaces;    \/\/ bsp faces in "renderable format"$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_renderLeaves	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3LeafRenderable>   m_renderLeaves;   \/\/ bsp leaves in "renderable format"$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_renderPass	src/q3bsp/Q3BspMap.hpp	/^    vk::RenderPass m_renderPass;$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_textures	src/q3bsp/Q3BspMap.hpp	/^    std::vector<GameTexture *>      m_textures;       \/\/ loaded in-game textures$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_ubo	src/q3bsp/Q3BspMap.hpp	/^    UniformBufferObject m_ubo;$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_vbInfo	src/q3bsp/Q3BspMap.hpp	/^    vk::VertexBufferInfo  m_vbInfo;$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_visibleFaces	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3FaceRenderable *> m_visibleFaces;   \/\/ list of visible surfaces to render$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_visiblePatches	src/q3bsp/Q3BspMap.hpp	/^    std::vector<int>                m_visiblePatches; \/\/ list of visible patches to render$/;"	m	class:Q3BspMap	access:private
Q3BspMap::m_whiteTex	src/q3bsp/Q3BspMap.hpp	/^    vk::Texture  m_whiteTex;             \/\/ used if no lightmap specified for a face$/;"	m	class:Q3BspMap	access:private
Q3BspMap::meshVertices	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspMeshVertLump>  meshVertices;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::models	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspModelLump>     models;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::nodes	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspNodeLump>      nodes;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::planes	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspPlaneLump>     planes;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::s_tesselationLevel	src/q3bsp/Q3BspMap.cpp	/^const int   Q3BspMap::s_tesselationLevel = 10;   \/\/ level of curved surface tesselation$/;"	m	class:Q3BspMap	file:
Q3BspMap::s_tesselationLevel	src/q3bsp/Q3BspMap.hpp	/^    static const int   s_tesselationLevel; \/\/ level of curved surface tesselation$/;"	m	class:Q3BspMap	access:public
Q3BspMap::s_worldScale	src/q3bsp/Q3BspMap.cpp	/^const float Q3BspMap::s_worldScale       = 64.f; \/\/ scale down factor for the map$/;"	m	class:Q3BspMap	file:
Q3BspMap::s_worldScale	src/q3bsp/Q3BspMap.hpp	/^    static const float s_worldScale;       \/\/ scale down factor for the map$/;"	m	class:Q3BspMap	access:public
Q3BspMap::textures	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspTextureLump>   textures;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::vertices	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspVertexLump>    vertices;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::visData	src/q3bsp/Q3BspMap.hpp	/^    Q3BspVisDataLump                visData;$/;"	m	class:Q3BspMap	access:public
Q3BspMap::~Q3BspMap	src/q3bsp/Q3BspMap.cpp	/^Q3BspMap::~Q3BspMap()$/;"	f	class:Q3BspMap	signature:()
Q3BspMeshVertLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspMeshVertLump$/;"	s
Q3BspMeshVertLump::offset	src/q3bsp/Q3Bsp.hpp	/^    int offset;$/;"	m	struct:Q3BspMeshVertLump	access:public
Q3BspModelLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspModelLump$/;"	s
Q3BspModelLump::brush	src/q3bsp/Q3Bsp.hpp	/^    int   brush;$/;"	m	struct:Q3BspModelLump	access:public
Q3BspModelLump::face	src/q3bsp/Q3Bsp.hpp	/^    int   face;$/;"	m	struct:Q3BspModelLump	access:public
Q3BspModelLump::maxs	src/q3bsp/Q3Bsp.hpp	/^    vec3f maxs;$/;"	m	struct:Q3BspModelLump	access:public
Q3BspModelLump::mins	src/q3bsp/Q3Bsp.hpp	/^    vec3f mins;$/;"	m	struct:Q3BspModelLump	access:public
Q3BspModelLump::n_brushes	src/q3bsp/Q3Bsp.hpp	/^    int   n_brushes;$/;"	m	struct:Q3BspModelLump	access:public
Q3BspModelLump::n_faces	src/q3bsp/Q3Bsp.hpp	/^    int   n_faces;$/;"	m	struct:Q3BspModelLump	access:public
Q3BspNodeLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspNodeLump$/;"	s
Q3BspNodeLump::children	src/q3bsp/Q3Bsp.hpp	/^    vec2i children;$/;"	m	struct:Q3BspNodeLump	access:public
Q3BspNodeLump::maxs	src/q3bsp/Q3Bsp.hpp	/^    vec3i maxs;$/;"	m	struct:Q3BspNodeLump	access:public
Q3BspNodeLump::mins	src/q3bsp/Q3Bsp.hpp	/^    vec3i mins;$/;"	m	struct:Q3BspNodeLump	access:public
Q3BspNodeLump::plane	src/q3bsp/Q3Bsp.hpp	/^    int   plane;$/;"	m	struct:Q3BspNodeLump	access:public
Q3BspPatch	src/q3bsp/Q3BspPatch.hpp	/^struct Q3BspPatch$/;"	s
Q3BspPatch::height	src/q3bsp/Q3BspPatch.hpp	/^    int height = 0;$/;"	m	struct:Q3BspPatch	access:public
Q3BspPatch::lightmapIdx	src/q3bsp/Q3BspPatch.hpp	/^    int lightmapIdx = 0; \/\/ surface lightmap index$/;"	m	struct:Q3BspPatch	access:public
Q3BspPatch::quadraticPatches	src/q3bsp/Q3BspPatch.hpp	/^    std::vector<Q3BspBiquadPatch> quadraticPatches;$/;"	m	struct:Q3BspPatch	access:public
Q3BspPatch::textureIdx	src/q3bsp/Q3BspPatch.hpp	/^    int textureIdx  = 0; \/\/ surface texture index$/;"	m	struct:Q3BspPatch	access:public
Q3BspPatch::width	src/q3bsp/Q3BspPatch.hpp	/^    int width  = 0;$/;"	m	struct:Q3BspPatch	access:public
Q3BspPlaneLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspPlaneLump$/;"	s
Q3BspPlaneLump::dist	src/q3bsp/Q3Bsp.hpp	/^    float dist;$/;"	m	struct:Q3BspPlaneLump	access:public
Q3BspPlaneLump::normal	src/q3bsp/Q3Bsp.hpp	/^    vec3f normal;$/;"	m	struct:Q3BspPlaneLump	access:public
Q3BspRenderFlags	src/q3bsp/Q3BspRenderHelpers.hpp	/^enum Q3BspRenderFlags$/;"	g
Q3BspTextureLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspTextureLump$/;"	s
Q3BspTextureLump::contents	src/q3bsp/Q3Bsp.hpp	/^    int  contents;$/;"	m	struct:Q3BspTextureLump	access:public
Q3BspTextureLump::flags	src/q3bsp/Q3Bsp.hpp	/^    int  flags;$/;"	m	struct:Q3BspTextureLump	access:public
Q3BspTextureLump::name	src/q3bsp/Q3Bsp.hpp	/^    char name[64];$/;"	m	struct:Q3BspTextureLump	access:public
Q3BspVertexLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspVertexLump$/;"	s
Q3BspVertexLump::color	src/q3bsp/Q3Bsp.hpp	/^    unsigned char color[4];$/;"	m	struct:Q3BspVertexLump	access:public
Q3BspVertexLump::normal	src/q3bsp/Q3Bsp.hpp	/^    vec3f normal;$/;"	m	struct:Q3BspVertexLump	access:public
Q3BspVertexLump::operator *	src/q3bsp/Q3Bsp.hpp	/^    Q3BspVertexLump operator*(const float rhs) const$/;"	f	struct:Q3BspVertexLump	access:public	signature:(const float rhs) const
Q3BspVertexLump::operator +	src/q3bsp/Q3Bsp.hpp	/^    Q3BspVertexLump operator+(const Q3BspVertexLump & rhs) const$/;"	f	struct:Q3BspVertexLump	access:public	signature:(const Q3BspVertexLump & rhs) const
Q3BspVertexLump::position	src/q3bsp/Q3Bsp.hpp	/^    vec3f position;$/;"	m	struct:Q3BspVertexLump	access:public
Q3BspVertexLump::texcoord	src/q3bsp/Q3Bsp.hpp	/^    vec2f texcoord[2];$/;"	m	struct:Q3BspVertexLump	access:public
Q3BspVisDataLump	src/q3bsp/Q3Bsp.hpp	/^struct Q3BspVisDataLump$/;"	s
Q3BspVisDataLump::n_vecs	src/q3bsp/Q3Bsp.hpp	/^    int n_vecs;$/;"	m	struct:Q3BspVisDataLump	access:public
Q3BspVisDataLump::sz_vecs	src/q3bsp/Q3Bsp.hpp	/^    int sz_vecs;$/;"	m	struct:Q3BspVisDataLump	access:public
Q3BspVisDataLump::vecs	src/q3bsp/Q3Bsp.hpp	/^    unsigned char* vecs;$/;"	m	struct:Q3BspVisDataLump	access:public
Q3FaceRenderable	src/q3bsp/Q3BspRenderHelpers.hpp	/^struct Q3FaceRenderable$/;"	s
Q3FaceRenderable::index	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int index = 0;$/;"	m	struct:Q3FaceRenderable	access:public
Q3FaceRenderable::type	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int type  = 0;$/;"	m	struct:Q3FaceRenderable	access:public
Q3LeafRenderable	src/q3bsp/Q3BspRenderHelpers.hpp	/^struct Q3LeafRenderable$/;"	s
Q3LeafRenderable::boundingBoxVertices	src/q3bsp/Q3BspRenderHelpers.hpp	/^    Math::Vector3f boundingBoxVertices[8];$/;"	m	struct:Q3LeafRenderable	access:public
Q3LeafRenderable::firstFace	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int firstFace  = 0;$/;"	m	struct:Q3LeafRenderable	access:public
Q3LeafRenderable::numFaces	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int numFaces   = 0;$/;"	m	struct:Q3LeafRenderable	access:public
Q3LeafRenderable::visCluster	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int visCluster = 0;$/;"	m	struct:Q3LeafRenderable	access:public
Q3RenderAlphaTest	src/q3bsp/Q3BspRenderHelpers.hpp	/^    Q3RenderAlphaTest      = 1 << 3,$/;"	e	enum:Q3BspRenderFlags
Q3RenderShowLightmaps	src/q3bsp/Q3BspRenderHelpers.hpp	/^    Q3RenderShowLightmaps  = 1 << 1,$/;"	e	enum:Q3BspRenderFlags
Q3RenderShowWireframe	src/q3bsp/Q3BspRenderHelpers.hpp	/^    Q3RenderShowWireframe  = 1 << 0,$/;"	e	enum:Q3BspRenderFlags
Q3RenderSkipFC	src/q3bsp/Q3BspRenderHelpers.hpp	/^    Q3RenderSkipFC         = 1 << 6$/;"	e	enum:Q3BspRenderFlags
Q3RenderSkipMissingTex	src/q3bsp/Q3BspRenderHelpers.hpp	/^    Q3RenderSkipMissingTex = 1 << 4,$/;"	e	enum:Q3BspRenderFlags
Q3RenderSkipPVS	src/q3bsp/Q3BspRenderHelpers.hpp	/^    Q3RenderSkipPVS        = 1 << 5,$/;"	e	enum:Q3BspRenderFlags
Q3RenderUseLightmaps	src/q3bsp/Q3BspRenderHelpers.hpp	/^    Q3RenderUseLightmaps   = 1 << 2,$/;"	e	enum:Q3BspRenderFlags
Q3StatsUI	src/q3bsp/Q3BspStatsUI.cpp	/^Q3StatsUI::Q3StatsUI(BspMap *map) : StatsUI(map)$/;"	f	class:Q3StatsUI	signature:(BspMap *map)
Q3StatsUI	src/q3bsp/Q3BspStatsUI.hpp	/^class Q3StatsUI : public StatsUI$/;"	c	inherits:StatsUI
Q3StatsUI::OnRender	src/q3bsp/Q3BspStatsUI.cpp	/^void Q3StatsUI::OnRender()$/;"	f	class:Q3StatsUI	signature:()
Q3StatsUI::OnWindowChanged	src/q3bsp/Q3BspStatsUI.cpp	/^void Q3StatsUI::OnWindowChanged()$/;"	f	class:Q3StatsUI	signature:()
Q3StatsUI::Q3StatsUI	src/q3bsp/Q3BspStatsUI.cpp	/^Q3StatsUI::Q3StatsUI(BspMap *map) : StatsUI(map)$/;"	f	class:Q3StatsUI	signature:(BspMap *map)
Q3StatsUI::m_font	src/q3bsp/Q3BspStatsUI.hpp	/^    Font *m_font = nullptr;$/;"	m	class:Q3StatsUI	access:private
Q3StatsUI::~Q3StatsUI	src/q3bsp/Q3BspStatsUI.hpp	/^    ~Q3StatsUI()$/;"	f	class:Q3StatsUI	access:public	signature:()
Quaternion	src/Math.hpp	/^        Quaternion() {}$/;"	f	class:Math::Quaternion	access:public	signature:()
Quaternion	src/Math.hpp	/^        Quaternion(const Quaternion &q2) : m_x(q2.m_x), m_y(q2.m_y), m_z(q2.m_z), m_w(q2.m_w) {}$/;"	f	class:Math::Quaternion	access:public	signature:(const Quaternion &q2)
Quaternion	src/Math.hpp	/^        Quaternion(const Vector3f &axis, float angle) : m_x( axis.m_x * sinf(angle\/2) ),$/;"	f	class:Math::Quaternion	access:public	signature:(const Vector3f &axis, float angle)
Quaternion	src/Math.hpp	/^        Quaternion(float x, float y, float z, float w) : m_x(x), m_y(y), m_z(z), m_w(w) {}$/;"	f	class:Math::Quaternion	access:public	signature:(float x, float y, float z, float w)
Quaternion	src/Math.hpp	/^    class Quaternion$/;"	c	namespace:Math
QuickInverseSqrt	src/Math.cpp	/^    float QuickInverseSqrt( float number )$/;"	f	namespace:Math	signature:( float number )
QuickNormalize	src/Math.cpp	/^    void Quaternion::QuickNormalize()$/;"	f	class:Math::Quaternion	signature:()
QuickNormalize	src/Math.cpp	/^    void Vector3f::QuickNormalize()$/;"	f	class:Math::Vector3f	signature:()
RENDERCONTEXT_INCLUDED	src/renderer/RenderContext.hpp	2;"	d
RESTART	src/renderer/stb_image.c	1072;"	d	file:
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
ReadShaderFromFile	src/renderer/vulkan/Pipeline.cpp	/^    static uint32_t *ReadShaderFromFile(const char *filename, size_t *buffSize)$/;"	f	namespace:vk	signature:(const char *filename, size_t *buffSize)
RebuildPipeline	src/renderer/Font.cpp	/^void Font::RebuildPipeline()$/;"	f	class:Font	signature:()
RebuildPipelines	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::RebuildPipelines()$/;"	f	class:Q3BspMap	signature:()
RecordCommandBuffers	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::RecordCommandBuffers()$/;"	f	class:Q3BspMap	signature:()
RecordCommandBuffers	src/renderer/Font.cpp	/^void Font::RecordCommandBuffers()$/;"	f	class:Font	signature:()
RecreateSwapChain	src/renderer/RenderContext.cpp	/^bool RenderContext::RecreateSwapChain(const VkCommandPool &commandPool, const vk::RenderPass &renderPass)$/;"	f	class:RenderContext	signature:(const VkCommandPool &commandPool, const vk::RenderPass &renderPass)
RegisterFreeSuballocation	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::RegisterFreeSuballocation(VmaSuballocationList::iterator item)$/;"	f	class:VmaBlockMetadata	signature:(VmaSuballocationList::iterator item)
ReleaseTextures	src/renderer/TextureManager.cpp	/^void TextureManager::ReleaseTextures()$/;"	f	class:TextureManager	signature:()
Remove	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::Remove(VmaDeviceMemoryBlock* pBlock)$/;"	f	class:VmaBlockVector	signature:(VmaDeviceMemoryBlock* pBlock)
Remove	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaRawList<T>::Remove(ItemType* pItem)$/;"	f	class:VmaRawList	signature:(ItemType* pItem)
RenderBuffers	src/q3bsp/Q3BspRenderHelpers.hpp	/^struct RenderBuffers$/;"	s
RenderBuffers::m_faceBuffers	src/q3bsp/Q3BspRenderHelpers.hpp	/^    std::map<int, FaceBuffers> m_faceBuffers;$/;"	m	struct:RenderBuffers	access:public
RenderBuffers::m_patchBuffers	src/q3bsp/Q3BspRenderHelpers.hpp	/^    std::map<int, std::vector<FaceBuffers> > m_patchBuffers;$/;"	m	struct:RenderBuffers	access:public
RenderBuffers::uniformBuffer	src/q3bsp/Q3BspRenderHelpers.hpp	/^    vk::Buffer uniformBuffer;$/;"	m	struct:RenderBuffers	access:public
RenderContext	src/renderer/RenderContext.hpp	/^class RenderContext$/;"	c
RenderContext::CreateDepthBuffer	src/renderer/RenderContext.cpp	/^void RenderContext::CreateDepthBuffer(const VkCommandPool &commandPool)$/;"	f	class:RenderContext	signature:(const VkCommandPool &commandPool)
RenderContext::CreateFramebuffers	src/renderer/RenderContext.cpp	/^bool RenderContext::CreateFramebuffers(const vk::RenderPass &renderPass)$/;"	f	class:RenderContext	signature:(const vk::RenderPass &renderPass)
RenderContext::CreateImageViews	src/renderer/RenderContext.cpp	/^bool RenderContext::CreateImageViews()$/;"	f	class:RenderContext	signature:()
RenderContext::CreateSemaphores	src/renderer/RenderContext.cpp	/^void RenderContext::CreateSemaphores()$/;"	f	class:RenderContext	signature:()
RenderContext::Destroy	src/renderer/RenderContext.cpp	/^void RenderContext::Destroy()$/;"	f	class:RenderContext	signature:()
RenderContext::DestroyDepthBuffer	src/renderer/RenderContext.cpp	/^void RenderContext::DestroyDepthBuffer()$/;"	f	class:RenderContext	signature:()
RenderContext::DestroyFramebuffers	src/renderer/RenderContext.cpp	/^void RenderContext::DestroyFramebuffers()$/;"	f	class:RenderContext	signature:()
RenderContext::DestroyImageViews	src/renderer/RenderContext.cpp	/^void RenderContext::DestroyImageViews()$/;"	f	class:RenderContext	signature:()
RenderContext::Init	src/renderer/RenderContext.cpp	/^bool RenderContext::Init(const char *title, int x, int y, int w, int h)$/;"	f	class:RenderContext	signature:(const char *title, int x, int y, int w, int h)
RenderContext::InitVulkan	src/renderer/RenderContext.cpp	/^bool RenderContext::InitVulkan()$/;"	f	class:RenderContext	signature:()
RenderContext::ModelViewProjectionMatrix	src/renderer/RenderContext.hpp	/^    Math::Matrix4f ModelViewProjectionMatrix; \/\/ global MVP used to orient the entire world$/;"	m	class:RenderContext	access:public
RenderContext::Present	src/renderer/RenderContext.cpp	/^VkResult RenderContext::Present(bool uiVisible)$/;"	f	class:RenderContext	signature:(bool uiVisible)
RenderContext::RecreateSwapChain	src/renderer/RenderContext.cpp	/^bool RenderContext::RecreateSwapChain(const VkCommandPool &commandPool, const vk::RenderPass &renderPass)$/;"	f	class:RenderContext	signature:(const VkCommandPool &commandPool, const vk::RenderPass &renderPass)
RenderContext::RenderStart	src/renderer/RenderContext.cpp	/^VkResult RenderContext::RenderStart()$/;"	f	class:RenderContext	signature:()
RenderContext::Submit	src/renderer/RenderContext.cpp	/^VkResult RenderContext::Submit(const vk::CmdBufferList &commandBuffers)$/;"	f	class:RenderContext	signature:(const vk::CmdBufferList &commandBuffers)
RenderContext::WindowSize	src/renderer/RenderContext.cpp	/^Math::Vector2f RenderContext::WindowSize()$/;"	f	class:RenderContext	signature:()
RenderContext::bottom	src/renderer/RenderContext.hpp	/^    float bottom = 0.f;$/;"	m	class:RenderContext	access:public
RenderContext::device	src/renderer/RenderContext.hpp	/^    vk::Device device;$/;"	m	class:RenderContext	access:public
RenderContext::farPlane	src/renderer/RenderContext.hpp	/^    float farPlane  = 1000.f;$/;"	m	class:RenderContext	access:public
RenderContext::fov	src/renderer/RenderContext.hpp	/^    float fov = 75.f * PIdiv180;$/;"	m	class:RenderContext	access:public
RenderContext::frameBuffers	src/renderer/RenderContext.hpp	/^    std::vector<VkFramebuffer> frameBuffers;$/;"	m	class:RenderContext	access:public
RenderContext::halfHeight	src/renderer/RenderContext.hpp	/^    int   halfHeight = 0;$/;"	m	class:RenderContext	access:public
RenderContext::halfWidth	src/renderer/RenderContext.hpp	/^    int   halfWidth = 0;$/;"	m	class:RenderContext	access:public
RenderContext::height	src/renderer/RenderContext.hpp	/^    int   height    = 0;$/;"	m	class:RenderContext	access:public
RenderContext::left	src/renderer/RenderContext.hpp	/^    float left   = 0.f;$/;"	m	class:RenderContext	access:public
RenderContext::m_depthBuffer	src/renderer/RenderContext.hpp	/^    vk::Texture m_depthBuffer;$/;"	m	class:RenderContext	access:private
RenderContext::m_imageAvailableSemaphore	src/renderer/RenderContext.hpp	/^    VkSemaphore m_imageAvailableSemaphore;$/;"	m	class:RenderContext	access:private
RenderContext::m_imageIndex	src/renderer/RenderContext.hpp	/^    uint32_t m_imageIndex;$/;"	m	class:RenderContext	access:private
RenderContext::m_imageViews	src/renderer/RenderContext.hpp	/^    std::vector<VkImageView> m_imageViews;$/;"	m	class:RenderContext	access:private
RenderContext::m_instance	src/renderer/RenderContext.hpp	/^    VkInstance   m_instance = VK_NULL_HANDLE;$/;"	m	class:RenderContext	access:private
RenderContext::m_surface	src/renderer/RenderContext.hpp	/^    VkSurfaceKHR m_surface  = VK_NULL_HANDLE;$/;"	m	class:RenderContext	access:private
RenderContext::nearPlane	src/renderer/RenderContext.hpp	/^    float nearPlane = 0.1f;$/;"	m	class:RenderContext	access:public
RenderContext::renderFinishedSemaphore	src/renderer/RenderContext.hpp	/^    VkSemaphore renderFinishedSemaphore;$/;"	m	class:RenderContext	access:public
RenderContext::renderUIFinishedSemaphore	src/renderer/RenderContext.hpp	/^    VkSemaphore renderUIFinishedSemaphore;$/;"	m	class:RenderContext	access:public
RenderContext::right	src/renderer/RenderContext.hpp	/^    float right  = 0.f;$/;"	m	class:RenderContext	access:public
RenderContext::scrRatio	src/renderer/RenderContext.hpp	/^    float scrRatio  = 0.f;$/;"	m	class:RenderContext	access:public
RenderContext::submitInfo	src/renderer/RenderContext.hpp	/^    VkSubmitInfo submitInfo = {};$/;"	m	class:RenderContext	access:public
RenderContext::swapChain	src/renderer/RenderContext.hpp	/^    vk::SwapChain swapChain;$/;"	m	class:RenderContext	access:public
RenderContext::top	src/renderer/RenderContext.hpp	/^    float top = 0.f;$/;"	m	class:RenderContext	access:public
RenderContext::width	src/renderer/RenderContext.hpp	/^    int   width     = 0;$/;"	m	class:RenderContext	access:public
RenderContext::window	src/renderer/RenderContext.hpp	/^    SDL_Window *window = nullptr;$/;"	m	class:RenderContext	access:public
RenderFinish	src/renderer/Font.cpp	/^void Font::RenderFinish()$/;"	f	class:Font	signature:()
RenderPass	src/renderer/vulkan/Pipeline.hpp	/^    struct RenderPass$/;"	s	namespace:vk
RenderStart	src/renderer/Font.cpp	/^void Font::RenderStart()$/;"	f	class:Font	signature:()
RenderStart	src/renderer/RenderContext.cpp	/^VkResult RenderContext::RenderStart()$/;"	f	class:RenderContext	signature:()
RenderText	src/renderer/Font.cpp	/^void Font::RenderText(const std::string &text)$/;"	f	class:Font	signature:(const std::string &text)
RenderText	src/renderer/Font.cpp	/^void Font::RenderText(const std::string &text, const Math::Vector3f &position, const Math::Vector3f &color)$/;"	f	class:Font	signature:(const std::string &text, const Math::Vector3f &position, const Math::Vector3f &color)
RenderText	src/renderer/Font.cpp	/^void Font::RenderText(const std::string &text, float x, float y, float z)$/;"	f	class:Font	signature:(const std::string &text, float x, float y, float z)
RenderText	src/renderer/Font.cpp	/^void Font::RenderText(const std::string &text, float x, float y, float z, float r, float g, float b)$/;"	f	class:Font	signature:(const std::string &text, float x, float y, float z, float r, float g, float b)
RotateCamera	src/renderer/Camera.cpp	/^void Camera::RotateCamera(const Math::Quaternion &q)$/;"	f	class:Camera	signature:(const Math::Quaternion &q)
RotateCamera	src/renderer/Camera.cpp	/^void Camera::RotateCamera(float angle, float x, float y, float z)$/;"	f	class:Camera	signature:(float angle, float x, float y, float z)
Running	src/Application.hpp	/^    inline bool Running() const { return m_running; }$/;"	f	class:Application	access:public	signature:() const
SCAN_header	src/renderer/stb_image.c	/^   SCAN_header$/;"	e	enum:__anon3	file:
SCAN_load	src/renderer/stb_image.c	/^   SCAN_load=0,$/;"	e	enum:__anon3	file:
SCAN_type	src/renderer/stb_image.c	/^   SCAN_type,$/;"	e	enum:__anon3	file:
SDLKeyToKeyCode	src/InputHandlers.cpp	/^KeyCode SDLKeyToKeyCode(SDL_Keycode key)$/;"	f	signature:(SDL_Keycode key)
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	162;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	163;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	33;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	165;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
SOF	src/renderer/stb_image.c	1330;"	d	file:
SOI	src/renderer/stb_image.c	1328;"	d	file:
SOS	src/renderer/stb_image.c	1331;"	d	file:
STATSUI_INCLUDED	src/StatsUI.hpp	2;"	d
STBI_HAS_LROTL	src/renderer/stb_image.c	111;"	d	file:
STBI_INCLUDE_STB_IMAGE_H	src/renderer/stb_image.h	2;"	d
STBI_NOTUSED	src/renderer/stb_image.c	108;"	d	file:
STBI_NO_WRITE	src/renderer/stb_image.c	105;"	d	file:
STBI_VERSION	src/renderer/stb_image.h	129;"	d
STBI_default	src/renderer/stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon14
STBI_grey	src/renderer/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon14
STBI_grey_alpha	src/renderer/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon14
STBI_rgb	src/renderer/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon14
STBI_rgb_alpha	src/renderer/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon14
STRINGHELPERS_HPP	src/StringHelpers.hpp	2;"	d
STRINGIFY	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	289;"	d	file:
STRINGIFY	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	284;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
Scale	src/Math.cpp	/^    void Scale(Matrix4f &matrix, float x, float y, float z)$/;"	f	namespace:Math	signature:(Matrix4f &matrix, float x, float y, float z)
SetActiveCamera	src/renderer/CameraDirector.hpp	/^    void SetActiveCamera(int camIdx) { m_activeCamera = m_cameras[camIdx]; }$/;"	f	class:CameraDirector	access:public	signature:(int camIdx)
SetColor	src/renderer/Font.hpp	/^    void SetColor(const Math::Vector3f &color) { m_color = color; }$/;"	f	class:Font	access:public	signature:(const Math::Vector3f &color)
SetCurrentFrameIndex	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::SetCurrentFrameIndex(uint32_t frameIndex)$/;"	f	class:VmaAllocator_T	signature:(uint32_t frameIndex)
SetKeyPressed	src/Application.hpp	/^    inline void SetKeyPressed(KeyCode key, bool pressed) { m_keyStates[key] = pressed; }$/;"	f	class:Application	access:private	signature:(KeyCode key, bool pressed)
SetLightmapGamma	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::SetLightmapGamma(float gamma)$/;"	f	class:Q3BspMap	signature:(float gamma)
SetMode	src/renderer/Camera.cpp	/^void Camera::SetMode(CameraMode cm)$/;"	f	class:Camera	signature:(CameraMode cm)
SetPosition	src/renderer/Font.hpp	/^    void SetPosition(const Math::Vector3f &position) { m_position = position; }$/;"	f	class:Font	access:public	signature:(const Math::Vector3f &position)
SetRightVector	src/renderer/Camera.hpp	/^    void SetRightVector(float x, float y, float z)$/;"	f	class:Camera	access:public	signature:(float x, float y, float z)
SetScale	src/renderer/Font.hpp	/^    void SetScale(const Math::Vector2f &scale) { m_scale = scale; }$/;"	f	class:Font	access:public	signature:(const Math::Vector2f &scale)
SetUpVector	src/renderer/Camera.hpp	/^    void SetUpVector(float x, float y, float z)$/;"	f	class:Camera	access:public	signature:(float x, float y, float z)
SetUserData	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocation_T::SetUserData(VmaAllocator hAllocator, void* pUserData)$/;"	f	class:VmaAllocation_T	signature:(VmaAllocator hAllocator, void* pUserData)
SetViewVector	src/renderer/Camera.hpp	/^    void SetViewVector(float x, float y, float z)$/;"	f	class:Camera	access:public	signature:(float x, float y, float z)
ShaderProgram	src/renderer/vulkan/Pipeline.cpp	/^    struct ShaderProgram$/;"	s	namespace:vk	file:
SortAllocationsBySizeDescecnding	src/renderer/vulkan/vk_mem_alloc.h	/^        void SortAllocationsBySizeDescecnding()$/;"	f	struct:VmaDefragmentator::BlockInfo	access:public	signature:()
StackItem	src/renderer/vulkan/vk_mem_alloc.h	/^    struct StackItem$/;"	s	class:VmaJsonWriter	access:private
StatsUI	src/StatsUI.hpp	/^    StatsUI(BspMap *map) : m_map(map) {}$/;"	f	class:StatsUI	access:public	signature:(BspMap *map)
StatsUI	src/StatsUI.hpp	/^class StatsUI$/;"	c
StatsUI::StatsUI	src/StatsUI.hpp	/^    StatsUI(BspMap *map) : m_map(map) {}$/;"	f	class:StatsUI	access:public	signature:(BspMap *map)
StatsUI::m_map	src/StatsUI.hpp	/^    BspMap *m_map;$/;"	m	class:StatsUI	access:protected
StatsUI::~StatsUI	src/StatsUI.hpp	/^    virtual ~StatsUI() {}$/;"	f	class:StatsUI	access:public	signature:()
Strafe	src/renderer/Camera.cpp	/^void Camera::Strafe(float Distance)$/;"	f	class:Camera	signature:(float Distance)
StringHelpers	src/StringHelpers.cpp	/^namespace StringHelpers$/;"	n	file:
StringHelpers	src/StringHelpers.hpp	/^namespace StringHelpers$/;"	n
StringHelpers::tokenizeString	src/StringHelpers.cpp	/^    std::vector<std::string> tokenizeString(const char *str, char c, int tokenLimit)$/;"	f	namespace:StringHelpers	signature:(const char *str, char c, int tokenLimit)
StringHelpers::trim	src/StringHelpers.cpp	/^    std::string trim(const std::string &str, char c)$/;"	f	namespace:StringHelpers	signature:(const std::string &str, char c)
Submit	src/renderer/RenderContext.cpp	/^VkResult RenderContext::Submit(const vk::CmdBufferList &commandBuffers)$/;"	f	class:RenderContext	signature:(const vk::CmdBufferList &commandBuffers)
SwapChain	src/renderer/vulkan/Device.hpp	/^    struct SwapChain$/;"	s	namespace:vk
SwapChainInfo	src/renderer/vulkan/Device.cpp	/^    struct SwapChainInfo$/;"	s	namespace:vk	file:
TEXTUREMANAGER_HPP	src/renderer/TextureManager.hpp	2;"	d
Terminate	src/Application.hpp	/^    inline void Terminate() { m_running = false; }$/;"	f	class:Application	access:public	signature:()
Tesselate	src/q3bsp/Q3BspPatch.cpp	/^void Q3BspBiquadPatch::Tesselate(int tessLevel)$/;"	f	class:Q3BspBiquadPatch	signature:(int tessLevel)
Texture	src/renderer/vulkan/Image.hpp	/^    struct Texture$/;"	s	namespace:vk
TextureManager	src/renderer/TextureManager.hpp	/^    TextureManager() {}$/;"	f	class:TextureManager	access:private	signature:()
TextureManager	src/renderer/TextureManager.hpp	/^class TextureManager$/;"	c
TextureManager::GetInstance	src/renderer/TextureManager.cpp	/^TextureManager* TextureManager::GetInstance()$/;"	f	class:TextureManager	signature:()
TextureManager::LoadTexture	src/renderer/TextureManager.cpp	/^GameTexture *TextureManager::LoadTexture(const char *textureName, const VkCommandPool &commandPool, bool filtering)$/;"	f	class:TextureManager	signature:(const char *textureName, const VkCommandPool &commandPool, bool filtering)
TextureManager::ReleaseTextures	src/renderer/TextureManager.cpp	/^void TextureManager::ReleaseTextures()$/;"	f	class:TextureManager	signature:()
TextureManager::TextureManager	src/renderer/TextureManager.hpp	/^    TextureManager() {}$/;"	f	class:TextureManager	access:private	signature:()
TextureManager::m_textures	src/renderer/TextureManager.hpp	/^    std::map<std::string, GameTexture *> m_textures;$/;"	m	class:TextureManager	access:private
TextureManager::~TextureManager	src/renderer/TextureManager.cpp	/^TextureManager::~TextureManager()$/;"	f	class:TextureManager	signature:()
Textures	src/q3bsp/Q3Bsp.hpp	/^    Textures,$/;"	e	enum:LumpTypes
ToggleRenderFlag	src/q3bsp/Q3BspMap.cpp	/^void Q3BspMap::ToggleRenderFlag(int flag)$/;"	f	class:Q3BspMap	signature:(int flag)
Translate	src/Math.cpp	/^    void Translate(Matrix4f &matrix, float x, float y, float z)$/;"	f	namespace:Math	signature:(Matrix4f &matrix, float x, float y, float z)
Transpose	src/Math.cpp	/^    void Matrix4f::Transpose()$/;"	f	class:Math::Matrix4f	signature:()
UTILS_HPP	src/Utils.hpp	2;"	d
UniformBufferObject	src/renderer/RenderContext.hpp	/^struct UniformBufferObject$/;"	s
UniformBufferObject::ModelViewProjectionMatrix	src/renderer/RenderContext.hpp	/^    Math::Matrix4f ModelViewProjectionMatrix;$/;"	m	struct:UniformBufferObject	access:public
UniformBufferObject::renderLightmaps	src/renderer/RenderContext.hpp	/^    int renderLightmaps = 0;$/;"	m	struct:UniformBufferObject	access:public
UniformBufferObject::useAlphaTest	src/renderer/RenderContext.hpp	/^    int useAlphaTest = 0;$/;"	m	struct:UniformBufferObject	access:public
UniformBufferObject::useLightmaps	src/renderer/RenderContext.hpp	/^    int useLightmaps = 1;$/;"	m	struct:UniformBufferObject	access:public
UniformBufferObject::worldScaleFactor	src/renderer/RenderContext.hpp	/^    float worldScaleFactor;$/;"	m	struct:UniformBufferObject	access:public
Unlock	src/renderer/vulkan/vk_mem_alloc.h	/^       void Unlock() { m_Mutex.unlock(); }$/;"	f	class:VmaMutex	access:public	signature:()
Unmap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::Unmap(VmaAllocation hAllocation)$/;"	f	class:VmaAllocator_T	signature:(VmaAllocation hAllocation)
Unmap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaDefragmentator::BlockInfo::Unmap(VmaAllocator hAllocator)$/;"	f	class:VmaDefragmentator::BlockInfo	signature:(VmaAllocator hAllocator)
Unmap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaDeviceMemoryBlock::Unmap(VmaAllocator hAllocator)$/;"	f	class:VmaDeviceMemoryBlock	signature:(VmaAllocator hAllocator)
Unmap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaDeviceMemoryMapping::Unmap(VmaAllocator hAllocator, VkDeviceMemory hMemory)$/;"	f	class:VmaDeviceMemoryMapping	signature:(VmaAllocator hAllocator, VkDeviceMemory hMemory)
UnregisterFreeSuballocation	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::UnregisterFreeSuballocation(VmaSuballocationList::iterator item)$/;"	f	class:VmaBlockMetadata	signature:(VmaSuballocationList::iterator item)
UpdateCamera	src/Application.cpp	/^void Application::UpdateCamera(float dt)$/;"	f	class:Application	signature:(float dt)
UpdatePlanes	src/Frustum.cpp	/^void Frustum::UpdatePlanes()$/;"	f	class:Frustum	signature:()
UpdateProjection	src/renderer/Camera.cpp	/^void Camera::UpdateProjection()$/;"	f	class:Camera	signature:()
UpdateView	src/renderer/Camera.cpp	/^void Camera::UpdateView()$/;"	f	class:Camera	signature:()
VALIDATION_LAYERS_ON	src/renderer/vulkan/Base.hpp	10;"	d
VK_USE_PLATFORM_WIN32_KHR	src/renderer/vulkan/Base.hpp	5;"	d
VK_VERIFY	src/renderer/vulkan/Base.hpp	25;"	d
VMA_ALIGN_OF	src/renderer/vulkan/vk_mem_alloc.h	1716;"	d
VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT = 0x00000008,$/;"	e	enum:VmaAllocationCreateFlagBits
VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT = 0x00000010,$/;"	e	enum:VmaAllocationCreateFlagBits
VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT = 0x00000001,$/;"	e	enum:VmaAllocationCreateFlagBits
VMA_ALLOCATION_CREATE_FLAG_BITS_MAX_ENUM	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_ALLOCATION_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VmaAllocationCreateFlagBits
VMA_ALLOCATION_CREATE_MAPPED_BIT	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_ALLOCATION_CREATE_MAPPED_BIT = 0x00000004,$/;"	e	enum:VmaAllocationCreateFlagBits
VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT = 0x00000002,$/;"	e	enum:VmaAllocationCreateFlagBits
VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT = 0x00000020,$/;"	e	enum:VmaAllocationCreateFlagBits
VMA_ALLOCATION_TRY_COUNT	src/renderer/vulkan/vk_mem_alloc.h	/^static const uint32_t VMA_ALLOCATION_TRY_COUNT = 32;$/;"	v
VMA_ALLOCATOR_CREATE_EXTERNALLY_SYNCHRONIZED_BIT	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_ALLOCATOR_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 0x00000001,$/;"	e	enum:VmaAllocatorCreateFlagBits
VMA_ALLOCATOR_CREATE_FLAG_BITS_MAX_ENUM	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_ALLOCATOR_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VmaAllocatorCreateFlagBits
VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT = 0x00000002,$/;"	e	enum:VmaAllocatorCreateFlagBits
VMA_ASSERT	src/renderer/vulkan/vk_mem_alloc.h	1694;"	d
VMA_ASSERT	src/renderer/vulkan/vk_mem_alloc.h	1696;"	d
VMA_ATOMIC_UINT32	src/renderer/vulkan/vk_mem_alloc.h	1800;"	d
VMA_BEST_FIT	src/renderer/vulkan/vk_mem_alloc.h	1816;"	d
VMA_COPY_IF_NOT_NULL	src/renderer/vulkan/vk_mem_alloc.h	6813;"	d
VMA_COPY_IF_NOT_NULL	src/renderer/vulkan/vk_mem_alloc.h	6836;"	d
VMA_DEBUG_ALIGNMENT	src/renderer/vulkan/vk_mem_alloc.h	1832;"	d
VMA_DEBUG_ALWAYS_DEDICATED_MEMORY	src/renderer/vulkan/vk_mem_alloc.h	1824;"	d
VMA_DEBUG_GLOBAL_MUTEX	src/renderer/vulkan/vk_mem_alloc.h	1848;"	d
VMA_DEBUG_GLOBAL_MUTEX_LOCK	src/renderer/vulkan/vk_mem_alloc.h	2049;"	d
VMA_DEBUG_GLOBAL_MUTEX_LOCK	src/renderer/vulkan/vk_mem_alloc.h	2051;"	d
VMA_DEBUG_LOG	src/renderer/vulkan/vk_mem_alloc.h	1752;"	d
VMA_DEBUG_MARGIN	src/renderer/vulkan/vk_mem_alloc.h	1840;"	d
VMA_DEBUG_MIN_BUFFER_IMAGE_GRANULARITY	src/renderer/vulkan/vk_mem_alloc.h	1856;"	d
VMA_DEFAULT_LARGE_HEAP_BLOCK_SIZE	src/renderer/vulkan/vk_mem_alloc.h	1866;"	d
VMA_DEFAULT_SMALL_HEAP_BLOCK_SIZE	src/renderer/vulkan/vk_mem_alloc.h	1871;"	d
VMA_FRAME_INDEX_LOST	src/renderer/vulkan/vk_mem_alloc.h	/^static const uint32_t VMA_FRAME_INDEX_LOST = UINT32_MAX;$/;"	v
VMA_HEAVY_ASSERT	src/renderer/vulkan/vk_mem_alloc.h	1704;"	d
VMA_HEAVY_ASSERT	src/renderer/vulkan/vk_mem_alloc.h	1706;"	d
VMA_IMPLEMENTATION	src/renderer/vulkan/Buffers.cpp	6;"	d	file:
VMA_IMPLEMENTATION	src/renderer/vulkan/vk_mem_alloc.h	1621;"	d
VMA_IMPLEMENTATION	src/renderer/vulkan/vk_mem_alloc.h	1625;"	d
VMA_LOST_ALLOCATION_COST	src/renderer/vulkan/vk_mem_alloc.h	/^static const VkDeviceSize VMA_LOST_ALLOCATION_COST = 1048576;$/;"	v
VMA_MAX	src/renderer/vulkan/vk_mem_alloc.h	1740;"	d
VMA_MEMORY_USAGE_CPU_ONLY	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MEMORY_USAGE_CPU_ONLY = 2,$/;"	e	enum:VmaMemoryUsage
VMA_MEMORY_USAGE_CPU_TO_GPU	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MEMORY_USAGE_CPU_TO_GPU = 3,$/;"	e	enum:VmaMemoryUsage
VMA_MEMORY_USAGE_GPU_ONLY	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MEMORY_USAGE_GPU_ONLY = 1,$/;"	e	enum:VmaMemoryUsage
VMA_MEMORY_USAGE_GPU_TO_CPU	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MEMORY_USAGE_GPU_TO_CPU = 4,$/;"	e	enum:VmaMemoryUsage
VMA_MEMORY_USAGE_MAX_ENUM	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MEMORY_USAGE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VmaMemoryUsage
VMA_MEMORY_USAGE_UNKNOWN	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MEMORY_USAGE_UNKNOWN = 0,$/;"	e	enum:VmaMemoryUsage
VMA_MIN	src/renderer/vulkan/vk_mem_alloc.h	1736;"	d
VMA_MIN_FREE_SUBALLOCATION_SIZE_TO_REGISTER	src/renderer/vulkan/vk_mem_alloc.h	/^static const VkDeviceSize VMA_MIN_FREE_SUBALLOCATION_SIZE_TO_REGISTER = 16;$/;"	v
VMA_MUTEX	src/renderer/vulkan/vk_mem_alloc.h	1788;"	d
VMA_NULL	src/renderer/vulkan/vk_mem_alloc.h	1712;"	d
VMA_POOL_CREATE_FLAG_BITS_MAX_ENUM	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VmaPoolCreateFlagBits
VMA_POOL_CREATE_IGNORE_BUFFER_IMAGE_GRANULARITY_BIT	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_POOL_CREATE_IGNORE_BUFFER_IMAGE_GRANULARITY_BIT = 0x00000002,$/;"	e	enum:VmaPoolCreateFlagBits
VMA_SMALL_HEAP_MAX_SIZE	src/renderer/vulkan/vk_mem_alloc.h	1861;"	d
VMA_SORT	src/renderer/vulkan/vk_mem_alloc.h	1748;"	d
VMA_SORT	src/renderer/vulkan/vk_mem_alloc.h	1945;"	d
VMA_STATIC_VULKAN_FUNCTIONS	src/renderer/vulkan/vk_mem_alloc.h	1648;"	d
VMA_STATS_STRING_ENABLED	src/renderer/vulkan/vk_mem_alloc.h	930;"	d
VMA_SUBALLOCATION_TYPE_BUFFER	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_SUBALLOCATION_TYPE_BUFFER = 2,$/;"	e	enum:VmaSuballocationType
VMA_SUBALLOCATION_TYPE_FREE	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_SUBALLOCATION_TYPE_FREE = 0,$/;"	e	enum:VmaSuballocationType
VMA_SUBALLOCATION_TYPE_IMAGE_LINEAR	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_SUBALLOCATION_TYPE_IMAGE_LINEAR = 4,$/;"	e	enum:VmaSuballocationType
VMA_SUBALLOCATION_TYPE_IMAGE_OPTIMAL	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_SUBALLOCATION_TYPE_IMAGE_OPTIMAL = 5,$/;"	e	enum:VmaSuballocationType
VMA_SUBALLOCATION_TYPE_IMAGE_UNKNOWN	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_SUBALLOCATION_TYPE_IMAGE_UNKNOWN = 3,$/;"	e	enum:VmaSuballocationType
VMA_SUBALLOCATION_TYPE_MAX_ENUM	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_SUBALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VmaSuballocationType
VMA_SUBALLOCATION_TYPE_NAMES	src/renderer/vulkan/vk_mem_alloc.h	/^static const char* VMA_SUBALLOCATION_TYPE_NAMES[] = {$/;"	v
VMA_SUBALLOCATION_TYPE_UNKNOWN	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_SUBALLOCATION_TYPE_UNKNOWN = 1,$/;"	e	enum:VmaSuballocationType
VMA_SWAP	src/renderer/vulkan/vk_mem_alloc.h	1744;"	d
VMA_SYSTEM_ALIGNED_MALLOC	src/renderer/vulkan/vk_mem_alloc.h	1721;"	d
VMA_SYSTEM_ALIGNED_MALLOC	src/renderer/vulkan/vk_mem_alloc.h	1723;"	d
VMA_SYSTEM_FREE	src/renderer/vulkan/vk_mem_alloc.h	1729;"	d
VMA_SYSTEM_FREE	src/renderer/vulkan/vk_mem_alloc.h	1731;"	d
VMA_USE_STL_LIST	src/renderer/vulkan/vk_mem_alloc.h	1663;"	d
VMA_USE_STL_UNORDERED_MAP	src/renderer/vulkan/vk_mem_alloc.h	1662;"	d
VMA_USE_STL_VECTOR	src/renderer/vulkan/vk_mem_alloc.h	1661;"	d
VMA_VENDOR_ID_AMD	src/renderer/vulkan/vk_mem_alloc.h	/^static const uint32_t VMA_VENDOR_ID_AMD = 4098;$/;"	v
Valid	src/BspMap.hpp	/^    inline bool  Valid() const { return m_bspValid; }$/;"	f	class:BspMap	access:public	signature:() const
Validate	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaBlockMetadata::Validate() const$/;"	f	class:VmaBlockMetadata	signature:() const
Validate	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaDeviceMemoryBlock::Validate() const$/;"	f	class:VmaDeviceMemoryBlock	signature:() const
ValidateFreeSuballocationList	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaBlockMetadata::ValidateFreeSuballocationList() const$/;"	f	class:VmaBlockMetadata	signature:() const
Value	src/renderer/vulkan/vk_mem_alloc.h	/^        T Value;$/;"	m	union:VmaPoolAllocator::Item	access:public
Value	src/renderer/vulkan/vk_mem_alloc.h	/^    T Value;$/;"	m	struct:VmaListItem	access:public
Vector2f	src/Math.hpp	/^        Vector2f() {}$/;"	f	struct:Math::Vector2f	access:public	signature:()
Vector2f	src/Math.hpp	/^        Vector2f(float x, float y) : m_x(x), m_y(y) {}$/;"	f	struct:Math::Vector2f	access:public	signature:(float x, float y)
Vector2f	src/Math.hpp	/^    struct Vector2f$/;"	s	namespace:Math
Vector3f	src/Math.hpp	/^        Vector3f() {}$/;"	f	class:Math::Vector3f	access:public	signature:()
Vector3f	src/Math.hpp	/^        Vector3f(const Vector3f &v2) : m_x(v2.m_x), m_y(v2.m_y), m_z(v2.m_z) {}$/;"	f	class:Math::Vector3f	access:public	signature:(const Vector3f &v2)
Vector3f	src/Math.hpp	/^        Vector3f(float x, float y, float z) : m_x(x), m_y(y), m_z(z) {}$/;"	f	class:Math::Vector3f	access:public	signature:(float x, float y, float z)
Vector3f	src/Math.hpp	/^    class Vector3f$/;"	c	namespace:Math
Vector4f	src/Math.hpp	/^        Vector4f() {}$/;"	f	struct:Math::Vector4f	access:public	signature:()
Vector4f	src/Math.hpp	/^        Vector4f(float x, float y, float z, float w) : m_x(x), m_y(y), m_z(z), m_w(w) {}$/;"	f	struct:Math::Vector4f	access:public	signature:(float x, float y, float z, float w)
Vector4f	src/Math.hpp	/^    struct Vector4f$/;"	s	namespace:Math
VertexBufferInfo	src/renderer/vulkan/Buffers.hpp	/^    struct VertexBufferInfo$/;"	s	namespace:vk
Vertices	src/q3bsp/Q3Bsp.hpp	/^    Vertices,$/;"	e	enum:LumpTypes
ViewMatrix	src/renderer/Camera.hpp	/^    const Math::Matrix4f &ViewMatrix() const { return m_viewMatrix; }$/;"	f	class:Camera	access:public	signature:() const
VisData	src/q3bsp/Q3Bsp.hpp	/^    VisData$/;"	e	enum:LumpTypes
VmaAddStatInfo	src/renderer/vulkan/vk_mem_alloc.h	/^static void VmaAddStatInfo(VmaStatInfo& inoutInfo, const VmaStatInfo& srcInfo)$/;"	f	signature:(VmaStatInfo& inoutInfo, const VmaStatInfo& srcInfo)
VmaAlignUp	src/renderer/vulkan/vk_mem_alloc.h	/^static inline T VmaAlignUp(T val, T align)$/;"	f	signature:(T val, T align)
VmaAllocate	src/renderer/vulkan/vk_mem_alloc.h	/^static T* VmaAllocate(VmaAllocator hAllocator)$/;"	f	signature:(VmaAllocator hAllocator)
VmaAllocate	src/renderer/vulkan/vk_mem_alloc.h	/^static T* VmaAllocate(const VkAllocationCallbacks* pAllocationCallbacks)$/;"	f	signature:(const VkAllocationCallbacks* pAllocationCallbacks)
VmaAllocateArray	src/renderer/vulkan/vk_mem_alloc.h	/^static T* VmaAllocateArray(VmaAllocator hAllocator, size_t count)$/;"	f	signature:(VmaAllocator hAllocator, size_t count)
VmaAllocateArray	src/renderer/vulkan/vk_mem_alloc.h	/^static T* VmaAllocateArray(const VkAllocationCallbacks* pAllocationCallbacks, size_t count)$/;"	f	signature:(const VkAllocationCallbacks* pAllocationCallbacks, size_t count)
VmaAllocationCreateFlagBits	src/renderer/vulkan/vk_mem_alloc.h	/^typedef enum VmaAllocationCreateFlagBits {$/;"	g
VmaAllocationCreateFlagBits	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaAllocationCreateFlagBits;$/;"	t	typeref:enum:VmaAllocationCreateFlagBits
VmaAllocationCreateFlags	src/renderer/vulkan/vk_mem_alloc.h	/^typedef VkFlags VmaAllocationCreateFlags;$/;"	t
VmaAllocationCreateInfo	src/renderer/vulkan/vk_mem_alloc.h	/^typedef struct VmaAllocationCreateInfo$/;"	s
VmaAllocationCreateInfo	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaAllocationCreateInfo;$/;"	t	typeref:struct:VmaAllocationCreateInfo
VmaAllocationCreateInfo::flags	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaAllocationCreateFlags flags;$/;"	m	struct:VmaAllocationCreateInfo	access:public
VmaAllocationCreateInfo::memoryTypeBits	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t memoryTypeBits;$/;"	m	struct:VmaAllocationCreateInfo	access:public
VmaAllocationCreateInfo::pUserData	src/renderer/vulkan/vk_mem_alloc.h	/^    void* pUserData;$/;"	m	struct:VmaAllocationCreateInfo	access:public
VmaAllocationCreateInfo::pool	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaPool pool;$/;"	m	struct:VmaAllocationCreateInfo	access:public
VmaAllocationCreateInfo::preferredFlags	src/renderer/vulkan/vk_mem_alloc.h	/^    VkMemoryPropertyFlags preferredFlags;$/;"	m	struct:VmaAllocationCreateInfo	access:public
VmaAllocationCreateInfo::requiredFlags	src/renderer/vulkan/vk_mem_alloc.h	/^    VkMemoryPropertyFlags requiredFlags;$/;"	m	struct:VmaAllocationCreateInfo	access:public
VmaAllocationCreateInfo::usage	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaMemoryUsage usage;$/;"	m	struct:VmaAllocationCreateInfo	access:public
VmaAllocationInfo	src/renderer/vulkan/vk_mem_alloc.h	/^typedef struct VmaAllocationInfo {$/;"	s
VmaAllocationInfo	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaAllocationInfo;$/;"	t	typeref:struct:VmaAllocationInfo
VmaAllocationInfo::deviceMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceMemory deviceMemory;$/;"	m	struct:VmaAllocationInfo	access:public
VmaAllocationInfo::memoryType	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t memoryType;$/;"	m	struct:VmaAllocationInfo	access:public
VmaAllocationInfo::offset	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize offset;$/;"	m	struct:VmaAllocationInfo	access:public
VmaAllocationInfo::pMappedData	src/renderer/vulkan/vk_mem_alloc.h	/^    void* pMappedData;$/;"	m	struct:VmaAllocationInfo	access:public
VmaAllocationInfo::pUserData	src/renderer/vulkan/vk_mem_alloc.h	/^    void* pUserData;$/;"	m	struct:VmaAllocationInfo	access:public
VmaAllocationInfo::size	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize size;$/;"	m	struct:VmaAllocationInfo	access:public
VmaAllocationRequest	src/renderer/vulkan/vk_mem_alloc.h	/^struct VmaAllocationRequest$/;"	s
VmaAllocationRequest::CalcCost	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize CalcCost() const$/;"	f	struct:VmaAllocationRequest	access:public	signature:() const
VmaAllocationRequest::item	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaSuballocationList::iterator item;$/;"	m	struct:VmaAllocationRequest	access:public
VmaAllocationRequest::itemsToMakeLostCount	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t itemsToMakeLostCount;$/;"	m	struct:VmaAllocationRequest	access:public
VmaAllocationRequest::offset	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize offset;$/;"	m	struct:VmaAllocationRequest	access:public
VmaAllocationRequest::sumFreeSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize sumFreeSize; \/\/ Sum size of free items that overlap with proposed allocation.$/;"	m	struct:VmaAllocationRequest	access:public
VmaAllocationRequest::sumItemSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize sumItemSize; \/\/ Sum size of items to make lost that overlap with proposed allocation.$/;"	m	struct:VmaAllocationRequest	access:public
VmaAllocation_T	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaAllocation_T(uint32_t currentFrameIndex, bool userDataString) :$/;"	f	struct:VmaAllocation_T	access:public	signature:(uint32_t currentFrameIndex, bool userDataString)
VmaAllocation_T	src/renderer/vulkan/vk_mem_alloc.h	/^struct VmaAllocation_T$/;"	s
VmaAllocation_T::ALLOCATION_TYPE	src/renderer/vulkan/vk_mem_alloc.h	/^    enum ALLOCATION_TYPE$/;"	g	struct:VmaAllocation_T	access:public
VmaAllocation_T::ALLOCATION_TYPE_BLOCK	src/renderer/vulkan/vk_mem_alloc.h	/^        ALLOCATION_TYPE_BLOCK,$/;"	e	enum:VmaAllocation_T::ALLOCATION_TYPE
VmaAllocation_T::ALLOCATION_TYPE_DEDICATED	src/renderer/vulkan/vk_mem_alloc.h	/^        ALLOCATION_TYPE_DEDICATED,$/;"	e	enum:VmaAllocation_T::ALLOCATION_TYPE
VmaAllocation_T::ALLOCATION_TYPE_NONE	src/renderer/vulkan/vk_mem_alloc.h	/^        ALLOCATION_TYPE_NONE,$/;"	e	enum:VmaAllocation_T::ALLOCATION_TYPE
VmaAllocation_T::BlockAllocMap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocation_T::BlockAllocMap()$/;"	f	class:VmaAllocation_T	signature:()
VmaAllocation_T::BlockAllocUnmap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocation_T::BlockAllocUnmap()$/;"	f	class:VmaAllocation_T	signature:()
VmaAllocation_T::BlockAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^    struct BlockAllocation$/;"	s	struct:VmaAllocation_T	access:private
VmaAllocation_T::BlockAllocation::m_Block	src/renderer/vulkan/vk_mem_alloc.h	/^        VmaDeviceMemoryBlock* m_Block;$/;"	m	struct:VmaAllocation_T::BlockAllocation	access:public
VmaAllocation_T::BlockAllocation::m_CanBecomeLost	src/renderer/vulkan/vk_mem_alloc.h	/^        bool m_CanBecomeLost;$/;"	m	struct:VmaAllocation_T::BlockAllocation	access:public
VmaAllocation_T::BlockAllocation::m_Offset	src/renderer/vulkan/vk_mem_alloc.h	/^        VkDeviceSize m_Offset;$/;"	m	struct:VmaAllocation_T::BlockAllocation	access:public
VmaAllocation_T::BlockAllocation::m_hPool	src/renderer/vulkan/vk_mem_alloc.h	/^        VmaPool m_hPool; \/\/ Null if belongs to general memory.$/;"	m	struct:VmaAllocation_T::BlockAllocation	access:public
VmaAllocation_T::CanBecomeLost	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaAllocation_T::CanBecomeLost() const$/;"	f	class:VmaAllocation_T	signature:() const
VmaAllocation_T::ChangeBlockAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^    void ChangeBlockAllocation($/;"	f	struct:VmaAllocation_T	access:public	signature:( VmaDeviceMemoryBlock* block, VkDeviceSize offset)
VmaAllocation_T::CompareExchangeLastUseFrameIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    bool CompareExchangeLastUseFrameIndex(uint32_t& expected, uint32_t desired)$/;"	f	struct:VmaAllocation_T	access:public	signature:(uint32_t& expected, uint32_t desired)
VmaAllocation_T::DedicatedAllocCalcStatsInfo	src/renderer/vulkan/vk_mem_alloc.h	/^    void DedicatedAllocCalcStatsInfo(VmaStatInfo& outInfo)$/;"	f	struct:VmaAllocation_T	access:public	signature:(VmaStatInfo& outInfo)
VmaAllocation_T::DedicatedAllocMap	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocation_T::DedicatedAllocMap(VmaAllocator hAllocator, void** ppData)$/;"	f	class:VmaAllocation_T	signature:(VmaAllocator hAllocator, void** ppData)
VmaAllocation_T::DedicatedAllocUnmap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocation_T::DedicatedAllocUnmap(VmaAllocator hAllocator)$/;"	f	class:VmaAllocation_T	signature:(VmaAllocator hAllocator)
VmaAllocation_T::DedicatedAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^    struct DedicatedAllocation$/;"	s	struct:VmaAllocation_T	access:private
VmaAllocation_T::DedicatedAllocation::m_MemoryTypeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^        uint32_t m_MemoryTypeIndex;$/;"	m	struct:VmaAllocation_T::DedicatedAllocation	access:public
VmaAllocation_T::DedicatedAllocation::m_hMemory	src/renderer/vulkan/vk_mem_alloc.h	/^        VkDeviceMemory m_hMemory;$/;"	m	struct:VmaAllocation_T::DedicatedAllocation	access:public
VmaAllocation_T::DedicatedAllocation::m_pMappedData	src/renderer/vulkan/vk_mem_alloc.h	/^        void* m_pMappedData; \/\/ Not null means memory is mapped.$/;"	m	struct:VmaAllocation_T::DedicatedAllocation	access:public
VmaAllocation_T::FLAGS	src/renderer/vulkan/vk_mem_alloc.h	/^    enum FLAGS$/;"	g	struct:VmaAllocation_T	access:private
VmaAllocation_T::FLAG_USER_DATA_STRING	src/renderer/vulkan/vk_mem_alloc.h	/^        FLAG_USER_DATA_STRING = 0x01,$/;"	e	enum:VmaAllocation_T::FLAGS
VmaAllocation_T::FreeUserDataString	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocation_T::FreeUserDataString(VmaAllocator hAllocator)$/;"	f	class:VmaAllocation_T	signature:(VmaAllocator hAllocator)
VmaAllocation_T::GetAlignment	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetAlignment() const { return m_Alignment; }$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
VmaAllocation_T::GetBlock	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaDeviceMemoryBlock* GetBlock() const$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
VmaAllocation_T::GetLastUseFrameIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t GetLastUseFrameIndex() const$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
VmaAllocation_T::GetMappedData	src/renderer/vulkan/vk_mem_alloc.h	/^void* VmaAllocation_T::GetMappedData() const$/;"	f	class:VmaAllocation_T	signature:() const
VmaAllocation_T::GetMemory	src/renderer/vulkan/vk_mem_alloc.h	/^VkDeviceMemory VmaAllocation_T::GetMemory() const$/;"	f	class:VmaAllocation_T	signature:() const
VmaAllocation_T::GetMemoryTypeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^uint32_t VmaAllocation_T::GetMemoryTypeIndex() const$/;"	f	class:VmaAllocation_T	signature:() const
VmaAllocation_T::GetOffset	src/renderer/vulkan/vk_mem_alloc.h	/^VkDeviceSize VmaAllocation_T::GetOffset() const$/;"	f	class:VmaAllocation_T	signature:() const
VmaAllocation_T::GetPool	src/renderer/vulkan/vk_mem_alloc.h	/^VmaPool VmaAllocation_T::GetPool() const$/;"	f	class:VmaAllocation_T	signature:() const
VmaAllocation_T::GetSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetSize() const { return m_Size; }$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
VmaAllocation_T::GetSuballocationType	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaSuballocationType GetSuballocationType() const { return (VmaSuballocationType)m_SuballocationType; }$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
VmaAllocation_T::GetType	src/renderer/vulkan/vk_mem_alloc.h	/^    ALLOCATION_TYPE GetType() const { return (ALLOCATION_TYPE)m_Type; }$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
VmaAllocation_T::GetUserData	src/renderer/vulkan/vk_mem_alloc.h	/^    void* GetUserData() const { return m_pUserData; }$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
VmaAllocation_T::InitBlockAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^    void InitBlockAllocation($/;"	f	struct:VmaAllocation_T	access:public	signature:( VmaPool hPool, VmaDeviceMemoryBlock* block, VkDeviceSize offset, VkDeviceSize alignment, VkDeviceSize size, VmaSuballocationType suballocationType, bool mapped, bool canBecomeLost)
VmaAllocation_T::InitDedicatedAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^    void InitDedicatedAllocation($/;"	f	struct:VmaAllocation_T	access:public	signature:( uint32_t memoryTypeIndex, VkDeviceMemory hMemory, VmaSuballocationType suballocationType, void* pMappedData, VkDeviceSize size)
VmaAllocation_T::InitLost	src/renderer/vulkan/vk_mem_alloc.h	/^    void InitLost()$/;"	f	struct:VmaAllocation_T	access:public	signature:()
VmaAllocation_T::IsPersistentMap	src/renderer/vulkan/vk_mem_alloc.h	/^    bool IsPersistentMap() const { return (m_MapCount & MAP_COUNT_FLAG_PERSISTENT_MAP) != 0; }$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
VmaAllocation_T::IsUserDataString	src/renderer/vulkan/vk_mem_alloc.h	/^    bool IsUserDataString() const { return (m_Flags & FLAG_USER_DATA_STRING) != 0; }$/;"	f	struct:VmaAllocation_T	access:public	signature:() const
VmaAllocation_T::MAP_COUNT_FLAG_PERSISTENT_MAP	src/renderer/vulkan/vk_mem_alloc.h	/^    static const uint8_t MAP_COUNT_FLAG_PERSISTENT_MAP = 0x80;$/;"	m	struct:VmaAllocation_T	access:private
VmaAllocation_T::MakeLost	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaAllocation_T::MakeLost(uint32_t currentFrameIndex, uint32_t frameInUseCount)$/;"	f	class:VmaAllocation_T	signature:(uint32_t currentFrameIndex, uint32_t frameInUseCount)
VmaAllocation_T::SetUserData	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocation_T::SetUserData(VmaAllocator hAllocator, void* pUserData)$/;"	f	class:VmaAllocation_T	signature:(VmaAllocator hAllocator, void* pUserData)
VmaAllocation_T::VmaAllocation_T	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaAllocation_T(uint32_t currentFrameIndex, bool userDataString) :$/;"	f	struct:VmaAllocation_T	access:public	signature:(uint32_t currentFrameIndex, bool userDataString)
VmaAllocation_T::__anon1::m_BlockAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^        BlockAllocation m_BlockAllocation;$/;"	m	union:VmaAllocation_T::__anon1	access:public
VmaAllocation_T::__anon1::m_DedicatedAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^        DedicatedAllocation m_DedicatedAllocation;$/;"	m	union:VmaAllocation_T::__anon1	access:public
VmaAllocation_T::m_Alignment	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_Alignment;$/;"	m	struct:VmaAllocation_T	access:private
VmaAllocation_T::m_Flags	src/renderer/vulkan/vk_mem_alloc.h	/^    uint8_t m_Flags; \/\/ enum FLAGS$/;"	m	struct:VmaAllocation_T	access:private
VmaAllocation_T::m_LastUseFrameIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_ATOMIC_UINT32 m_LastUseFrameIndex;$/;"	m	struct:VmaAllocation_T	access:private
VmaAllocation_T::m_MapCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint8_t m_MapCount;$/;"	m	struct:VmaAllocation_T	access:private
VmaAllocation_T::m_Size	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_Size;$/;"	m	struct:VmaAllocation_T	access:private
VmaAllocation_T::m_SuballocationType	src/renderer/vulkan/vk_mem_alloc.h	/^    uint8_t m_SuballocationType; \/\/ VmaSuballocationType$/;"	m	struct:VmaAllocation_T	access:private
VmaAllocation_T::m_Type	src/renderer/vulkan/vk_mem_alloc.h	/^    uint8_t m_Type; \/\/ ALLOCATION_TYPE$/;"	m	struct:VmaAllocation_T	access:private
VmaAllocation_T::m_pUserData	src/renderer/vulkan/vk_mem_alloc.h	/^    void* m_pUserData;$/;"	m	struct:VmaAllocation_T	access:private
VmaAllocation_T::~VmaAllocation_T	src/renderer/vulkan/vk_mem_alloc.h	/^    ~VmaAllocation_T()$/;"	f	struct:VmaAllocation_T	access:public	signature:()
VmaAllocatorCreateFlagBits	src/renderer/vulkan/vk_mem_alloc.h	/^typedef enum VmaAllocatorCreateFlagBits {$/;"	g
VmaAllocatorCreateFlagBits	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaAllocatorCreateFlagBits;$/;"	t	typeref:enum:VmaAllocatorCreateFlagBits
VmaAllocatorCreateFlags	src/renderer/vulkan/vk_mem_alloc.h	/^typedef VkFlags VmaAllocatorCreateFlags;$/;"	t
VmaAllocatorCreateInfo	src/renderer/vulkan/vk_mem_alloc.h	/^typedef struct VmaAllocatorCreateInfo$/;"	s
VmaAllocatorCreateInfo	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaAllocatorCreateInfo;$/;"	t	typeref:struct:VmaAllocatorCreateInfo
VmaAllocatorCreateInfo::device	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDevice device;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
VmaAllocatorCreateInfo::flags	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaAllocatorCreateFlags flags;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
VmaAllocatorCreateInfo::frameInUseCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t frameInUseCount;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
VmaAllocatorCreateInfo::pAllocationCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkAllocationCallbacks* pAllocationCallbacks;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
VmaAllocatorCreateInfo::pDeviceMemoryCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    const VmaDeviceMemoryCallbacks* pDeviceMemoryCallbacks;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
VmaAllocatorCreateInfo::pHeapSizeLimit	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkDeviceSize* pHeapSizeLimit;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
VmaAllocatorCreateInfo::pVulkanFunctions	src/renderer/vulkan/vk_mem_alloc.h	/^    const VmaVulkanFunctions* pVulkanFunctions;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
VmaAllocatorCreateInfo::physicalDevice	src/renderer/vulkan/vk_mem_alloc.h	/^    VkPhysicalDevice physicalDevice;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
VmaAllocatorCreateInfo::preferredLargeHeapBlockSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize preferredLargeHeapBlockSize;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
VmaAllocatorCreateInfo::preferredSmallHeapBlockSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize preferredSmallHeapBlockSize;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
VmaAllocator_T	src/renderer/vulkan/vk_mem_alloc.h	/^VmaAllocator_T::VmaAllocator_T(const VmaAllocatorCreateInfo* pCreateInfo) :$/;"	f	class:VmaAllocator_T	signature:(const VmaAllocatorCreateInfo* pCreateInfo)
VmaAllocator_T	src/renderer/vulkan/vk_mem_alloc.h	/^struct VmaAllocator_T$/;"	s
VmaAllocator_T::AllocateDedicatedMemory	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocator_T::AllocateDedicatedMemory($/;"	f	class:VmaAllocator_T	signature:( VkDeviceSize size, VmaSuballocationType suballocType, uint32_t memTypeIndex, bool map, bool isUserDataString, void* pUserData, VkBuffer dedicatedBuffer, VkImage dedicatedImage, VmaAllocation* pAllocation)
VmaAllocator_T::AllocateMemory	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocator_T::AllocateMemory($/;"	f	class:VmaAllocator_T	signature:( const VkMemoryRequirements& vkMemReq, bool requiresDedicatedAllocation, bool prefersDedicatedAllocation, VkBuffer dedicatedBuffer, VkImage dedicatedImage, const VmaAllocationCreateInfo& createInfo, VmaSuballocationType suballocType, VmaAllocation* pAllocation)
VmaAllocator_T::AllocateMemoryOfType	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocator_T::AllocateMemoryOfType($/;"	f	class:VmaAllocator_T	signature:( const VkMemoryRequirements& vkMemReq, bool dedicatedAllocation, VkBuffer dedicatedBuffer, VkImage dedicatedImage, const VmaAllocationCreateInfo& createInfo, uint32_t memTypeIndex, VmaSuballocationType suballocType, VmaAllocation* pAllocation)
VmaAllocator_T::AllocateVulkanMemory	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocator_T::AllocateVulkanMemory(const VkMemoryAllocateInfo* pAllocateInfo, VkDeviceMemory* pMemory)$/;"	f	class:VmaAllocator_T	signature:(const VkMemoryAllocateInfo* pAllocateInfo, VkDeviceMemory* pMemory)
VmaAllocator_T::AllocationVectorType	src/renderer/vulkan/vk_mem_alloc.h	/^    typedef VmaVector< VmaAllocation, VmaStlAllocator<VmaAllocation> > AllocationVectorType;$/;"	t	struct:VmaAllocator_T	access:public
VmaAllocator_T::CalcPreferredBlockSize	src/renderer/vulkan/vk_mem_alloc.h	/^VkDeviceSize VmaAllocator_T::CalcPreferredBlockSize(uint32_t memTypeIndex)$/;"	f	class:VmaAllocator_T	signature:(uint32_t memTypeIndex)
VmaAllocator_T::CalculateStats	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::CalculateStats(VmaStats* pStats)$/;"	f	class:VmaAllocator_T	signature:(VmaStats* pStats)
VmaAllocator_T::CreateLostAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::CreateLostAllocation(VmaAllocation* pAllocation)$/;"	f	class:VmaAllocator_T	signature:(VmaAllocation* pAllocation)
VmaAllocator_T::CreatePool	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocator_T::CreatePool(const VmaPoolCreateInfo* pCreateInfo, VmaPool* pPool)$/;"	f	class:VmaAllocator_T	signature:(const VmaPoolCreateInfo* pCreateInfo, VmaPool* pPool)
VmaAllocator_T::Defragment	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocator_T::Defragment($/;"	f	class:VmaAllocator_T	signature:( VmaAllocation* pAllocations, size_t allocationCount, VkBool32* pAllocationsChanged, const VmaDefragmentationInfo* pDefragmentationInfo, VmaDefragmentationStats* pDefragmentationStats)
VmaAllocator_T::DestroyPool	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::DestroyPool(VmaPool pool)$/;"	f	class:VmaAllocator_T	signature:(VmaPool pool)
VmaAllocator_T::FreeDedicatedMemory	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::FreeDedicatedMemory(VmaAllocation allocation)$/;"	f	class:VmaAllocator_T	signature:(VmaAllocation allocation)
VmaAllocator_T::FreeMemory	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::FreeMemory(const VmaAllocation allocation)$/;"	f	class:VmaAllocator_T	signature:(const VmaAllocation allocation)
VmaAllocator_T::FreeVulkanMemory	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::FreeVulkanMemory(uint32_t memoryType, VkDeviceSize size, VkDeviceMemory hMemory)$/;"	f	class:VmaAllocator_T	signature:(uint32_t memoryType, VkDeviceSize size, VkDeviceMemory hMemory)
VmaAllocator_T::GetAllocationCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkAllocationCallbacks* GetAllocationCallbacks() const$/;"	f	struct:VmaAllocator_T	access:public	signature:() const
VmaAllocator_T::GetAllocationInfo	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::GetAllocationInfo(VmaAllocation hAllocation, VmaAllocationInfo* pAllocationInfo)$/;"	f	class:VmaAllocator_T	signature:(VmaAllocation hAllocation, VmaAllocationInfo* pAllocationInfo)
VmaAllocator_T::GetBufferImageGranularity	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetBufferImageGranularity() const$/;"	f	struct:VmaAllocator_T	access:public	signature:() const
VmaAllocator_T::GetBufferMemoryRequirements	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::GetBufferMemoryRequirements($/;"	f	class:VmaAllocator_T	signature:( VkBuffer hBuffer, VkMemoryRequirements& memReq, bool& requiresDedicatedAllocation, bool& prefersDedicatedAllocation) const
VmaAllocator_T::GetImageMemoryRequirements	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::GetImageMemoryRequirements($/;"	f	class:VmaAllocator_T	signature:( VkImage hImage, VkMemoryRequirements& memReq, bool& requiresDedicatedAllocation, bool& prefersDedicatedAllocation) const
VmaAllocator_T::GetMemoryHeapCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t GetMemoryHeapCount() const { return m_MemProps.memoryHeapCount; }$/;"	f	struct:VmaAllocator_T	access:public	signature:() const
VmaAllocator_T::GetMemoryTypeCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t GetMemoryTypeCount() const { return m_MemProps.memoryTypeCount; }$/;"	f	struct:VmaAllocator_T	access:public	signature:() const
VmaAllocator_T::GetPoolStats	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::GetPoolStats(VmaPool pool, VmaPoolStats* pPoolStats)$/;"	f	class:VmaAllocator_T	signature:(VmaPool pool, VmaPoolStats* pPoolStats)
VmaAllocator_T::GetVulkanFunctions	src/renderer/vulkan/vk_mem_alloc.h	/^    const VmaVulkanFunctions& GetVulkanFunctions() const$/;"	f	struct:VmaAllocator_T	access:public	signature:() const
VmaAllocator_T::ImportVulkanFunctions	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::ImportVulkanFunctions(const VmaVulkanFunctions* pVulkanFunctions)$/;"	f	class:VmaAllocator_T	signature:(const VmaVulkanFunctions* pVulkanFunctions)
VmaAllocator_T::MakePoolAllocationsLost	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::MakePoolAllocationsLost($/;"	f	class:VmaAllocator_T	signature:( VmaPool hPool, size_t* pLostAllocationCount)
VmaAllocator_T::Map	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaAllocator_T::Map(VmaAllocation hAllocation, void** ppData)$/;"	f	class:VmaAllocator_T	signature:(VmaAllocation hAllocation, void** ppData)
VmaAllocator_T::MemoryTypeIndexToHeapIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t MemoryTypeIndexToHeapIndex(uint32_t memTypeIndex) const$/;"	f	struct:VmaAllocator_T	access:public	signature:(uint32_t memTypeIndex) const
VmaAllocator_T::PrintDetailedMap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::PrintDetailedMap(VmaJsonWriter& json)$/;"	f	class:VmaAllocator_T	signature:(VmaJsonWriter& json)
VmaAllocator_T::SetCurrentFrameIndex	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::SetCurrentFrameIndex(uint32_t frameIndex)$/;"	f	class:VmaAllocator_T	signature:(uint32_t frameIndex)
VmaAllocator_T::Unmap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaAllocator_T::Unmap(VmaAllocation hAllocation)$/;"	f	class:VmaAllocator_T	signature:(VmaAllocation hAllocation)
VmaAllocator_T::VmaAllocator_T	src/renderer/vulkan/vk_mem_alloc.h	/^VmaAllocator_T::VmaAllocator_T(const VmaAllocatorCreateInfo* pCreateInfo) :$/;"	f	class:VmaAllocator_T	signature:(const VmaAllocatorCreateInfo* pCreateInfo)
VmaAllocator_T::m_AllocationCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    VkAllocationCallbacks m_AllocationCallbacks;$/;"	m	struct:VmaAllocator_T	access:public
VmaAllocator_T::m_AllocationCallbacksSpecified	src/renderer/vulkan/vk_mem_alloc.h	/^    bool m_AllocationCallbacksSpecified;$/;"	m	struct:VmaAllocator_T	access:public
VmaAllocator_T::m_CurrentFrameIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_ATOMIC_UINT32 m_CurrentFrameIndex;$/;"	m	struct:VmaAllocator_T	access:private
VmaAllocator_T::m_DedicatedAllocationsMutex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MUTEX m_DedicatedAllocationsMutex[VK_MAX_MEMORY_TYPES];$/;"	m	struct:VmaAllocator_T	access:public
VmaAllocator_T::m_DeviceMemoryCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaDeviceMemoryCallbacks m_DeviceMemoryCallbacks;$/;"	m	struct:VmaAllocator_T	access:public
VmaAllocator_T::m_HeapSizeLimit	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_HeapSizeLimit[VK_MAX_MEMORY_HEAPS];$/;"	m	struct:VmaAllocator_T	access:public
VmaAllocator_T::m_HeapSizeLimitMutex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MUTEX m_HeapSizeLimitMutex;$/;"	m	struct:VmaAllocator_T	access:public
VmaAllocator_T::m_MemProps	src/renderer/vulkan/vk_mem_alloc.h	/^    VkPhysicalDeviceMemoryProperties m_MemProps;$/;"	m	struct:VmaAllocator_T	access:public
VmaAllocator_T::m_PhysicalDevice	src/renderer/vulkan/vk_mem_alloc.h	/^    VkPhysicalDevice m_PhysicalDevice;$/;"	m	struct:VmaAllocator_T	access:private
VmaAllocator_T::m_PhysicalDeviceProperties	src/renderer/vulkan/vk_mem_alloc.h	/^    VkPhysicalDeviceProperties m_PhysicalDeviceProperties;$/;"	m	struct:VmaAllocator_T	access:public
VmaAllocator_T::m_Pools	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector<VmaPool, VmaStlAllocator<VmaPool> > m_Pools;$/;"	m	struct:VmaAllocator_T	access:private
VmaAllocator_T::m_PoolsMutex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MUTEX m_PoolsMutex;$/;"	m	struct:VmaAllocator_T	access:private
VmaAllocator_T::m_PreferredLargeHeapBlockSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_PreferredLargeHeapBlockSize;$/;"	m	struct:VmaAllocator_T	access:private
VmaAllocator_T::m_PreferredSmallHeapBlockSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_PreferredSmallHeapBlockSize;$/;"	m	struct:VmaAllocator_T	access:private
VmaAllocator_T::m_UseKhrDedicatedAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^    bool m_UseKhrDedicatedAllocation;$/;"	m	struct:VmaAllocator_T	access:public
VmaAllocator_T::m_UseMutex	src/renderer/vulkan/vk_mem_alloc.h	/^    bool m_UseMutex;$/;"	m	struct:VmaAllocator_T	access:public
VmaAllocator_T::m_VulkanFunctions	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVulkanFunctions m_VulkanFunctions;$/;"	m	struct:VmaAllocator_T	access:private
VmaAllocator_T::m_hDevice	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDevice m_hDevice;$/;"	m	struct:VmaAllocator_T	access:public
VmaAllocator_T::m_pBlockVectors	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaBlockVector* m_pBlockVectors[VK_MAX_MEMORY_TYPES];$/;"	m	struct:VmaAllocator_T	access:public
VmaAllocator_T::m_pDedicatedAllocations	src/renderer/vulkan/vk_mem_alloc.h	/^    AllocationVectorType* m_pDedicatedAllocations[VK_MAX_MEMORY_TYPES];$/;"	m	struct:VmaAllocator_T	access:public
VmaAllocator_T::~VmaAllocator_T	src/renderer/vulkan/vk_mem_alloc.h	/^VmaAllocator_T::~VmaAllocator_T()$/;"	f	class:VmaAllocator_T	signature:()
VmaBinaryFindFirstNotLess	src/renderer/vulkan/vk_mem_alloc.h	/^static IterT VmaBinaryFindFirstNotLess(IterT beg, IterT end, const KeyT &key, CmpT cmp)$/;"	f	signature:(IterT beg, IterT end, const KeyT &key, CmpT cmp)
VmaBlockMetadata	src/renderer/vulkan/vk_mem_alloc.h	/^VmaBlockMetadata::VmaBlockMetadata(VmaAllocator hAllocator) :$/;"	f	class:VmaBlockMetadata	signature:(VmaAllocator hAllocator)
VmaBlockMetadata	src/renderer/vulkan/vk_mem_alloc.h	/^class VmaBlockMetadata$/;"	c
VmaBlockMetadata::AddPoolStats	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::AddPoolStats(VmaPoolStats& inoutStats) const$/;"	f	class:VmaBlockMetadata	signature:(VmaPoolStats& inoutStats) const
VmaBlockMetadata::Alloc	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::Alloc($/;"	f	class:VmaBlockMetadata	signature:( const VmaAllocationRequest& request, VmaSuballocationType type, VkDeviceSize allocSize, VmaAllocation hAllocation)
VmaBlockMetadata::CalcAllocationStatInfo	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::CalcAllocationStatInfo(VmaStatInfo& outInfo) const$/;"	f	class:VmaBlockMetadata	signature:(VmaStatInfo& outInfo) const
VmaBlockMetadata::CheckAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaBlockMetadata::CheckAllocation($/;"	f	class:VmaBlockMetadata	signature:( uint32_t currentFrameIndex, uint32_t frameInUseCount, VkDeviceSize bufferImageGranularity, VkDeviceSize allocSize, VkDeviceSize allocAlignment, VmaSuballocationType allocType, VmaSuballocationList::const_iterator suballocItem, bool canMakeOtherLost, VkDeviceSize* pOffset, size_t* itemsToMakeLostCount, VkDeviceSize* pSumFreeSize, VkDeviceSize* pSumItemSize) const
VmaBlockMetadata::CreateAllocationRequest	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaBlockMetadata::CreateAllocationRequest($/;"	f	class:VmaBlockMetadata	signature:( uint32_t currentFrameIndex, uint32_t frameInUseCount, VkDeviceSize bufferImageGranularity, VkDeviceSize allocSize, VkDeviceSize allocAlignment, VmaSuballocationType allocType, bool canMakeOtherLost, VmaAllocationRequest* pAllocationRequest)
VmaBlockMetadata::CreateFirstAllocationRequest	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::CreateFirstAllocationRequest(VmaAllocationRequest* pAllocationRequest)$/;"	f	class:VmaBlockMetadata	signature:(VmaAllocationRequest* pAllocationRequest)
VmaBlockMetadata::Free	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::Free(const VmaAllocation allocation)$/;"	f	class:VmaBlockMetadata	signature:(const VmaAllocation allocation)
VmaBlockMetadata::FreeSuballocation	src/renderer/vulkan/vk_mem_alloc.h	/^VmaSuballocationList::iterator VmaBlockMetadata::FreeSuballocation(VmaSuballocationList::iterator suballocItem)$/;"	f	class:VmaBlockMetadata	signature:(VmaSuballocationList::iterator suballocItem)
VmaBlockMetadata::GetAllocationCount	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t GetAllocationCount() const { return m_Suballocations.size() - m_FreeCount; }$/;"	f	class:VmaBlockMetadata	access:public	signature:() const
VmaBlockMetadata::GetSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetSize() const { return m_Size; }$/;"	f	class:VmaBlockMetadata	access:public	signature:() const
VmaBlockMetadata::GetSumFreeSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetSumFreeSize() const { return m_SumFreeSize; }$/;"	f	class:VmaBlockMetadata	access:public	signature:() const
VmaBlockMetadata::GetUnusedRangeSizeMax	src/renderer/vulkan/vk_mem_alloc.h	/^VkDeviceSize VmaBlockMetadata::GetUnusedRangeSizeMax() const$/;"	f	class:VmaBlockMetadata	signature:() const
VmaBlockMetadata::Init	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::Init(VkDeviceSize size)$/;"	f	class:VmaBlockMetadata	signature:(VkDeviceSize size)
VmaBlockMetadata::IsEmpty	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaBlockMetadata::IsEmpty() const$/;"	f	class:VmaBlockMetadata	signature:() const
VmaBlockMetadata::MakeAllocationsLost	src/renderer/vulkan/vk_mem_alloc.h	/^uint32_t VmaBlockMetadata::MakeAllocationsLost(uint32_t currentFrameIndex, uint32_t frameInUseCount)$/;"	f	class:VmaBlockMetadata	signature:(uint32_t currentFrameIndex, uint32_t frameInUseCount)
VmaBlockMetadata::MakeRequestedAllocationsLost	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaBlockMetadata::MakeRequestedAllocationsLost($/;"	f	class:VmaBlockMetadata	signature:( uint32_t currentFrameIndex, uint32_t frameInUseCount, VmaAllocationRequest* pAllocationRequest)
VmaBlockMetadata::MergeFreeWithNext	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::MergeFreeWithNext(VmaSuballocationList::iterator item)$/;"	f	class:VmaBlockMetadata	signature:(VmaSuballocationList::iterator item)
VmaBlockMetadata::PrintDetailedMap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::PrintDetailedMap(class VmaJsonWriter& json) const$/;"	f	class:VmaBlockMetadata	signature:(class VmaJsonWriter& json) const
VmaBlockMetadata::RegisterFreeSuballocation	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::RegisterFreeSuballocation(VmaSuballocationList::iterator item)$/;"	f	class:VmaBlockMetadata	signature:(VmaSuballocationList::iterator item)
VmaBlockMetadata::UnregisterFreeSuballocation	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockMetadata::UnregisterFreeSuballocation(VmaSuballocationList::iterator item)$/;"	f	class:VmaBlockMetadata	signature:(VmaSuballocationList::iterator item)
VmaBlockMetadata::Validate	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaBlockMetadata::Validate() const$/;"	f	class:VmaBlockMetadata	signature:() const
VmaBlockMetadata::ValidateFreeSuballocationList	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaBlockMetadata::ValidateFreeSuballocationList() const$/;"	f	class:VmaBlockMetadata	signature:() const
VmaBlockMetadata::VmaBlockMetadata	src/renderer/vulkan/vk_mem_alloc.h	/^VmaBlockMetadata::VmaBlockMetadata(VmaAllocator hAllocator) :$/;"	f	class:VmaBlockMetadata	signature:(VmaAllocator hAllocator)
VmaBlockMetadata::m_FreeCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t m_FreeCount;$/;"	m	class:VmaBlockMetadata	access:private
VmaBlockMetadata::m_FreeSuballocationsBySize	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector< VmaSuballocationList::iterator, VmaStlAllocator< VmaSuballocationList::iterator > > m_FreeSuballocationsBySize;$/;"	m	class:VmaBlockMetadata	access:private
VmaBlockMetadata::m_Size	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_Size;$/;"	m	class:VmaBlockMetadata	access:private
VmaBlockMetadata::m_Suballocations	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaSuballocationList m_Suballocations;$/;"	m	class:VmaBlockMetadata	access:private
VmaBlockMetadata::m_SumFreeSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_SumFreeSize;$/;"	m	class:VmaBlockMetadata	access:private
VmaBlockMetadata::~VmaBlockMetadata	src/renderer/vulkan/vk_mem_alloc.h	/^VmaBlockMetadata::~VmaBlockMetadata()$/;"	f	class:VmaBlockMetadata	signature:()
VmaBlockVector	src/renderer/vulkan/vk_mem_alloc.h	/^VmaBlockVector::VmaBlockVector($/;"	f	class:VmaBlockVector	signature:( VmaAllocator hAllocator, uint32_t memoryTypeIndex, VkDeviceSize preferredBlockSize, size_t minBlockCount, size_t maxBlockCount, VkDeviceSize bufferImageGranularity, uint32_t frameInUseCount, bool isCustomPool)
VmaBlockVector	src/renderer/vulkan/vk_mem_alloc.h	/^struct VmaBlockVector$/;"	s
VmaBlockVector::AddStats	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::AddStats(VmaStats* pStats)$/;"	f	class:VmaBlockVector	signature:(VmaStats* pStats)
VmaBlockVector::Allocate	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaBlockVector::Allocate($/;"	f	class:VmaBlockVector	signature:( VmaPool hCurrentPool, uint32_t currentFrameIndex, const VkMemoryRequirements& vkMemReq, const VmaAllocationCreateInfo& createInfo, VmaSuballocationType suballocType, VmaAllocation* pAllocation)
VmaBlockVector::CreateBlock	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaBlockVector::CreateBlock(VkDeviceSize blockSize, size_t* pNewBlockIndex)$/;"	f	class:VmaBlockVector	signature:(VkDeviceSize blockSize, size_t* pNewBlockIndex)
VmaBlockVector::CreateMinBlocks	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaBlockVector::CreateMinBlocks()$/;"	f	class:VmaBlockVector	signature:()
VmaBlockVector::Defragment	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaBlockVector::Defragment($/;"	f	class:VmaBlockVector	signature:( VmaDefragmentationStats* pDefragmentationStats, VkDeviceSize& maxBytesToMove, uint32_t& maxAllocationsToMove)
VmaBlockVector::DestroyDefragmentator	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::DestroyDefragmentator()$/;"	f	class:VmaBlockVector	signature:()
VmaBlockVector::EnsureDefragmentator	src/renderer/vulkan/vk_mem_alloc.h	/^VmaDefragmentator* VmaBlockVector::EnsureDefragmentator($/;"	f	class:VmaBlockVector	signature:( VmaAllocator hAllocator, uint32_t currentFrameIndex)
VmaBlockVector::Free	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::Free($/;"	f	class:VmaBlockVector	signature:( VmaAllocation hAllocation)
VmaBlockVector::GetBufferImageGranularity	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetBufferImageGranularity() const { return m_BufferImageGranularity; }$/;"	f	struct:VmaBlockVector	access:public	signature:() const
VmaBlockVector::GetFrameInUseCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t GetFrameInUseCount() const { return m_FrameInUseCount; }$/;"	f	struct:VmaBlockVector	access:public	signature:() const
VmaBlockVector::GetMemoryTypeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t GetMemoryTypeIndex() const { return m_MemoryTypeIndex; }$/;"	f	struct:VmaBlockVector	access:public	signature:() const
VmaBlockVector::GetPoolStats	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::GetPoolStats(VmaPoolStats* pStats)$/;"	f	class:VmaBlockVector	signature:(VmaPoolStats* pStats)
VmaBlockVector::GetPreferredBlockSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetPreferredBlockSize() const { return m_PreferredBlockSize; }$/;"	f	struct:VmaBlockVector	access:public	signature:() const
VmaBlockVector::IncrementallySortBlocks	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::IncrementallySortBlocks()$/;"	f	class:VmaBlockVector	signature:()
VmaBlockVector::IsEmpty	src/renderer/vulkan/vk_mem_alloc.h	/^    bool IsEmpty() const { return m_Blocks.empty(); }$/;"	f	struct:VmaBlockVector	access:public	signature:() const
VmaBlockVector::MakePoolAllocationsLost	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::MakePoolAllocationsLost($/;"	f	class:VmaBlockVector	signature:( uint32_t currentFrameIndex, size_t* pLostAllocationCount)
VmaBlockVector::PrintDetailedMap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::PrintDetailedMap(class VmaJsonWriter& json)$/;"	f	class:VmaBlockVector	signature:(class VmaJsonWriter& json)
VmaBlockVector::Remove	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaBlockVector::Remove(VmaDeviceMemoryBlock* pBlock)$/;"	f	class:VmaBlockVector	signature:(VmaDeviceMemoryBlock* pBlock)
VmaBlockVector::VmaBlockVector	src/renderer/vulkan/vk_mem_alloc.h	/^VmaBlockVector::VmaBlockVector($/;"	f	class:VmaBlockVector	signature:( VmaAllocator hAllocator, uint32_t memoryTypeIndex, VkDeviceSize preferredBlockSize, size_t minBlockCount, size_t maxBlockCount, VkDeviceSize bufferImageGranularity, uint32_t frameInUseCount, bool isCustomPool)
VmaBlockVector::m_Blocks	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector< VmaDeviceMemoryBlock*, VmaStlAllocator<VmaDeviceMemoryBlock*> > m_Blocks;$/;"	m	struct:VmaBlockVector	access:private
VmaBlockVector::m_BufferImageGranularity	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkDeviceSize m_BufferImageGranularity;$/;"	m	struct:VmaBlockVector	access:private
VmaBlockVector::m_FrameInUseCount	src/renderer/vulkan/vk_mem_alloc.h	/^    const uint32_t m_FrameInUseCount;$/;"	m	struct:VmaBlockVector	access:private
VmaBlockVector::m_HasEmptyBlock	src/renderer/vulkan/vk_mem_alloc.h	/^    bool m_HasEmptyBlock;$/;"	m	struct:VmaBlockVector	access:private
VmaBlockVector::m_IsCustomPool	src/renderer/vulkan/vk_mem_alloc.h	/^    const bool m_IsCustomPool;$/;"	m	struct:VmaBlockVector	access:private
VmaBlockVector::m_MaxBlockCount	src/renderer/vulkan/vk_mem_alloc.h	/^    const size_t m_MaxBlockCount;$/;"	m	struct:VmaBlockVector	access:private
VmaBlockVector::m_MemoryTypeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    const uint32_t m_MemoryTypeIndex;$/;"	m	struct:VmaBlockVector	access:private
VmaBlockVector::m_MinBlockCount	src/renderer/vulkan/vk_mem_alloc.h	/^    const size_t m_MinBlockCount;$/;"	m	struct:VmaBlockVector	access:private
VmaBlockVector::m_Mutex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MUTEX m_Mutex;$/;"	m	struct:VmaBlockVector	access:private
VmaBlockVector::m_PreferredBlockSize	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkDeviceSize m_PreferredBlockSize;$/;"	m	struct:VmaBlockVector	access:private
VmaBlockVector::m_hAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^    const VmaAllocator m_hAllocator;$/;"	m	struct:VmaBlockVector	access:private
VmaBlockVector::m_pDefragmentator	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaDefragmentator* m_pDefragmentator;$/;"	m	struct:VmaBlockVector	access:private
VmaBlockVector::~VmaBlockVector	src/renderer/vulkan/vk_mem_alloc.h	/^VmaBlockVector::~VmaBlockVector()$/;"	f	class:VmaBlockVector	signature:()
VmaBlocksOnSamePage	src/renderer/vulkan/vk_mem_alloc.h	/^static inline bool VmaBlocksOnSamePage($/;"	f	signature:( VkDeviceSize resourceAOffset, VkDeviceSize resourceASize, VkDeviceSize resourceBOffset, VkDeviceSize pageSize)
VmaCountBitsSet	src/renderer/vulkan/vk_mem_alloc.h	/^static inline uint32_t VmaCountBitsSet(uint32_t v)$/;"	f	signature:(uint32_t v)
VmaDefragmentationInfo	src/renderer/vulkan/vk_mem_alloc.h	/^typedef struct VmaDefragmentationInfo {$/;"	s
VmaDefragmentationInfo	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaDefragmentationInfo;$/;"	t	typeref:struct:VmaDefragmentationInfo
VmaDefragmentationInfo::maxAllocationsToMove	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t maxAllocationsToMove;$/;"	m	struct:VmaDefragmentationInfo	access:public
VmaDefragmentationInfo::maxBytesToMove	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize maxBytesToMove;$/;"	m	struct:VmaDefragmentationInfo	access:public
VmaDefragmentationStats	src/renderer/vulkan/vk_mem_alloc.h	/^typedef struct VmaDefragmentationStats {$/;"	s
VmaDefragmentationStats	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaDefragmentationStats;$/;"	t	typeref:struct:VmaDefragmentationStats
VmaDefragmentationStats::allocationsMoved	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t allocationsMoved;$/;"	m	struct:VmaDefragmentationStats	access:public
VmaDefragmentationStats::bytesFreed	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize bytesFreed;$/;"	m	struct:VmaDefragmentationStats	access:public
VmaDefragmentationStats::bytesMoved	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize bytesMoved;$/;"	m	struct:VmaDefragmentationStats	access:public
VmaDefragmentationStats::deviceMemoryBlocksFreed	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t deviceMemoryBlocksFreed;$/;"	m	struct:VmaDefragmentationStats	access:public
VmaDefragmentator	src/renderer/vulkan/vk_mem_alloc.h	/^VmaDefragmentator::VmaDefragmentator($/;"	f	class:VmaDefragmentator	signature:( VmaAllocator hAllocator, VmaBlockVector* pBlockVector, uint32_t currentFrameIndex)
VmaDefragmentator	src/renderer/vulkan/vk_mem_alloc.h	/^class VmaDefragmentator$/;"	c
VmaDefragmentator::AddAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaDefragmentator::AddAllocation(VmaAllocation hAlloc, VkBool32* pChanged)$/;"	f	class:VmaDefragmentator	signature:(VmaAllocation hAlloc, VkBool32* pChanged)
VmaDefragmentator::AllocationInfo	src/renderer/vulkan/vk_mem_alloc.h	/^    struct AllocationInfo$/;"	s	class:VmaDefragmentator	access:private
VmaDefragmentator::AllocationInfo::AllocationInfo	src/renderer/vulkan/vk_mem_alloc.h	/^        AllocationInfo() :$/;"	f	struct:VmaDefragmentator::AllocationInfo	access:public	signature:()
VmaDefragmentator::AllocationInfo::m_hAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^        VmaAllocation m_hAllocation;$/;"	m	struct:VmaDefragmentator::AllocationInfo	access:public
VmaDefragmentator::AllocationInfo::m_pChanged	src/renderer/vulkan/vk_mem_alloc.h	/^        VkBool32* m_pChanged;$/;"	m	struct:VmaDefragmentator::AllocationInfo	access:public
VmaDefragmentator::AllocationInfoSizeGreater	src/renderer/vulkan/vk_mem_alloc.h	/^    struct AllocationInfoSizeGreater$/;"	s	class:VmaDefragmentator	access:private
VmaDefragmentator::AllocationInfoSizeGreater::operator ()	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator()(const AllocationInfo& lhs, const AllocationInfo& rhs) const$/;"	f	struct:VmaDefragmentator::AllocationInfoSizeGreater	access:public	signature:(const AllocationInfo& lhs, const AllocationInfo& rhs) const
VmaDefragmentator::BlockInfo	src/renderer/vulkan/vk_mem_alloc.h	/^    struct BlockInfo$/;"	s	class:VmaDefragmentator	access:private
VmaDefragmentator::BlockInfo::BlockInfo	src/renderer/vulkan/vk_mem_alloc.h	/^        BlockInfo(const VkAllocationCallbacks* pAllocationCallbacks) :$/;"	f	struct:VmaDefragmentator::BlockInfo	access:public	signature:(const VkAllocationCallbacks* pAllocationCallbacks)
VmaDefragmentator::BlockInfo::CalcHasNonMovableAllocations	src/renderer/vulkan/vk_mem_alloc.h	/^        void CalcHasNonMovableAllocations()$/;"	f	struct:VmaDefragmentator::BlockInfo	access:public	signature:()
VmaDefragmentator::BlockInfo::EnsureMapping	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaDefragmentator::BlockInfo::EnsureMapping(VmaAllocator hAllocator, void** ppMappedData)$/;"	f	class:VmaDefragmentator::BlockInfo	signature:(VmaAllocator hAllocator, void** ppMappedData)
VmaDefragmentator::BlockInfo::SortAllocationsBySizeDescecnding	src/renderer/vulkan/vk_mem_alloc.h	/^        void SortAllocationsBySizeDescecnding()$/;"	f	struct:VmaDefragmentator::BlockInfo	access:public	signature:()
VmaDefragmentator::BlockInfo::Unmap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaDefragmentator::BlockInfo::Unmap(VmaAllocator hAllocator)$/;"	f	class:VmaDefragmentator::BlockInfo	signature:(VmaAllocator hAllocator)
VmaDefragmentator::BlockInfo::m_Allocations	src/renderer/vulkan/vk_mem_alloc.h	/^        VmaVector< AllocationInfo, VmaStlAllocator<AllocationInfo> > m_Allocations;$/;"	m	struct:VmaDefragmentator::BlockInfo	access:public
VmaDefragmentator::BlockInfo::m_HasNonMovableAllocations	src/renderer/vulkan/vk_mem_alloc.h	/^        bool m_HasNonMovableAllocations;$/;"	m	struct:VmaDefragmentator::BlockInfo	access:public
VmaDefragmentator::BlockInfo::m_pBlock	src/renderer/vulkan/vk_mem_alloc.h	/^        VmaDeviceMemoryBlock* m_pBlock;$/;"	m	struct:VmaDefragmentator::BlockInfo	access:public
VmaDefragmentator::BlockInfo::m_pMappedDataForDefragmentation	src/renderer/vulkan/vk_mem_alloc.h	/^        void* m_pMappedDataForDefragmentation;$/;"	m	struct:VmaDefragmentator::BlockInfo	access:private
VmaDefragmentator::BlockInfoCompareMoveDestination	src/renderer/vulkan/vk_mem_alloc.h	/^    struct BlockInfoCompareMoveDestination$/;"	s	class:VmaDefragmentator	access:private
VmaDefragmentator::BlockInfoCompareMoveDestination::operator ()	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator()(const BlockInfo* pLhsBlockInfo, const BlockInfo* pRhsBlockInfo) const$/;"	f	struct:VmaDefragmentator::BlockInfoCompareMoveDestination	access:public	signature:(const BlockInfo* pLhsBlockInfo, const BlockInfo* pRhsBlockInfo) const
VmaDefragmentator::BlockInfoVector	src/renderer/vulkan/vk_mem_alloc.h	/^    typedef VmaVector< BlockInfo*, VmaStlAllocator<BlockInfo*> > BlockInfoVector;$/;"	t	class:VmaDefragmentator	access:private
VmaDefragmentator::BlockPointerLess	src/renderer/vulkan/vk_mem_alloc.h	/^    struct BlockPointerLess$/;"	s	class:VmaDefragmentator	access:private
VmaDefragmentator::BlockPointerLess::operator ()	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator()(const BlockInfo* pLhsBlockInfo, const BlockInfo* pRhsBlockInfo) const$/;"	f	struct:VmaDefragmentator::BlockPointerLess	access:public	signature:(const BlockInfo* pLhsBlockInfo, const BlockInfo* pRhsBlockInfo) const
VmaDefragmentator::BlockPointerLess::operator ()	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator()(const BlockInfo* pLhsBlockInfo, const VmaDeviceMemoryBlock* pRhsBlock) const$/;"	f	struct:VmaDefragmentator::BlockPointerLess	access:public	signature:(const BlockInfo* pLhsBlockInfo, const VmaDeviceMemoryBlock* pRhsBlock) const
VmaDefragmentator::Defragment	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaDefragmentator::Defragment($/;"	f	class:VmaDefragmentator	signature:( VkDeviceSize maxBytesToMove, uint32_t maxAllocationsToMove)
VmaDefragmentator::DefragmentRound	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaDefragmentator::DefragmentRound($/;"	f	class:VmaDefragmentator	signature:( VkDeviceSize maxBytesToMove, uint32_t maxAllocationsToMove)
VmaDefragmentator::GetAllocationsMoved	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t GetAllocationsMoved() const { return m_AllocationsMoved; }$/;"	f	class:VmaDefragmentator	access:public	signature:() const
VmaDefragmentator::GetBytesMoved	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize GetBytesMoved() const { return m_BytesMoved; }$/;"	f	class:VmaDefragmentator	access:public	signature:() const
VmaDefragmentator::MoveMakesSense	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaDefragmentator::MoveMakesSense($/;"	f	class:VmaDefragmentator	signature:( size_t dstBlockIndex, VkDeviceSize dstOffset, size_t srcBlockIndex, VkDeviceSize srcOffset)
VmaDefragmentator::VmaDefragmentator	src/renderer/vulkan/vk_mem_alloc.h	/^VmaDefragmentator::VmaDefragmentator($/;"	f	class:VmaDefragmentator	signature:( VmaAllocator hAllocator, VmaBlockVector* pBlockVector, uint32_t currentFrameIndex)
VmaDefragmentator::m_Allocations	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector< AllocationInfo, VmaStlAllocator<AllocationInfo> > m_Allocations;$/;"	m	class:VmaDefragmentator	access:private
VmaDefragmentator::m_AllocationsMoved	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t m_AllocationsMoved;$/;"	m	class:VmaDefragmentator	access:private
VmaDefragmentator::m_Blocks	src/renderer/vulkan/vk_mem_alloc.h	/^    BlockInfoVector m_Blocks;$/;"	m	class:VmaDefragmentator	access:private
VmaDefragmentator::m_BytesMoved	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_BytesMoved;$/;"	m	class:VmaDefragmentator	access:private
VmaDefragmentator::m_CurrentFrameIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t m_CurrentFrameIndex;$/;"	m	class:VmaDefragmentator	access:private
VmaDefragmentator::m_hAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^    const VmaAllocator m_hAllocator;$/;"	m	class:VmaDefragmentator	access:private
VmaDefragmentator::m_pBlockVector	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaBlockVector* const m_pBlockVector;$/;"	m	class:VmaDefragmentator	access:private
VmaDefragmentator::~VmaDefragmentator	src/renderer/vulkan/vk_mem_alloc.h	/^VmaDefragmentator::~VmaDefragmentator()$/;"	f	class:VmaDefragmentator	signature:()
VmaDeviceMemoryBlock	src/renderer/vulkan/vk_mem_alloc.h	/^VmaDeviceMemoryBlock::VmaDeviceMemoryBlock(VmaAllocator hAllocator) :$/;"	f	class:VmaDeviceMemoryBlock	signature:(VmaAllocator hAllocator)
VmaDeviceMemoryBlock	src/renderer/vulkan/vk_mem_alloc.h	/^class VmaDeviceMemoryBlock$/;"	c
VmaDeviceMemoryBlock::Destroy	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaDeviceMemoryBlock::Destroy(VmaAllocator allocator)$/;"	f	class:VmaDeviceMemoryBlock	signature:(VmaAllocator allocator)
VmaDeviceMemoryBlock::Init	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaDeviceMemoryBlock::Init($/;"	f	class:VmaDeviceMemoryBlock	signature:( uint32_t newMemoryTypeIndex, VkDeviceMemory newMemory, VkDeviceSize newSize)
VmaDeviceMemoryBlock::Map	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaDeviceMemoryBlock::Map(VmaAllocator hAllocator, void** ppData)$/;"	f	class:VmaDeviceMemoryBlock	signature:(VmaAllocator hAllocator, void** ppData)
VmaDeviceMemoryBlock::Unmap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaDeviceMemoryBlock::Unmap(VmaAllocator hAllocator)$/;"	f	class:VmaDeviceMemoryBlock	signature:(VmaAllocator hAllocator)
VmaDeviceMemoryBlock::Validate	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaDeviceMemoryBlock::Validate() const$/;"	f	class:VmaDeviceMemoryBlock	signature:() const
VmaDeviceMemoryBlock::VmaDeviceMemoryBlock	src/renderer/vulkan/vk_mem_alloc.h	/^VmaDeviceMemoryBlock::VmaDeviceMemoryBlock(VmaAllocator hAllocator) :$/;"	f	class:VmaDeviceMemoryBlock	signature:(VmaAllocator hAllocator)
VmaDeviceMemoryBlock::m_Mapping	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaDeviceMemoryMapping m_Mapping;    $/;"	m	class:VmaDeviceMemoryBlock	access:public
VmaDeviceMemoryBlock::m_MemoryTypeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t m_MemoryTypeIndex;$/;"	m	class:VmaDeviceMemoryBlock	access:public
VmaDeviceMemoryBlock::m_Metadata	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaBlockMetadata m_Metadata;$/;"	m	class:VmaDeviceMemoryBlock	access:public
VmaDeviceMemoryBlock::m_hMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceMemory m_hMemory;$/;"	m	class:VmaDeviceMemoryBlock	access:public
VmaDeviceMemoryBlock::~VmaDeviceMemoryBlock	src/renderer/vulkan/vk_mem_alloc.h	/^    ~VmaDeviceMemoryBlock()$/;"	f	class:VmaDeviceMemoryBlock	access:public	signature:()
VmaDeviceMemoryCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^typedef struct VmaDeviceMemoryCallbacks {$/;"	s
VmaDeviceMemoryCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaDeviceMemoryCallbacks;$/;"	t	typeref:struct:VmaDeviceMemoryCallbacks
VmaDeviceMemoryCallbacks::pfnAllocate	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vmaAllocateDeviceMemoryFunction pfnAllocate;$/;"	m	struct:VmaDeviceMemoryCallbacks	access:public
VmaDeviceMemoryCallbacks::pfnFree	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vmaFreeDeviceMemoryFunction pfnFree;$/;"	m	struct:VmaDeviceMemoryCallbacks	access:public
VmaDeviceMemoryMapping	src/renderer/vulkan/vk_mem_alloc.h	/^VmaDeviceMemoryMapping::VmaDeviceMemoryMapping() :$/;"	f	class:VmaDeviceMemoryMapping	signature:()
VmaDeviceMemoryMapping	src/renderer/vulkan/vk_mem_alloc.h	/^class VmaDeviceMemoryMapping$/;"	c
VmaDeviceMemoryMapping::GetMappedData	src/renderer/vulkan/vk_mem_alloc.h	/^    void* GetMappedData() const { return m_pMappedData; }$/;"	f	class:VmaDeviceMemoryMapping	access:public	signature:() const
VmaDeviceMemoryMapping::Map	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult VmaDeviceMemoryMapping::Map(VmaAllocator hAllocator, VkDeviceMemory hMemory, void **ppData)$/;"	f	class:VmaDeviceMemoryMapping	signature:(VmaAllocator hAllocator, VkDeviceMemory hMemory, void **ppData)
VmaDeviceMemoryMapping::Unmap	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaDeviceMemoryMapping::Unmap(VmaAllocator hAllocator, VkDeviceMemory hMemory)$/;"	f	class:VmaDeviceMemoryMapping	signature:(VmaAllocator hAllocator, VkDeviceMemory hMemory)
VmaDeviceMemoryMapping::VmaDeviceMemoryMapping	src/renderer/vulkan/vk_mem_alloc.h	/^VmaDeviceMemoryMapping::VmaDeviceMemoryMapping() :$/;"	f	class:VmaDeviceMemoryMapping	signature:()
VmaDeviceMemoryMapping::m_MapCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t m_MapCount;$/;"	m	class:VmaDeviceMemoryMapping	access:private
VmaDeviceMemoryMapping::m_Mutex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MUTEX m_Mutex;$/;"	m	class:VmaDeviceMemoryMapping	access:private
VmaDeviceMemoryMapping::m_pMappedData	src/renderer/vulkan/vk_mem_alloc.h	/^    void* m_pMappedData;$/;"	m	class:VmaDeviceMemoryMapping	access:private
VmaDeviceMemoryMapping::~VmaDeviceMemoryMapping	src/renderer/vulkan/vk_mem_alloc.h	/^VmaDeviceMemoryMapping::~VmaDeviceMemoryMapping()$/;"	f	class:VmaDeviceMemoryMapping	signature:()
VmaEmptyAllocationCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^static VkAllocationCallbacks VmaEmptyAllocationCallbacks = {$/;"	v
VmaFree	src/renderer/vulkan/vk_mem_alloc.h	/^static void VmaFree(VmaAllocator hAllocator, void* ptr)$/;"	f	signature:(VmaAllocator hAllocator, void* ptr)
VmaFree	src/renderer/vulkan/vk_mem_alloc.h	/^static void VmaFree(const VkAllocationCallbacks* pAllocationCallbacks, void* ptr)$/;"	f	signature:(const VkAllocationCallbacks* pAllocationCallbacks, void* ptr)
VmaIsBufferImageGranularityConflict	src/renderer/vulkan/vk_mem_alloc.h	/^static inline bool VmaIsBufferImageGranularityConflict($/;"	f	signature:( VmaSuballocationType suballocType1, VmaSuballocationType suballocType2)
VmaJsonWriter	src/renderer/vulkan/vk_mem_alloc.h	/^VmaJsonWriter::VmaJsonWriter(const VkAllocationCallbacks* pAllocationCallbacks, VmaStringBuilder& sb) :$/;"	f	class:VmaJsonWriter	signature:(const VkAllocationCallbacks* pAllocationCallbacks, VmaStringBuilder& sb)
VmaJsonWriter	src/renderer/vulkan/vk_mem_alloc.h	/^class VmaJsonWriter$/;"	c
VmaJsonWriter::BeginArray	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::BeginArray(bool singleLine)$/;"	f	class:VmaJsonWriter	signature:(bool singleLine)
VmaJsonWriter::BeginObject	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::BeginObject(bool singleLine)$/;"	f	class:VmaJsonWriter	signature:(bool singleLine)
VmaJsonWriter::BeginString	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::BeginString(const char* pStr)$/;"	f	class:VmaJsonWriter	signature:(const char* pStr)
VmaJsonWriter::BeginValue	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::BeginValue(bool isString)$/;"	f	class:VmaJsonWriter	signature:(bool isString)
VmaJsonWriter::COLLECTION_TYPE	src/renderer/vulkan/vk_mem_alloc.h	/^    enum COLLECTION_TYPE$/;"	g	class:VmaJsonWriter	access:private
VmaJsonWriter::COLLECTION_TYPE_ARRAY	src/renderer/vulkan/vk_mem_alloc.h	/^        COLLECTION_TYPE_ARRAY,$/;"	e	enum:VmaJsonWriter::COLLECTION_TYPE
VmaJsonWriter::COLLECTION_TYPE_OBJECT	src/renderer/vulkan/vk_mem_alloc.h	/^        COLLECTION_TYPE_OBJECT,$/;"	e	enum:VmaJsonWriter::COLLECTION_TYPE
VmaJsonWriter::ContinueString	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::ContinueString(const char* pStr)$/;"	f	class:VmaJsonWriter	signature:(const char* pStr)
VmaJsonWriter::ContinueString	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::ContinueString(uint32_t n)$/;"	f	class:VmaJsonWriter	signature:(uint32_t n)
VmaJsonWriter::ContinueString	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::ContinueString(uint64_t n)$/;"	f	class:VmaJsonWriter	signature:(uint64_t n)
VmaJsonWriter::ContinueString_Pointer	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::ContinueString_Pointer(const void* ptr)$/;"	f	class:VmaJsonWriter	signature:(const void* ptr)
VmaJsonWriter::EndArray	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::EndArray()$/;"	f	class:VmaJsonWriter	signature:()
VmaJsonWriter::EndObject	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::EndObject()$/;"	f	class:VmaJsonWriter	signature:()
VmaJsonWriter::EndString	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::EndString(const char* pStr)$/;"	f	class:VmaJsonWriter	signature:(const char* pStr)
VmaJsonWriter::INDENT	src/renderer/vulkan/vk_mem_alloc.h	/^    static const char* const INDENT;$/;"	m	class:VmaJsonWriter	access:private
VmaJsonWriter::INDENT	src/renderer/vulkan/vk_mem_alloc.h	/^const char* const VmaJsonWriter::INDENT = "  ";$/;"	m	class:VmaJsonWriter
VmaJsonWriter::StackItem	src/renderer/vulkan/vk_mem_alloc.h	/^    struct StackItem$/;"	s	class:VmaJsonWriter	access:private
VmaJsonWriter::StackItem::singleLineMode	src/renderer/vulkan/vk_mem_alloc.h	/^        bool singleLineMode;$/;"	m	struct:VmaJsonWriter::StackItem	access:public
VmaJsonWriter::StackItem::type	src/renderer/vulkan/vk_mem_alloc.h	/^        COLLECTION_TYPE type;$/;"	m	struct:VmaJsonWriter::StackItem	access:public
VmaJsonWriter::StackItem::valueCount	src/renderer/vulkan/vk_mem_alloc.h	/^        uint32_t valueCount;$/;"	m	struct:VmaJsonWriter::StackItem	access:public
VmaJsonWriter::VmaJsonWriter	src/renderer/vulkan/vk_mem_alloc.h	/^VmaJsonWriter::VmaJsonWriter(const VkAllocationCallbacks* pAllocationCallbacks, VmaStringBuilder& sb) :$/;"	f	class:VmaJsonWriter	signature:(const VkAllocationCallbacks* pAllocationCallbacks, VmaStringBuilder& sb)
VmaJsonWriter::WriteBool	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::WriteBool(bool b)$/;"	f	class:VmaJsonWriter	signature:(bool b)
VmaJsonWriter::WriteIndent	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::WriteIndent(bool oneLess)$/;"	f	class:VmaJsonWriter	signature:(bool oneLess)
VmaJsonWriter::WriteNull	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::WriteNull()$/;"	f	class:VmaJsonWriter	signature:()
VmaJsonWriter::WriteNumber	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::WriteNumber(uint32_t n)$/;"	f	class:VmaJsonWriter	signature:(uint32_t n)
VmaJsonWriter::WriteNumber	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::WriteNumber(uint64_t n)$/;"	f	class:VmaJsonWriter	signature:(uint64_t n)
VmaJsonWriter::WriteString	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::WriteString(const char* pStr)$/;"	f	class:VmaJsonWriter	signature:(const char* pStr)
VmaJsonWriter::m_InsideString	src/renderer/vulkan/vk_mem_alloc.h	/^    bool m_InsideString;$/;"	m	class:VmaJsonWriter	access:private
VmaJsonWriter::m_SB	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaStringBuilder& m_SB;$/;"	m	class:VmaJsonWriter	access:private
VmaJsonWriter::m_Stack	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector< StackItem, VmaStlAllocator<StackItem> > m_Stack;$/;"	m	class:VmaJsonWriter	access:private
VmaJsonWriter::~VmaJsonWriter	src/renderer/vulkan/vk_mem_alloc.h	/^VmaJsonWriter::~VmaJsonWriter()$/;"	f	class:VmaJsonWriter	signature:()
VmaList	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaList(const AllocatorT& allocator) : m_RawList(allocator.m_pCallbacks) { }$/;"	f	class:VmaList	access:public	signature:(const AllocatorT& allocator)
VmaList	src/renderer/vulkan/vk_mem_alloc.h	/^class VmaList$/;"	c
VmaList	src/renderer/vulkan/vk_mem_alloc.h	2596;"	d
VmaList::VmaList	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaList(const AllocatorT& allocator) : m_RawList(allocator.m_pCallbacks) { }$/;"	f	class:VmaList	access:public	signature:(const AllocatorT& allocator)
VmaList::begin	src/renderer/vulkan/vk_mem_alloc.h	/^    iterator begin() { return iterator(&m_RawList, m_RawList.Front()); }$/;"	f	class:VmaList	access:public	signature:()
VmaList::cbegin	src/renderer/vulkan/vk_mem_alloc.h	/^    const_iterator cbegin() const { return const_iterator(&m_RawList, m_RawList.Front()); }$/;"	f	class:VmaList	access:public	signature:() const
VmaList::cend	src/renderer/vulkan/vk_mem_alloc.h	/^    const_iterator cend() const { return const_iterator(&m_RawList, VMA_NULL); }$/;"	f	class:VmaList	access:public	signature:() const
VmaList::clear	src/renderer/vulkan/vk_mem_alloc.h	/^    void clear() { m_RawList.Clear(); }$/;"	f	class:VmaList	access:public	signature:()
VmaList::const_iterator	src/renderer/vulkan/vk_mem_alloc.h	/^    class const_iterator$/;"	c	class:VmaList	access:public
VmaList::const_iterator::const_iterator	src/renderer/vulkan/vk_mem_alloc.h	/^        const_iterator() :$/;"	f	class:VmaList::const_iterator	access:public	signature:()
VmaList::const_iterator::const_iterator	src/renderer/vulkan/vk_mem_alloc.h	/^        const_iterator(const VmaRawList<T>* pList, const VmaListItem<T>* pItem) :$/;"	f	class:VmaList::const_iterator	access:private	signature:(const VmaRawList<T>* pList, const VmaListItem<T>* pItem)
VmaList::const_iterator::const_iterator	src/renderer/vulkan/vk_mem_alloc.h	/^        const_iterator(const iterator& src) :$/;"	f	class:VmaList::const_iterator	access:public	signature:(const iterator& src)
VmaList::const_iterator::m_pItem	src/renderer/vulkan/vk_mem_alloc.h	/^        const VmaListItem<T>* m_pItem;$/;"	m	class:VmaList::const_iterator	access:private
VmaList::const_iterator::m_pList	src/renderer/vulkan/vk_mem_alloc.h	/^        const VmaRawList<T>* m_pList;$/;"	m	class:VmaList::const_iterator	access:private
VmaList::const_iterator::operator !=	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator!=(const const_iterator& rhs) const$/;"	f	class:VmaList::const_iterator	access:public	signature:(const const_iterator& rhs) const
VmaList::const_iterator::operator *	src/renderer/vulkan/vk_mem_alloc.h	/^        const T& operator*() const$/;"	f	class:VmaList::const_iterator	access:public	signature:() const
VmaList::const_iterator::operator ++	src/renderer/vulkan/vk_mem_alloc.h	/^        const_iterator operator++(int)$/;"	f	class:VmaList::const_iterator	access:public	signature:(int)
VmaList::const_iterator::operator ++	src/renderer/vulkan/vk_mem_alloc.h	/^        const_iterator& operator++()$/;"	f	class:VmaList::const_iterator	access:public	signature:()
VmaList::const_iterator::operator --	src/renderer/vulkan/vk_mem_alloc.h	/^        const_iterator operator--(int)$/;"	f	class:VmaList::const_iterator	access:public	signature:(int)
VmaList::const_iterator::operator --	src/renderer/vulkan/vk_mem_alloc.h	/^        const_iterator& operator--()$/;"	f	class:VmaList::const_iterator	access:public	signature:()
VmaList::const_iterator::operator ->	src/renderer/vulkan/vk_mem_alloc.h	/^        const T* operator->() const$/;"	f	class:VmaList::const_iterator	access:public	signature:() const
VmaList::const_iterator::operator ==	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator==(const const_iterator& rhs) const$/;"	f	class:VmaList::const_iterator	access:public	signature:(const const_iterator& rhs) const
VmaList::empty	src/renderer/vulkan/vk_mem_alloc.h	/^    bool empty() const { return m_RawList.IsEmpty(); }$/;"	f	class:VmaList	access:public	signature:() const
VmaList::end	src/renderer/vulkan/vk_mem_alloc.h	/^    iterator end() { return iterator(&m_RawList, VMA_NULL); }$/;"	f	class:VmaList	access:public	signature:()
VmaList::erase	src/renderer/vulkan/vk_mem_alloc.h	/^    void erase(iterator it) { m_RawList.Remove(it.m_pItem); }$/;"	f	class:VmaList	access:public	signature:(iterator it)
VmaList::insert	src/renderer/vulkan/vk_mem_alloc.h	/^    iterator insert(iterator it, const T& value) { return iterator(&m_RawList, m_RawList.InsertBefore(it.m_pItem, value)); }$/;"	f	class:VmaList	access:public	signature:(iterator it, const T& value)
VmaList::iterator	src/renderer/vulkan/vk_mem_alloc.h	/^    class iterator$/;"	c	class:VmaList	access:public
VmaList::iterator::iterator	src/renderer/vulkan/vk_mem_alloc.h	/^        iterator() :$/;"	f	class:VmaList::iterator	access:public	signature:()
VmaList::iterator::iterator	src/renderer/vulkan/vk_mem_alloc.h	/^        iterator(VmaRawList<T>* pList, VmaListItem<T>* pItem) :$/;"	f	class:VmaList::iterator	access:private	signature:(VmaRawList<T>* pList, VmaListItem<T>* pItem)
VmaList::iterator::m_pItem	src/renderer/vulkan/vk_mem_alloc.h	/^        VmaListItem<T>* m_pItem;$/;"	m	class:VmaList::iterator	access:private
VmaList::iterator::m_pList	src/renderer/vulkan/vk_mem_alloc.h	/^        VmaRawList<T>* m_pList;$/;"	m	class:VmaList::iterator	access:private
VmaList::iterator::operator !=	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator!=(const iterator& rhs) const$/;"	f	class:VmaList::iterator	access:public	signature:(const iterator& rhs) const
VmaList::iterator::operator *	src/renderer/vulkan/vk_mem_alloc.h	/^        T& operator*() const$/;"	f	class:VmaList::iterator	access:public	signature:() const
VmaList::iterator::operator ++	src/renderer/vulkan/vk_mem_alloc.h	/^        iterator operator++(int)$/;"	f	class:VmaList::iterator	access:public	signature:(int)
VmaList::iterator::operator ++	src/renderer/vulkan/vk_mem_alloc.h	/^        iterator& operator++()$/;"	f	class:VmaList::iterator	access:public	signature:()
VmaList::iterator::operator --	src/renderer/vulkan/vk_mem_alloc.h	/^        iterator operator--(int)$/;"	f	class:VmaList::iterator	access:public	signature:(int)
VmaList::iterator::operator --	src/renderer/vulkan/vk_mem_alloc.h	/^        iterator& operator--()$/;"	f	class:VmaList::iterator	access:public	signature:()
VmaList::iterator::operator ->	src/renderer/vulkan/vk_mem_alloc.h	/^        T* operator->() const$/;"	f	class:VmaList::iterator	access:public	signature:() const
VmaList::iterator::operator ==	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator==(const iterator& rhs) const$/;"	f	class:VmaList::iterator	access:public	signature:(const iterator& rhs) const
VmaList::m_RawList	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaRawList<T> m_RawList;$/;"	m	class:VmaList	access:private
VmaList::push_back	src/renderer/vulkan/vk_mem_alloc.h	/^    void push_back(const T& value) { m_RawList.PushBack(value); }$/;"	f	class:VmaList	access:public	signature:(const T& value)
VmaList::size	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t size() const { return m_RawList.GetCount(); }$/;"	f	class:VmaList	access:public	signature:() const
VmaListItem	src/renderer/vulkan/vk_mem_alloc.h	/^struct VmaListItem$/;"	s
VmaListItem::Value	src/renderer/vulkan/vk_mem_alloc.h	/^    T Value;$/;"	m	struct:VmaListItem	access:public
VmaListItem::pNext	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaListItem* pNext;$/;"	m	struct:VmaListItem	access:public
VmaListItem::pPrev	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaListItem* pPrev;$/;"	m	struct:VmaListItem	access:public
VmaMalloc	src/renderer/vulkan/vk_mem_alloc.h	/^static void* VmaMalloc(VmaAllocator hAllocator, size_t size, size_t alignment)$/;"	f	signature:(VmaAllocator hAllocator, size_t size, size_t alignment)
VmaMalloc	src/renderer/vulkan/vk_mem_alloc.h	/^static void* VmaMalloc(const VkAllocationCallbacks* pAllocationCallbacks, size_t size, size_t alignment)$/;"	f	signature:(const VkAllocationCallbacks* pAllocationCallbacks, size_t size, size_t alignment)
VmaMemoryUsage	src/renderer/vulkan/vk_mem_alloc.h	/^typedef enum VmaMemoryUsage$/;"	g
VmaMemoryUsage	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaMemoryUsage;$/;"	t	typeref:enum:VmaMemoryUsage
VmaMutex	src/renderer/vulkan/vk_mem_alloc.h	/^       VmaMutex() { }$/;"	f	class:VmaMutex	access:public	signature:()
VmaMutex	src/renderer/vulkan/vk_mem_alloc.h	/^   class VmaMutex$/;"	c
VmaMutex::Lock	src/renderer/vulkan/vk_mem_alloc.h	/^       void Lock() { m_Mutex.lock(); }$/;"	f	class:VmaMutex	access:public	signature:()
VmaMutex::Unlock	src/renderer/vulkan/vk_mem_alloc.h	/^       void Unlock() { m_Mutex.unlock(); }$/;"	f	class:VmaMutex	access:public	signature:()
VmaMutex::VmaMutex	src/renderer/vulkan/vk_mem_alloc.h	/^       VmaMutex() { }$/;"	f	class:VmaMutex	access:public	signature:()
VmaMutex::m_Mutex	src/renderer/vulkan/vk_mem_alloc.h	/^       std::mutex m_Mutex;$/;"	m	class:VmaMutex	access:private
VmaMutex::~VmaMutex	src/renderer/vulkan/vk_mem_alloc.h	/^       ~VmaMutex() { }$/;"	f	class:VmaMutex	access:public	signature:()
VmaMutexLock	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaMutexLock(VMA_MUTEX& mutex, bool useMutex) :$/;"	f	struct:VmaMutexLock	access:public	signature:(VMA_MUTEX& mutex, bool useMutex)
VmaMutexLock	src/renderer/vulkan/vk_mem_alloc.h	/^struct VmaMutexLock$/;"	s
VmaMutexLock::VmaMutexLock	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaMutexLock(VMA_MUTEX& mutex, bool useMutex) :$/;"	f	struct:VmaMutexLock	access:public	signature:(VMA_MUTEX& mutex, bool useMutex)
VmaMutexLock::m_pMutex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MUTEX* m_pMutex;$/;"	m	struct:VmaMutexLock	access:private
VmaMutexLock::~VmaMutexLock	src/renderer/vulkan/vk_mem_alloc.h	/^    ~VmaMutexLock()$/;"	f	struct:VmaMutexLock	access:public	signature:()
VmaPointerLess	src/renderer/vulkan/vk_mem_alloc.h	/^struct VmaPointerLess$/;"	s
VmaPointerLess::operator ()	src/renderer/vulkan/vk_mem_alloc.h	/^    bool operator()(const void* lhs, const void* rhs) const$/;"	f	struct:VmaPointerLess	access:public	signature:(const void* lhs, const void* rhs) const
VmaPoolAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^VmaPoolAllocator<T>::VmaPoolAllocator(const VkAllocationCallbacks* pAllocationCallbacks, size_t itemsPerBlock) :$/;"	f	class:VmaPoolAllocator	signature:(const VkAllocationCallbacks* pAllocationCallbacks, size_t itemsPerBlock)
VmaPoolAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^class VmaPoolAllocator$/;"	c
VmaPoolAllocator::Alloc	src/renderer/vulkan/vk_mem_alloc.h	/^T* VmaPoolAllocator<T>::Alloc()$/;"	f	class:VmaPoolAllocator	signature:()
VmaPoolAllocator::Clear	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaPoolAllocator<T>::Clear()$/;"	f	class:VmaPoolAllocator	signature:()
VmaPoolAllocator::CreateNewBlock	src/renderer/vulkan/vk_mem_alloc.h	/^typename VmaPoolAllocator<T>::ItemBlock& VmaPoolAllocator<T>::CreateNewBlock()$/;"	f	class:VmaPoolAllocator	signature:()
VmaPoolAllocator::Free	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaPoolAllocator<T>::Free(T* ptr)$/;"	f	class:VmaPoolAllocator	signature:(T* ptr)
VmaPoolAllocator::Item	src/renderer/vulkan/vk_mem_alloc.h	/^    union Item$/;"	u	class:VmaPoolAllocator	access:private
VmaPoolAllocator::Item::NextFreeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^        uint32_t NextFreeIndex;$/;"	m	union:VmaPoolAllocator::Item	access:public
VmaPoolAllocator::Item::Value	src/renderer/vulkan/vk_mem_alloc.h	/^        T Value;$/;"	m	union:VmaPoolAllocator::Item	access:public
VmaPoolAllocator::ItemBlock	src/renderer/vulkan/vk_mem_alloc.h	/^    struct ItemBlock$/;"	s	class:VmaPoolAllocator	access:private
VmaPoolAllocator::ItemBlock::FirstFreeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^        uint32_t FirstFreeIndex;$/;"	m	struct:VmaPoolAllocator::ItemBlock	access:public
VmaPoolAllocator::ItemBlock::pItems	src/renderer/vulkan/vk_mem_alloc.h	/^        Item* pItems;$/;"	m	struct:VmaPoolAllocator::ItemBlock	access:public
VmaPoolAllocator::VmaPoolAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^VmaPoolAllocator<T>::VmaPoolAllocator(const VkAllocationCallbacks* pAllocationCallbacks, size_t itemsPerBlock) :$/;"	f	class:VmaPoolAllocator	signature:(const VkAllocationCallbacks* pAllocationCallbacks, size_t itemsPerBlock)
VmaPoolAllocator::m_ItemBlocks	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector< ItemBlock, VmaStlAllocator<ItemBlock> > m_ItemBlocks;$/;"	m	class:VmaPoolAllocator	access:private
VmaPoolAllocator::m_ItemsPerBlock	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t m_ItemsPerBlock;$/;"	m	class:VmaPoolAllocator	access:private
VmaPoolAllocator::m_pAllocationCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkAllocationCallbacks* m_pAllocationCallbacks;$/;"	m	class:VmaPoolAllocator	access:private
VmaPoolAllocator::~VmaPoolAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^VmaPoolAllocator<T>::~VmaPoolAllocator()$/;"	f	class:VmaPoolAllocator	signature:()
VmaPoolCreateFlagBits	src/renderer/vulkan/vk_mem_alloc.h	/^typedef enum VmaPoolCreateFlagBits {$/;"	g
VmaPoolCreateFlagBits	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaPoolCreateFlagBits;$/;"	t	typeref:enum:VmaPoolCreateFlagBits
VmaPoolCreateFlags	src/renderer/vulkan/vk_mem_alloc.h	/^typedef VkFlags VmaPoolCreateFlags;$/;"	t
VmaPoolCreateInfo	src/renderer/vulkan/vk_mem_alloc.h	/^typedef struct VmaPoolCreateInfo {$/;"	s
VmaPoolCreateInfo	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaPoolCreateInfo;$/;"	t	typeref:struct:VmaPoolCreateInfo
VmaPoolCreateInfo::blockSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize blockSize;$/;"	m	struct:VmaPoolCreateInfo	access:public
VmaPoolCreateInfo::flags	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaPoolCreateFlags flags;$/;"	m	struct:VmaPoolCreateInfo	access:public
VmaPoolCreateInfo::frameInUseCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t frameInUseCount;$/;"	m	struct:VmaPoolCreateInfo	access:public
VmaPoolCreateInfo::maxBlockCount	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t maxBlockCount;$/;"	m	struct:VmaPoolCreateInfo	access:public
VmaPoolCreateInfo::memoryTypeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t memoryTypeIndex;$/;"	m	struct:VmaPoolCreateInfo	access:public
VmaPoolCreateInfo::minBlockCount	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t minBlockCount;$/;"	m	struct:VmaPoolCreateInfo	access:public
VmaPoolStats	src/renderer/vulkan/vk_mem_alloc.h	/^typedef struct VmaPoolStats {$/;"	s
VmaPoolStats	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaPoolStats;$/;"	t	typeref:struct:VmaPoolStats
VmaPoolStats::allocationCount	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t allocationCount;$/;"	m	struct:VmaPoolStats	access:public
VmaPoolStats::size	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize size;$/;"	m	struct:VmaPoolStats	access:public
VmaPoolStats::unusedRangeCount	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t unusedRangeCount;$/;"	m	struct:VmaPoolStats	access:public
VmaPoolStats::unusedRangeSizeMax	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize unusedRangeSizeMax;$/;"	m	struct:VmaPoolStats	access:public
VmaPoolStats::unusedSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize unusedSize;$/;"	m	struct:VmaPoolStats	access:public
VmaPool_T	src/renderer/vulkan/vk_mem_alloc.h	/^VmaPool_T::VmaPool_T($/;"	f	class:VmaPool_T	signature:( VmaAllocator hAllocator, const VmaPoolCreateInfo& createInfo)
VmaPool_T	src/renderer/vulkan/vk_mem_alloc.h	/^struct VmaPool_T$/;"	s
VmaPool_T::GetBlockVector	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaBlockVector& GetBlockVector() { return m_BlockVector; }$/;"	f	struct:VmaPool_T	access:public	signature:()
VmaPool_T::VmaPool_T	src/renderer/vulkan/vk_mem_alloc.h	/^VmaPool_T::VmaPool_T($/;"	f	class:VmaPool_T	signature:( VmaAllocator hAllocator, const VmaPoolCreateInfo& createInfo)
VmaPool_T::m_BlockVector	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaBlockVector m_BlockVector;$/;"	m	struct:VmaPool_T	access:public
VmaPool_T::~VmaPool_T	src/renderer/vulkan/vk_mem_alloc.h	/^VmaPool_T::~VmaPool_T()$/;"	f	class:VmaPool_T	signature:()
VmaPostprocessCalcStatInfo	src/renderer/vulkan/vk_mem_alloc.h	/^static void VmaPostprocessCalcStatInfo(VmaStatInfo& inoutInfo)$/;"	f	signature:(VmaStatInfo& inoutInfo)
VmaPrintStatInfo	src/renderer/vulkan/vk_mem_alloc.h	/^static void VmaPrintStatInfo(VmaJsonWriter& json, const VmaStatInfo& stat)$/;"	f	signature:(VmaJsonWriter& json, const VmaStatInfo& stat)
VmaPtrToStr	src/renderer/vulkan/vk_mem_alloc.h	/^   static inline void VmaPtrToStr(char* outStr, size_t strLen, const void* ptr)$/;"	f	signature:(char* outStr, size_t strLen, const void* ptr)
VmaQuickSort	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaQuickSort(Iterator beg, Iterator end, Compare cmp)$/;"	f	signature:(Iterator beg, Iterator end, Compare cmp)
VmaQuickSortPartition	src/renderer/vulkan/vk_mem_alloc.h	/^Iterator VmaQuickSortPartition(Iterator beg, Iterator end, Compare cmp)$/;"	f	signature:(Iterator beg, Iterator end, Compare cmp)
VmaRawList	src/renderer/vulkan/vk_mem_alloc.h	/^VmaRawList<T>::VmaRawList(const VkAllocationCallbacks* pAllocationCallbacks) :$/;"	f	class:VmaRawList	signature:(const VkAllocationCallbacks* pAllocationCallbacks)
VmaRawList	src/renderer/vulkan/vk_mem_alloc.h	/^class VmaRawList$/;"	c
VmaRawList::Back	src/renderer/vulkan/vk_mem_alloc.h	/^    ItemType* Back() { return m_pBack; }$/;"	f	class:VmaRawList	access:public	signature:()
VmaRawList::Back	src/renderer/vulkan/vk_mem_alloc.h	/^    const ItemType* Back() const { return m_pBack; }$/;"	f	class:VmaRawList	access:public	signature:() const
VmaRawList::Clear	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaRawList<T>::Clear()$/;"	f	class:VmaRawList	signature:()
VmaRawList::Front	src/renderer/vulkan/vk_mem_alloc.h	/^    ItemType* Front() { return m_pFront; }$/;"	f	class:VmaRawList	access:public	signature:()
VmaRawList::Front	src/renderer/vulkan/vk_mem_alloc.h	/^    const ItemType* Front() const { return m_pFront; }$/;"	f	class:VmaRawList	access:public	signature:() const
VmaRawList::GetCount	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t GetCount() const { return m_Count; }$/;"	f	class:VmaRawList	access:public	signature:() const
VmaRawList::InsertAfter	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::InsertAfter(ItemType* pItem)$/;"	f	class:VmaRawList	signature:(ItemType* pItem)
VmaRawList::InsertAfter	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::InsertAfter(ItemType* pItem, const T& value)$/;"	f	class:VmaRawList	signature:(ItemType* pItem, const T& value)
VmaRawList::InsertBefore	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::InsertBefore(ItemType* pItem)$/;"	f	class:VmaRawList	signature:(ItemType* pItem)
VmaRawList::InsertBefore	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::InsertBefore(ItemType* pItem, const T& value)$/;"	f	class:VmaRawList	signature:(ItemType* pItem, const T& value)
VmaRawList::IsEmpty	src/renderer/vulkan/vk_mem_alloc.h	/^    bool IsEmpty() const { return m_Count == 0; }$/;"	f	class:VmaRawList	access:public	signature:() const
VmaRawList::ItemType	src/renderer/vulkan/vk_mem_alloc.h	/^    typedef VmaListItem<T> ItemType;$/;"	t	class:VmaRawList	access:public
VmaRawList::PopBack	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaRawList<T>::PopBack()$/;"	f	class:VmaRawList	signature:()
VmaRawList::PopFront	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaRawList<T>::PopFront()$/;"	f	class:VmaRawList	signature:()
VmaRawList::PushBack	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::PushBack()$/;"	f	class:VmaRawList	signature:()
VmaRawList::PushBack	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::PushBack(const T& value)$/;"	f	class:VmaRawList	signature:(const T& value)
VmaRawList::PushFront	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::PushFront()$/;"	f	class:VmaRawList	signature:()
VmaRawList::PushFront	src/renderer/vulkan/vk_mem_alloc.h	/^VmaListItem<T>* VmaRawList<T>::PushFront(const T& value)$/;"	f	class:VmaRawList	signature:(const T& value)
VmaRawList::Remove	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaRawList<T>::Remove(ItemType* pItem)$/;"	f	class:VmaRawList	signature:(ItemType* pItem)
VmaRawList::VmaRawList	src/renderer/vulkan/vk_mem_alloc.h	/^VmaRawList<T>::VmaRawList(const VkAllocationCallbacks* pAllocationCallbacks) :$/;"	f	class:VmaRawList	signature:(const VkAllocationCallbacks* pAllocationCallbacks)
VmaRawList::m_Count	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t m_Count;$/;"	m	class:VmaRawList	access:private
VmaRawList::m_ItemAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaPoolAllocator<ItemType> m_ItemAllocator;$/;"	m	class:VmaRawList	access:private
VmaRawList::m_pAllocationCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkAllocationCallbacks* const m_pAllocationCallbacks;$/;"	m	class:VmaRawList	access:private
VmaRawList::m_pBack	src/renderer/vulkan/vk_mem_alloc.h	/^    ItemType* m_pBack;$/;"	m	class:VmaRawList	access:private
VmaRawList::m_pFront	src/renderer/vulkan/vk_mem_alloc.h	/^    ItemType* m_pFront;$/;"	m	class:VmaRawList	access:private
VmaRawList::~VmaRawList	src/renderer/vulkan/vk_mem_alloc.h	/^VmaRawList<T>::~VmaRawList()$/;"	f	class:VmaRawList	signature:()
VmaRoundDiv	src/renderer/vulkan/vk_mem_alloc.h	/^inline T VmaRoundDiv(T x, T y)$/;"	f	signature:(T x, T y)
VmaStatInfo	src/renderer/vulkan/vk_mem_alloc.h	/^typedef struct VmaStatInfo$/;"	s
VmaStatInfo	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaStatInfo;$/;"	t	typeref:struct:VmaStatInfo
VmaStatInfo::allocationCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t allocationCount;$/;"	m	struct:VmaStatInfo	access:public
VmaStatInfo::allocationSizeAvg	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize allocationSizeMin, allocationSizeAvg, allocationSizeMax;$/;"	m	struct:VmaStatInfo	access:public
VmaStatInfo::allocationSizeMax	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize allocationSizeMin, allocationSizeAvg, allocationSizeMax;$/;"	m	struct:VmaStatInfo	access:public
VmaStatInfo::allocationSizeMin	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize allocationSizeMin, allocationSizeAvg, allocationSizeMax;$/;"	m	struct:VmaStatInfo	access:public
VmaStatInfo::blockCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t blockCount;$/;"	m	struct:VmaStatInfo	access:public
VmaStatInfo::unusedBytes	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize unusedBytes;$/;"	m	struct:VmaStatInfo	access:public
VmaStatInfo::unusedRangeCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t unusedRangeCount;$/;"	m	struct:VmaStatInfo	access:public
VmaStatInfo::unusedRangeSizeAvg	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize unusedRangeSizeMin, unusedRangeSizeAvg, unusedRangeSizeMax;$/;"	m	struct:VmaStatInfo	access:public
VmaStatInfo::unusedRangeSizeMax	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize unusedRangeSizeMin, unusedRangeSizeAvg, unusedRangeSizeMax;$/;"	m	struct:VmaStatInfo	access:public
VmaStatInfo::unusedRangeSizeMin	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize unusedRangeSizeMin, unusedRangeSizeAvg, unusedRangeSizeMax;$/;"	m	struct:VmaStatInfo	access:public
VmaStatInfo::usedBytes	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize usedBytes;$/;"	m	struct:VmaStatInfo	access:public
VmaStats	src/renderer/vulkan/vk_mem_alloc.h	/^typedef struct VmaStats$/;"	s
VmaStats	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaStats;$/;"	t	typeref:struct:VmaStats
VmaStats::memoryHeap	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaStatInfo memoryHeap[VK_MAX_MEMORY_HEAPS];$/;"	m	struct:VmaStats	access:public
VmaStats::memoryType	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaStatInfo memoryType[VK_MAX_MEMORY_TYPES];$/;"	m	struct:VmaStats	access:public
VmaStats::total	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaStatInfo total;$/;"	m	struct:VmaStats	access:public
VmaStlAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaStlAllocator(const VkAllocationCallbacks* pCallbacks) : m_pCallbacks(pCallbacks) { }$/;"	f	class:VmaStlAllocator	access:public	signature:(const VkAllocationCallbacks* pCallbacks)
VmaStlAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^    template<typename U> VmaStlAllocator(const VmaStlAllocator<U>& src) : m_pCallbacks(src.m_pCallbacks) { }$/;"	f	class:VmaStlAllocator	access:public	signature:(const VmaStlAllocator<U>& src)
VmaStlAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^class VmaStlAllocator$/;"	c
VmaStlAllocator::VmaStlAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaStlAllocator(const VkAllocationCallbacks* pCallbacks) : m_pCallbacks(pCallbacks) { }$/;"	f	class:VmaStlAllocator	access:public	signature:(const VkAllocationCallbacks* pCallbacks)
VmaStlAllocator::VmaStlAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^    template<typename U> VmaStlAllocator(const VmaStlAllocator<U>& src) : m_pCallbacks(src.m_pCallbacks) { }$/;"	f	class:VmaStlAllocator	access:public	signature:(const VmaStlAllocator<U>& src)
VmaStlAllocator::allocate	src/renderer/vulkan/vk_mem_alloc.h	/^    T* allocate(size_t n) { return VmaAllocateArray<T>(m_pCallbacks, n); }$/;"	f	class:VmaStlAllocator	access:public	signature:(size_t n)
VmaStlAllocator::deallocate	src/renderer/vulkan/vk_mem_alloc.h	/^    void deallocate(T* p, size_t n) { VmaFree(m_pCallbacks, p); }$/;"	f	class:VmaStlAllocator	access:public	signature:(T* p, size_t n)
VmaStlAllocator::m_pCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkAllocationCallbacks* const m_pCallbacks;$/;"	m	class:VmaStlAllocator	access:public
VmaStlAllocator::operator !=	src/renderer/vulkan/vk_mem_alloc.h	/^    bool operator!=(const VmaStlAllocator<U>& rhs) const$/;"	f	class:VmaStlAllocator	access:public	signature:(const VmaStlAllocator<U>& rhs) const
VmaStlAllocator::operator ==	src/renderer/vulkan/vk_mem_alloc.h	/^    bool operator==(const VmaStlAllocator<U>& rhs) const$/;"	f	class:VmaStlAllocator	access:public	signature:(const VmaStlAllocator<U>& rhs) const
VmaStlAllocator::value_type	src/renderer/vulkan/vk_mem_alloc.h	/^    typedef T value_type;$/;"	t	class:VmaStlAllocator	access:public
VmaStlAllocator::x	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaStlAllocator& operator=(const VmaStlAllocator& x) = delete;$/;"	m	class:VmaStlAllocator	access:public
VmaStringBuilder	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaStringBuilder(VmaAllocator alloc) : m_Data(VmaStlAllocator<char>(alloc->GetAllocationCallbacks())) { }$/;"	f	class:VmaStringBuilder	access:public	signature:(VmaAllocator alloc)
VmaStringBuilder	src/renderer/vulkan/vk_mem_alloc.h	/^class VmaStringBuilder$/;"	c
VmaStringBuilder::Add	src/renderer/vulkan/vk_mem_alloc.h	/^    void Add(char ch) { m_Data.push_back(ch); }$/;"	f	class:VmaStringBuilder	access:public	signature:(char ch)
VmaStringBuilder::Add	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaStringBuilder::Add(const char* pStr)$/;"	f	class:VmaStringBuilder	signature:(const char* pStr)
VmaStringBuilder::AddNewLine	src/renderer/vulkan/vk_mem_alloc.h	/^    void AddNewLine() { Add('\\n'); }$/;"	f	class:VmaStringBuilder	access:public	signature:()
VmaStringBuilder::AddNumber	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaStringBuilder::AddNumber(uint32_t num)$/;"	f	class:VmaStringBuilder	signature:(uint32_t num)
VmaStringBuilder::AddNumber	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaStringBuilder::AddNumber(uint64_t num)$/;"	f	class:VmaStringBuilder	signature:(uint64_t num)
VmaStringBuilder::AddPointer	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaStringBuilder::AddPointer(const void* ptr)$/;"	f	class:VmaStringBuilder	signature:(const void* ptr)
VmaStringBuilder::GetData	src/renderer/vulkan/vk_mem_alloc.h	/^    const char* GetData() const { return m_Data.data(); }$/;"	f	class:VmaStringBuilder	access:public	signature:() const
VmaStringBuilder::GetLength	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t GetLength() const { return m_Data.size(); }$/;"	f	class:VmaStringBuilder	access:public	signature:() const
VmaStringBuilder::VmaStringBuilder	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaStringBuilder(VmaAllocator alloc) : m_Data(VmaStlAllocator<char>(alloc->GetAllocationCallbacks())) { }$/;"	f	class:VmaStringBuilder	access:public	signature:(VmaAllocator alloc)
VmaStringBuilder::m_Data	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector< char, VmaStlAllocator<char> > m_Data;$/;"	m	class:VmaStringBuilder	access:private
VmaSuballocation	src/renderer/vulkan/vk_mem_alloc.h	/^struct VmaSuballocation$/;"	s
VmaSuballocation::hAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaAllocation hAllocation;$/;"	m	struct:VmaSuballocation	access:public
VmaSuballocation::offset	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize offset;$/;"	m	struct:VmaSuballocation	access:public
VmaSuballocation::size	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize size;$/;"	m	struct:VmaSuballocation	access:public
VmaSuballocation::type	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaSuballocationType type;$/;"	m	struct:VmaSuballocation	access:public
VmaSuballocationItemSizeLess	src/renderer/vulkan/vk_mem_alloc.h	/^struct VmaSuballocationItemSizeLess$/;"	s
VmaSuballocationItemSizeLess::operator ()	src/renderer/vulkan/vk_mem_alloc.h	/^    bool operator()($/;"	f	struct:VmaSuballocationItemSizeLess	access:public	signature:( const VmaSuballocationList::iterator lhs, VkDeviceSize rhsSize) const
VmaSuballocationItemSizeLess::operator ()	src/renderer/vulkan/vk_mem_alloc.h	/^    bool operator()($/;"	f	struct:VmaSuballocationItemSizeLess	access:public	signature:( const VmaSuballocationList::iterator lhs, const VmaSuballocationList::iterator rhs) const
VmaSuballocationList	src/renderer/vulkan/vk_mem_alloc.h	/^typedef VmaList< VmaSuballocation, VmaStlAllocator<VmaSuballocation> > VmaSuballocationList;$/;"	t
VmaSuballocationType	src/renderer/vulkan/vk_mem_alloc.h	/^enum VmaSuballocationType$/;"	g
VmaUint32ToStr	src/renderer/vulkan/vk_mem_alloc.h	/^   static inline void VmaUint32ToStr(char* outStr, size_t strLen, uint32_t num)$/;"	f	signature:(char* outStr, size_t strLen, uint32_t num)
VmaUint64ToStr	src/renderer/vulkan/vk_mem_alloc.h	/^   static inline void VmaUint64ToStr(char* outStr, size_t strLen, uint64_t num)$/;"	f	signature:(char* outStr, size_t strLen, uint64_t num)
VmaVector	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector(const AllocatorT& allocator) :$/;"	f	class:VmaVector	access:public	signature:(const AllocatorT& allocator)
VmaVector	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector(const VmaVector<T, AllocatorT>& src) :$/;"	f	class:VmaVector	access:public	signature:(const VmaVector<T, AllocatorT>& src)
VmaVector	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector(size_t count, const AllocatorT& allocator) :$/;"	f	class:VmaVector	access:public	signature:(size_t count, const AllocatorT& allocator)
VmaVector	src/renderer/vulkan/vk_mem_alloc.h	/^class VmaVector$/;"	c
VmaVector	src/renderer/vulkan/vk_mem_alloc.h	2184;"	d
VmaVector::VmaVector	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector(const AllocatorT& allocator) :$/;"	f	class:VmaVector	access:public	signature:(const AllocatorT& allocator)
VmaVector::VmaVector	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector(const VmaVector<T, AllocatorT>& src) :$/;"	f	class:VmaVector	access:public	signature:(const VmaVector<T, AllocatorT>& src)
VmaVector::VmaVector	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector(size_t count, const AllocatorT& allocator) :$/;"	f	class:VmaVector	access:public	signature:(size_t count, const AllocatorT& allocator)
VmaVector::back	src/renderer/vulkan/vk_mem_alloc.h	/^    T& back()$/;"	f	class:VmaVector	access:public	signature:()
VmaVector::back	src/renderer/vulkan/vk_mem_alloc.h	/^    const T& back() const$/;"	f	class:VmaVector	access:public	signature:() const
VmaVector::begin	src/renderer/vulkan/vk_mem_alloc.h	/^    iterator begin() { return m_pArray; }$/;"	f	class:VmaVector	access:public	signature:()
VmaVector::clear	src/renderer/vulkan/vk_mem_alloc.h	/^    void clear(bool freeMemory = false)$/;"	f	class:VmaVector	access:public	signature:(bool freeMemory = false)
VmaVector::data	src/renderer/vulkan/vk_mem_alloc.h	/^    T* data() { return m_pArray; }$/;"	f	class:VmaVector	access:public	signature:()
VmaVector::data	src/renderer/vulkan/vk_mem_alloc.h	/^    const T* data() const { return m_pArray; }$/;"	f	class:VmaVector	access:public	signature:() const
VmaVector::empty	src/renderer/vulkan/vk_mem_alloc.h	/^    bool empty() const { return m_Count == 0; }$/;"	f	class:VmaVector	access:public	signature:() const
VmaVector::end	src/renderer/vulkan/vk_mem_alloc.h	/^    iterator end() { return m_pArray + m_Count; }$/;"	f	class:VmaVector	access:public	signature:()
VmaVector::front	src/renderer/vulkan/vk_mem_alloc.h	/^    T& front()$/;"	f	class:VmaVector	access:public	signature:()
VmaVector::front	src/renderer/vulkan/vk_mem_alloc.h	/^    const T& front() const$/;"	f	class:VmaVector	access:public	signature:() const
VmaVector::insert	src/renderer/vulkan/vk_mem_alloc.h	/^    void insert(size_t index, const T& src)$/;"	f	class:VmaVector	access:public	signature:(size_t index, const T& src)
VmaVector::iterator	src/renderer/vulkan/vk_mem_alloc.h	/^    typedef T* iterator;$/;"	t	class:VmaVector	access:public
VmaVector::m_Allocator	src/renderer/vulkan/vk_mem_alloc.h	/^    AllocatorT m_Allocator;$/;"	m	class:VmaVector	access:private
VmaVector::m_Capacity	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t m_Capacity;$/;"	m	class:VmaVector	access:private
VmaVector::m_Count	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t m_Count;$/;"	m	class:VmaVector	access:private
VmaVector::m_pArray	src/renderer/vulkan/vk_mem_alloc.h	/^    T* m_pArray;$/;"	m	class:VmaVector	access:private
VmaVector::operator =	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector& operator=(const VmaVector<T, AllocatorT>& rhs)$/;"	f	class:VmaVector	access:public	signature:(const VmaVector<T, AllocatorT>& rhs)
VmaVector::operator []	src/renderer/vulkan/vk_mem_alloc.h	/^    T& operator[](size_t index)$/;"	f	class:VmaVector	access:public	signature:(size_t index)
VmaVector::operator []	src/renderer/vulkan/vk_mem_alloc.h	/^    const T& operator[](size_t index) const$/;"	f	class:VmaVector	access:public	signature:(size_t index) const
VmaVector::pop_back	src/renderer/vulkan/vk_mem_alloc.h	/^    void pop_back()$/;"	f	class:VmaVector	access:public	signature:()
VmaVector::pop_front	src/renderer/vulkan/vk_mem_alloc.h	/^    void pop_front()$/;"	f	class:VmaVector	access:public	signature:()
VmaVector::push_back	src/renderer/vulkan/vk_mem_alloc.h	/^    void push_back(const T& src)$/;"	f	class:VmaVector	access:public	signature:(const T& src)
VmaVector::push_front	src/renderer/vulkan/vk_mem_alloc.h	/^    void push_front(const T& src)$/;"	f	class:VmaVector	access:public	signature:(const T& src)
VmaVector::remove	src/renderer/vulkan/vk_mem_alloc.h	/^    void remove(size_t index)$/;"	f	class:VmaVector	access:public	signature:(size_t index)
VmaVector::reserve	src/renderer/vulkan/vk_mem_alloc.h	/^    void reserve(size_t newCapacity, bool freeMemory = false)$/;"	f	class:VmaVector	access:public	signature:(size_t newCapacity, bool freeMemory = false)
VmaVector::resize	src/renderer/vulkan/vk_mem_alloc.h	/^    void resize(size_t newCount, bool freeMemory = false)$/;"	f	class:VmaVector	access:public	signature:(size_t newCount, bool freeMemory = false)
VmaVector::size	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t size() const { return m_Count; }$/;"	f	class:VmaVector	access:public	signature:() const
VmaVector::value_type	src/renderer/vulkan/vk_mem_alloc.h	/^    typedef T value_type;$/;"	t	class:VmaVector	access:public
VmaVector::~VmaVector	src/renderer/vulkan/vk_mem_alloc.h	/^    ~VmaVector()$/;"	f	class:VmaVector	access:public	signature:()
VmaVectorFindSorted	src/renderer/vulkan/vk_mem_alloc.h	/^size_t VmaVectorFindSorted(const VectorT& vector, const typename VectorT::value_type& value)$/;"	f	signature:(const VectorT& vector, const typename VectorT::value_type& value)
VmaVectorInsert	src/renderer/vulkan/vk_mem_alloc.h	/^static void VmaVectorInsert(VmaVector<T, allocatorT>& vec, size_t index, const T& item)$/;"	f	signature:(VmaVector<T, allocatorT>& vec, size_t index, const T& item)
VmaVectorInsert	src/renderer/vulkan/vk_mem_alloc.h	/^static void VmaVectorInsert(std::vector<T, allocatorT>& vec, size_t index, const T& item)$/;"	f	signature:(std::vector<T, allocatorT>& vec, size_t index, const T& item)
VmaVectorInsertSorted	src/renderer/vulkan/vk_mem_alloc.h	/^size_t VmaVectorInsertSorted(VectorT& vector, const typename VectorT::value_type& value)$/;"	f	signature:(VectorT& vector, const typename VectorT::value_type& value)
VmaVectorRemove	src/renderer/vulkan/vk_mem_alloc.h	/^static void VmaVectorRemove(VmaVector<T, allocatorT>& vec, size_t index)$/;"	f	signature:(VmaVector<T, allocatorT>& vec, size_t index)
VmaVectorRemove	src/renderer/vulkan/vk_mem_alloc.h	/^static void VmaVectorRemove(std::vector<T, allocatorT>& vec, size_t index)$/;"	f	signature:(std::vector<T, allocatorT>& vec, size_t index)
VmaVectorRemoveSorted	src/renderer/vulkan/vk_mem_alloc.h	/^bool VmaVectorRemoveSorted(VectorT& vector, const typename VectorT::value_type& value)$/;"	f	signature:(VectorT& vector, const typename VectorT::value_type& value)
VmaVulkanFunctions	src/renderer/vulkan/vk_mem_alloc.h	/^typedef struct VmaVulkanFunctions {$/;"	s
VmaVulkanFunctions	src/renderer/vulkan/vk_mem_alloc.h	/^} VmaVulkanFunctions;$/;"	t	typeref:struct:VmaVulkanFunctions
VmaVulkanFunctions::vkAllocateMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkAllocateMemory vkAllocateMemory;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkBindBufferMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkBindBufferMemory vkBindBufferMemory;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkBindImageMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkBindImageMemory vkBindImageMemory;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkCreateBuffer	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkCreateBuffer vkCreateBuffer;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkCreateImage	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkCreateImage vkCreateImage;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkDestroyBuffer	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkDestroyBuffer vkDestroyBuffer;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkDestroyImage	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkDestroyImage vkDestroyImage;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkFreeMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkFreeMemory vkFreeMemory;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkGetBufferMemoryRequirements	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkGetBufferMemoryRequirements vkGetBufferMemoryRequirements;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkGetBufferMemoryRequirements2KHR	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkGetBufferMemoryRequirements2KHR vkGetBufferMemoryRequirements2KHR;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkGetImageMemoryRequirements	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkGetImageMemoryRequirements vkGetImageMemoryRequirements;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkGetImageMemoryRequirements2KHR	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkGetImageMemoryRequirements2KHR vkGetImageMemoryRequirements2KHR;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkGetPhysicalDeviceMemoryProperties	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkGetPhysicalDeviceMemoryProperties vkGetPhysicalDeviceMemoryProperties;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkGetPhysicalDeviceProperties	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkGetPhysicalDeviceProperties vkGetPhysicalDeviceProperties;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkMapMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkMapMemory vkMapMemory;$/;"	m	struct:VmaVulkanFunctions	access:public
VmaVulkanFunctions::vkUnmapMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkUnmapMemory vkUnmapMemory;$/;"	m	struct:VmaVulkanFunctions	access:public
Width	src/renderer/GameTexture.hpp	/^    const int Width()  const { return m_width; }$/;"	f	class:GameTexture	access:public	signature:() const
WindowSize	src/renderer/RenderContext.cpp	/^Math::Vector2f RenderContext::WindowSize()$/;"	f	class:RenderContext	signature:()
WriteBool	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::WriteBool(bool b)$/;"	f	class:VmaJsonWriter	signature:(bool b)
WriteIndent	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::WriteIndent(bool oneLess)$/;"	f	class:VmaJsonWriter	signature:(bool oneLess)
WriteNull	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::WriteNull()$/;"	f	class:VmaJsonWriter	signature:()
WriteNumber	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::WriteNumber(uint32_t n)$/;"	f	class:VmaJsonWriter	signature:(uint32_t n)
WriteNumber	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::WriteNumber(uint64_t n)$/;"	f	class:VmaJsonWriter	signature:(uint64_t n)
WriteString	src/renderer/vulkan/vk_mem_alloc.h	/^void VmaJsonWriter::WriteString(const char* pStr)$/;"	f	class:VmaJsonWriter	signature:(const char* pStr)
YCbCr_to_RGB_row	src/renderer/stb_image.c	/^static void YCbCr_to_RGB_row(uint8 *out, const uint8 *y, const uint8 *pcb, const uint8 *pcr, int count, int step)$/;"	f	file:	signature:(uint8 *out, const uint8 *y, const uint8 *pcb, const uint8 *pcr, int count, int step)
ZFAST_BITS	src/renderer/stb_image.c	1685;"	d	file:
ZFAST_MASK	src/renderer/stb_image.c	1686;"	d	file:
Zero	src/Math.cpp	/^    void Matrix4f::Zero()$/;"	f	class:Math::Matrix4f	signature:()
__anon10::length	src/renderer/stb_image.c	/^   uint32 length;$/;"	m	struct:__anon10	file:	access:public
__anon10::type	src/renderer/stb_image.c	/^   uint32 type;$/;"	m	struct:__anon10	file:	access:public
__anon11::expanded	src/renderer/stb_image.c	/^   uint8 *idata, *expanded, *out;$/;"	m	struct:__anon11	file:	access:public
__anon11::idata	src/renderer/stb_image.c	/^   uint8 *idata, *expanded, *out;$/;"	m	struct:__anon11	file:	access:public
__anon11::out	src/renderer/stb_image.c	/^   uint8 *idata, *expanded, *out;$/;"	m	struct:__anon11	file:	access:public
__anon11::s	src/renderer/stb_image.c	/^   stbi *s;$/;"	m	struct:__anon11	file:	access:public
__anon13::channel	src/renderer/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon13	file:	access:public
__anon13::size	src/renderer/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon13	file:	access:public
__anon13::type	src/renderer/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon13	file:	access:public
__anon15::eof	src/renderer/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon15	access:public
__anon15::read	src/renderer/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read $/;"	m	struct:__anon15	access:public
__anon15::skip	src/renderer/stb_image.h	/^   void     (*skip)  (void *user,unsigned n);            \/\/ skip the next 'n' bytes$/;"	m	struct:__anon15	access:public
__anon2::buffer_start	src/renderer/stb_image.c	/^   uint8 buffer_start[128];$/;"	m	struct:__anon2	file:	access:public
__anon2::buflen	src/renderer/stb_image.c	/^   int buflen;$/;"	m	struct:__anon2	file:	access:public
__anon2::img_buffer	src/renderer/stb_image.c	/^   uint8 *img_buffer, *img_buffer_end;$/;"	m	struct:__anon2	file:	access:public
__anon2::img_buffer_end	src/renderer/stb_image.c	/^   uint8 *img_buffer, *img_buffer_end;$/;"	m	struct:__anon2	file:	access:public
__anon2::img_buffer_original	src/renderer/stb_image.c	/^   uint8 *img_buffer_original;$/;"	m	struct:__anon2	file:	access:public
__anon2::img_n	src/renderer/stb_image.c	/^   int img_n, img_out_n;$/;"	m	struct:__anon2	file:	access:public
__anon2::img_out_n	src/renderer/stb_image.c	/^   int img_n, img_out_n;$/;"	m	struct:__anon2	file:	access:public
__anon2::img_x	src/renderer/stb_image.c	/^   uint32 img_x, img_y;$/;"	m	struct:__anon2	file:	access:public
__anon2::img_y	src/renderer/stb_image.c	/^   uint32 img_x, img_y;$/;"	m	struct:__anon2	file:	access:public
__anon2::io	src/renderer/stb_image.c	/^   stbi_io_callbacks io;$/;"	m	struct:__anon2	file:	access:public
__anon2::io_user_data	src/renderer/stb_image.c	/^   void *io_user_data;$/;"	m	struct:__anon2	file:	access:public
__anon2::read_from_callbacks	src/renderer/stb_image.c	/^   int read_from_callbacks;$/;"	m	struct:__anon2	file:	access:public
__anon4::code	src/renderer/stb_image.c	/^   uint16 code[256];$/;"	m	struct:__anon4	file:	access:public
__anon4::delta	src/renderer/stb_image.c	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon4	file:	access:public
__anon4::fast	src/renderer/stb_image.c	/^   uint8  fast[1 << FAST_BITS];$/;"	m	struct:__anon4	file:	access:public
__anon4::maxcode	src/renderer/stb_image.c	/^   unsigned int maxcode[18];$/;"	m	struct:__anon4	file:	access:public
__anon4::size	src/renderer/stb_image.c	/^   uint8  size[257];$/;"	m	struct:__anon4	file:	access:public
__anon4::values	src/renderer/stb_image.c	/^   uint8  values[256];$/;"	m	struct:__anon4	file:	access:public
__anon5::__anon6::data	src/renderer/stb_image.c	/^      uint8 *data;$/;"	m	struct:__anon5::__anon6	file:	access:public
__anon5::__anon6::dc_pred	src/renderer/stb_image.c	/^      int dc_pred;$/;"	m	struct:__anon5::__anon6	file:	access:public
__anon5::__anon6::h	src/renderer/stb_image.c	/^      int h,v;$/;"	m	struct:__anon5::__anon6	file:	access:public
__anon5::__anon6::h2	src/renderer/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon5::__anon6	file:	access:public
__anon5::__anon6::ha	src/renderer/stb_image.c	/^      int hd,ha;$/;"	m	struct:__anon5::__anon6	file:	access:public
__anon5::__anon6::hd	src/renderer/stb_image.c	/^      int hd,ha;$/;"	m	struct:__anon5::__anon6	file:	access:public
__anon5::__anon6::id	src/renderer/stb_image.c	/^      int id;$/;"	m	struct:__anon5::__anon6	file:	access:public
__anon5::__anon6::linebuf	src/renderer/stb_image.c	/^      uint8 *linebuf;$/;"	m	struct:__anon5::__anon6	file:	access:public
__anon5::__anon6::raw_data	src/renderer/stb_image.c	/^      void *raw_data;$/;"	m	struct:__anon5::__anon6	file:	access:public
__anon5::__anon6::tq	src/renderer/stb_image.c	/^      int tq;$/;"	m	struct:__anon5::__anon6	file:	access:public
__anon5::__anon6::v	src/renderer/stb_image.c	/^      int h,v;$/;"	m	struct:__anon5::__anon6	file:	access:public
__anon5::__anon6::w2	src/renderer/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon5::__anon6	file:	access:public
__anon5::__anon6::x	src/renderer/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon5::__anon6	file:	access:public
__anon5::__anon6::y	src/renderer/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon5::__anon6	file:	access:public
__anon5::code_bits	src/renderer/stb_image.c	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon5	file:	access:public
__anon5::code_buffer	src/renderer/stb_image.c	/^   uint32         code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon5	file:	access:public
__anon5::dequant	src/renderer/stb_image.c	/^   uint8 dequant[4][64];$/;"	m	struct:__anon5	file:	access:public
__anon5::dequant2	src/renderer/stb_image.c	/^   unsigned short dequant2[4][64];$/;"	m	struct:__anon5	file:	access:public
__anon5::huff_ac	src/renderer/stb_image.c	/^   huffman huff_ac[4];$/;"	m	struct:__anon5	file:	access:public
__anon5::huff_dc	src/renderer/stb_image.c	/^   huffman huff_dc[4];$/;"	m	struct:__anon5	file:	access:public
__anon5::img_comp	src/renderer/stb_image.c	/^   } img_comp[4];$/;"	m	struct:__anon5	typeref:struct:__anon5::__anon6	file:	access:public
__anon5::img_h_max	src/renderer/stb_image.c	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon5	file:	access:public
__anon5::img_mcu_h	src/renderer/stb_image.c	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon5	file:	access:public
__anon5::img_mcu_w	src/renderer/stb_image.c	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon5	file:	access:public
__anon5::img_mcu_x	src/renderer/stb_image.c	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon5	file:	access:public
__anon5::img_mcu_y	src/renderer/stb_image.c	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon5	file:	access:public
__anon5::img_v_max	src/renderer/stb_image.c	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon5	file:	access:public
__anon5::marker	src/renderer/stb_image.c	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon5	file:	access:public
__anon5::nomore	src/renderer/stb_image.c	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon5	file:	access:public
__anon5::order	src/renderer/stb_image.c	/^   int scan_n, order[4];$/;"	m	struct:__anon5	file:	access:public
__anon5::restart_interval	src/renderer/stb_image.c	/^   int restart_interval, todo;$/;"	m	struct:__anon5	file:	access:public
__anon5::s	src/renderer/stb_image.c	/^   stbi *s;$/;"	m	struct:__anon5	file:	access:public
__anon5::scan_n	src/renderer/stb_image.c	/^   int scan_n, order[4];$/;"	m	struct:__anon5	file:	access:public
__anon5::todo	src/renderer/stb_image.c	/^   int restart_interval, todo;$/;"	m	struct:__anon5	file:	access:public
__anon7::hs	src/renderer/stb_image.c	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon7	file:	access:public
__anon7::line0	src/renderer/stb_image.c	/^   uint8 *line0,*line1;$/;"	m	struct:__anon7	file:	access:public
__anon7::line1	src/renderer/stb_image.c	/^   uint8 *line0,*line1;$/;"	m	struct:__anon7	file:	access:public
__anon7::resample	src/renderer/stb_image.c	/^   resample_row_func resample;$/;"	m	struct:__anon7	file:	access:public
__anon7::vs	src/renderer/stb_image.c	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon7	file:	access:public
__anon7::w_lores	src/renderer/stb_image.c	/^   int w_lores; \/\/ horizontal pixels pre-expansion $/;"	m	struct:__anon7	file:	access:public
__anon7::ypos	src/renderer/stb_image.c	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon7	file:	access:public
__anon7::ystep	src/renderer/stb_image.c	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon7	file:	access:public
__anon8::fast	src/renderer/stb_image.c	/^   uint16 fast[1 << ZFAST_BITS];$/;"	m	struct:__anon8	file:	access:public
__anon8::firstcode	src/renderer/stb_image.c	/^   uint16 firstcode[16];$/;"	m	struct:__anon8	file:	access:public
__anon8::firstsymbol	src/renderer/stb_image.c	/^   uint16 firstsymbol[16];$/;"	m	struct:__anon8	file:	access:public
__anon8::maxcode	src/renderer/stb_image.c	/^   int maxcode[17];$/;"	m	struct:__anon8	file:	access:public
__anon8::size	src/renderer/stb_image.c	/^   uint8  size[288];$/;"	m	struct:__anon8	file:	access:public
__anon8::value	src/renderer/stb_image.c	/^   uint16 value[288]; $/;"	m	struct:__anon8	file:	access:public
__anon9::code_buffer	src/renderer/stb_image.c	/^   uint32 code_buffer;$/;"	m	struct:__anon9	file:	access:public
__anon9::num_bits	src/renderer/stb_image.c	/^   int num_bits;$/;"	m	struct:__anon9	file:	access:public
__anon9::z_distance	src/renderer/stb_image.c	/^   zhuffman z_length, z_distance;$/;"	m	struct:__anon9	file:	access:public
__anon9::z_expandable	src/renderer/stb_image.c	/^   int   z_expandable;$/;"	m	struct:__anon9	file:	access:public
__anon9::z_length	src/renderer/stb_image.c	/^   zhuffman z_length, z_distance;$/;"	m	struct:__anon9	file:	access:public
__anon9::zbuffer	src/renderer/stb_image.c	/^   uint8 *zbuffer, *zbuffer_end;$/;"	m	struct:__anon9	file:	access:public
__anon9::zbuffer_end	src/renderer/stb_image.c	/^   uint8 *zbuffer, *zbuffer_end;$/;"	m	struct:__anon9	file:	access:public
__anon9::zout	src/renderer/stb_image.c	/^   char *zout;$/;"	m	struct:__anon9	file:	access:public
__anon9::zout_end	src/renderer/stb_image.c	/^   char *zout_end;$/;"	m	struct:__anon9	file:	access:public
__anon9::zout_start	src/renderer/stb_image.c	/^   char *zout_start;$/;"	m	struct:__anon9	file:	access:public
allocate	src/renderer/vulkan/vk_mem_alloc.h	/^    T* allocate(size_t n) { return VmaAllocateArray<T>(m_pCallbacks, n); }$/;"	f	class:VmaStlAllocator	access:public	signature:(size_t n)
allocation	src/renderer/vulkan/Buffers.hpp	/^        VmaAllocation allocation = VK_NULL_HANDLE;$/;"	m	struct:vk::Buffer	access:public
allocation	src/renderer/vulkan/Image.hpp	/^        VmaAllocation allocation = VK_NULL_HANDLE;$/;"	m	struct:vk::Texture	access:public
allocationCount	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t allocationCount;$/;"	m	struct:VmaPoolStats	access:public
allocationCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t allocationCount;$/;"	m	struct:VmaStatInfo	access:public
allocationSizeAvg	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize allocationSizeMin, allocationSizeAvg, allocationSizeMax;$/;"	m	struct:VmaStatInfo	access:public
allocationSizeMax	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize allocationSizeMin, allocationSizeAvg, allocationSizeMax;$/;"	m	struct:VmaStatInfo	access:public
allocationSizeMin	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize allocationSizeMin, allocationSizeAvg, allocationSizeMax;$/;"	m	struct:VmaStatInfo	access:public
allocationsMoved	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t allocationsMoved;$/;"	m	struct:VmaDefragmentationStats	access:public
allocator	src/renderer/vulkan/Base.hpp	/^        VmaAllocator     allocator = VK_NULL_HANDLE;$/;"	m	struct:vk::Device	access:public
ambient	src/q3bsp/Q3Bsp.hpp	/^    unsigned char ambient[3];$/;"	m	struct:Q3BspLightVolLump	access:public
area	src/q3bsp/Q3Bsp.hpp	/^    int   area;$/;"	m	struct:Q3BspLeafLump	access:public
at_eof	src/renderer/stb_image.c	/^stbi_inline static int at_eof(stbi *s)$/;"	f	file:	signature:(stbi *s)
attributeDescriptions	src/renderer/vulkan/Buffers.hpp	/^        std::vector<VkVertexInputAttributeDescription> attributeDescriptions;$/;"	m	struct:vk::VertexBufferInfo	access:public
back	src/renderer/vulkan/vk_mem_alloc.h	/^    T& back()$/;"	f	class:VmaVector	access:public	signature:()
back	src/renderer/vulkan/vk_mem_alloc.h	/^    const T& back() const$/;"	f	class:VmaVector	access:public	signature:() const
begin	src/renderer/vulkan/vk_mem_alloc.h	/^    iterator begin() { return iterator(&m_RawList, m_RawList.Front()); }$/;"	f	class:VmaList	access:public	signature:()
begin	src/renderer/vulkan/vk_mem_alloc.h	/^    iterator begin() { return m_pArray; }$/;"	f	class:VmaVector	access:public	signature:()
beginOneTimeCommand	src/renderer/vulkan/CmdBuffer.cpp	/^    VkCommandBuffer beginOneTimeCommand(const Device &device, const VkCommandPool &commandPool)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool)
bgindex	src/renderer/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
bindingDescriptions	src/renderer/vulkan/Buffers.hpp	/^        std::vector<VkVertexInputBindingDescription> bindingDescriptions;$/;"	m	struct:vk::VertexBufferInfo	access:public
bit_reverse	src/renderer/stb_image.c	/^stbi_inline static int bit_reverse(int v, int bits)$/;"	f	file:	signature:(int v, int bits)
bitcount	src/renderer/stb_image.c	/^static int bitcount(unsigned int a)$/;"	f	file:	signature:(unsigned int a)
bitreverse16	src/renderer/stb_image.c	/^stbi_inline static int bitreverse16(int n)$/;"	f	file:	signature:(int n)
blendMode	src/renderer/vulkan/Pipeline.hpp	/^        VkBlendFactor blendMode = VK_BLEND_FACTOR_ZERO;$/;"	m	struct:vk::Pipeline	access:public
blockCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t blockCount;$/;"	m	struct:VmaStatInfo	access:public
blockSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize blockSize;$/;"	m	struct:VmaPoolCreateInfo	access:public
bmask	src/renderer/stb_image.c	/^static uint32 bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v	file:
bmp_load	src/renderer/stb_image.c	/^static stbi_uc *bmp_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
bmp_test	src/renderer/stb_image.c	/^static int bmp_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
bottom	src/renderer/RenderContext.hpp	/^    float bottom = 0.f;$/;"	m	class:RenderContext	access:public
boundingBoxVertices	src/q3bsp/Q3BspRenderHelpers.hpp	/^    Math::Vector3f boundingBoxVertices[8];$/;"	m	struct:Q3LeafRenderable	access:public
brush	src/q3bsp/Q3Bsp.hpp	/^    int   brush;$/;"	m	struct:Q3BspModelLump	access:public
brush	src/q3bsp/Q3Bsp.hpp	/^    int  brush;$/;"	m	struct:Q3BspEffectLump	access:public
brush	src/q3bsp/Q3Bsp.hpp	/^    int brush;$/;"	m	struct:Q3BspLeafBrushLump	access:public
brushSide	src/q3bsp/Q3Bsp.hpp	/^    int brushSide;$/;"	m	struct:Q3BspBrushLump	access:public
brushSides	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspBrushSideLump> brushSides;$/;"	m	class:Q3BspMap	access:public
brushes	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspBrushLump>     brushes;$/;"	m	class:Q3BspMap	access:public
buffer	src/renderer/vulkan/Buffers.hpp	/^        VkBuffer      buffer     = VK_NULL_HANDLE;$/;"	m	struct:vk::Buffer	access:public
buffer_start	src/renderer/stb_image.c	/^   uint8 buffer_start[128];$/;"	m	struct:__anon2	file:	access:public
buflen	src/renderer/stb_image.c	/^   int buflen;$/;"	m	struct:__anon2	file:	access:public
build_huffman	src/renderer/stb_image.c	/^static int build_huffman(huffman *h, int *count)$/;"	f	file:	signature:(huffman *h, int *count)
bytesFreed	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize bytesFreed;$/;"	m	struct:VmaDefragmentationStats	access:public
bytesMoved	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize bytesMoved;$/;"	m	struct:VmaDefragmentationStats	access:public
callVkF	src/renderer/vulkan/Base.hpp	17;"	d
cbegin	src/renderer/vulkan/vk_mem_alloc.h	/^    const_iterator cbegin() const { return const_iterator(&m_RawList, m_RawList.Front()); }$/;"	f	class:VmaList	access:public	signature:() const
cend	src/renderer/vulkan/vk_mem_alloc.h	/^    const_iterator cend() const { return const_iterator(&m_RawList, VMA_NULL); }$/;"	f	class:VmaList	access:public	signature:() const
channel	src/renderer/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon13	file:	access:public
check_png_header	src/renderer/stb_image.c	/^static int check_png_header(stbi *s)$/;"	f	file:	signature:(stbi *s)
children	src/q3bsp/Q3Bsp.hpp	/^    vec2i children;$/;"	m	struct:Q3BspNodeLump	access:public
chunk	src/renderer/stb_image.c	/^} chunk;$/;"	t	typeref:struct:__anon10	file:
clamp	src/renderer/stb_image.c	/^stbi_inline static uint8 clamp(int x)$/;"	f	file:	signature:(int x)
cleanup_jpeg	src/renderer/stb_image.c	/^static void cleanup_jpeg(jpeg *j)$/;"	f	file:	signature:(jpeg *j)
clear	src/renderer/vulkan/vk_mem_alloc.h	/^    void clear() { m_RawList.Clear(); }$/;"	f	class:VmaList	access:public	signature:()
clear	src/renderer/vulkan/vk_mem_alloc.h	/^    void clear(bool freeMemory = false)$/;"	f	class:VmaVector	access:public	signature:(bool freeMemory = false)
cluster	src/q3bsp/Q3Bsp.hpp	/^    int   cluster;$/;"	m	struct:Q3BspLeafLump	access:public
code	src/renderer/stb_image.c	/^   uint16 code[256];$/;"	m	struct:__anon4	file:	access:public
code_bits	src/renderer/stb_image.c	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon5	file:	access:public
code_buffer	src/renderer/stb_image.c	/^   uint32         code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon5	file:	access:public
code_buffer	src/renderer/stb_image.c	/^   uint32 code_buffer;$/;"	m	struct:__anon9	file:	access:public
codes	src/renderer/stb_image.c	/^   stbi_gif_lzw codes[4096];$/;"	m	struct:stbi_gif_struct	file:	access:public
color	src/q3bsp/Q3Bsp.hpp	/^    unsigned char color[4];$/;"	m	struct:Q3BspVertexLump	access:public
color	src/renderer/Font.hpp	/^        float color[3];$/;"	m	struct:Font::GlyphVertex	access:public
colorLoadOp	src/renderer/vulkan/Pipeline.hpp	/^        VkAttachmentLoadOp colorLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR;$/;"	m	struct:vk::RenderPass	access:public
color_table	src/renderer/stb_image.c	/^   uint8 *color_table;$/;"	m	struct:stbi_gif_struct	file:	access:public
compute_huffman_codes	src/renderer/stb_image.c	/^static int compute_huffman_codes(zbuf *a)$/;"	f	file:	signature:(zbuf *a)
compute_transparency	src/renderer/stb_image.c	/^static int compute_transparency(png *z, uint8 tc[3], int out_n)$/;"	f	file:	signature:(png *z, uint8 tc[3], int out_n)
compute_y	src/renderer/stb_image.c	/^static uint8 compute_y(int r, int g, int b)$/;"	f	file:	signature:(int r, int g, int b)
const_iterator	src/renderer/vulkan/vk_mem_alloc.h	/^        const_iterator() :$/;"	f	class:VmaList::const_iterator	access:public	signature:()
const_iterator	src/renderer/vulkan/vk_mem_alloc.h	/^        const_iterator(const VmaRawList<T>* pList, const VmaListItem<T>* pItem) :$/;"	f	class:VmaList::const_iterator	access:private	signature:(const VmaRawList<T>* pList, const VmaListItem<T>* pItem)
const_iterator	src/renderer/vulkan/vk_mem_alloc.h	/^        const_iterator(const iterator& src) :$/;"	f	class:VmaList::const_iterator	access:public	signature:(const iterator& src)
const_iterator	src/renderer/vulkan/vk_mem_alloc.h	/^    class const_iterator$/;"	c	class:VmaList	access:public
contents	src/q3bsp/Q3Bsp.hpp	/^    int  contents;$/;"	m	struct:Q3BspTextureLump	access:public
controlPoints	src/q3bsp/Q3BspPatch.hpp	/^    Q3BspVertexLump              controlPoints[9];$/;"	m	class:Q3BspBiquadPatch	access:public
convert_format	src/renderer/stb_image.c	/^static unsigned char *convert_format(unsigned char *data, int img_n, int req_comp, uint x, uint y)$/;"	f	file:	signature:(unsigned char *data, int img_n, int req_comp, uint x, uint y)
copyBuffer	src/renderer/vulkan/Buffers.cpp	/^    void copyBuffer(const Device &device, const VkCommandPool &commandPool, const VkBuffer &src, VkBuffer &dst, VkDeviceSize size)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, const VkBuffer &src, VkBuffer &dst, VkDeviceSize size)
copyBufferToImage	src/renderer/vulkan/Image.cpp	/^    void copyBufferToImage(const Device &device, const VkCommandPool &commandPool, const VkBuffer &buffer, const VkImage &image, uint32_t width, uint32_t height)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, const VkBuffer &buffer, const VkImage &image, uint32_t width, uint32_t height)
createAllocator	src/renderer/vulkan/Base.cpp	/^    VkResult createAllocator(const Device &device, VmaAllocator *allocator)$/;"	f	namespace:vk	signature:(const Device &device, VmaAllocator *allocator)
createBuffer	src/renderer/vulkan/Buffers.cpp	/^    VkResult createBuffer(const Device &device, VkDeviceSize size, Buffer *dstBuffer, const BufferOptions &bOpts)$/;"	f	namespace:vk	signature:(const Device &device, VkDeviceSize size, Buffer *dstBuffer, const BufferOptions &bOpts)
createCommandBuffers	src/renderer/vulkan/CmdBuffer.cpp	/^    VkResult createCommandBuffers(const Device &device, const VkCommandPool &commandPool, CmdBufferList &commandBuffers, size_t fbCount)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, CmdBufferList &commandBuffers, size_t fbCount)
createCommandPool	src/renderer/vulkan/CmdBuffer.cpp	/^    VkResult createCommandPool(const Device &device, VkCommandPool *commandPool)$/;"	f	namespace:vk	signature:(const Device &device, VkCommandPool *commandPool)
createDepthBuffer	src/renderer/vulkan/Image.cpp	/^    Texture createDepthBuffer(const Device &device, const SwapChain &swapChain, const VkCommandPool &commandPool)$/;"	f	namespace:vk	signature:(const Device &device, const SwapChain &swapChain, const VkCommandPool &commandPool)
createDescriptorSet	src/renderer/vulkan/Base.cpp	/^    VkResult createDescriptorSet(const Device &device, Descriptor *descriptor)$/;"	f	namespace:vk	signature:(const Device &device, Descriptor *descriptor)
createDevice	src/renderer/vulkan/Device.cpp	/^    Device createDevice(const VkInstance &instance, const VkSurfaceKHR &surface)$/;"	f	namespace:vk	signature:(const VkInstance &instance, const VkSurfaceKHR &surface)
createImage	src/renderer/vulkan/Image.cpp	/^    VkResult createImage(const Device &device, uint32_t width, uint32_t height, VkFormat format, VkImageTiling tiling, VkImageUsageFlags usage, VkMemoryPropertyFlags properties, Texture *texture)$/;"	f	namespace:vk	signature:(const Device &device, uint32_t width, uint32_t height, VkFormat format, VkImageTiling tiling, VkImageUsageFlags usage, VkMemoryPropertyFlags properties, Texture *texture)
createImageView	src/renderer/vulkan/Image.cpp	/^    VkResult createImageView(const Device &device, const VkImage &image, VkImageAspectFlags aspectFlags, VkImageView *imageView, VkFormat format)$/;"	f	namespace:vk	signature:(const Device &device, const VkImage &image, VkImageAspectFlags aspectFlags, VkImageView *imageView, VkFormat format)
createIndexBuffer	src/renderer/vulkan/Buffers.cpp	/^    void createIndexBuffer(const Device &device, const VkCommandPool &commandPool, const void *data, VkDeviceSize size, Buffer *dstBuffer)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, const void *data, VkDeviceSize size, Buffer *dstBuffer)
createInstance	src/renderer/vulkan/Base.cpp	/^    VkResult createInstance(SDL_Window *window, VkInstance *instance, const char *title)$/;"	f	namespace:vk	signature:(SDL_Window *window, VkInstance *instance, const char *title)
createLogicalDevice	src/renderer/vulkan/Device.cpp	/^    VkResult createLogicalDevice(Device *device)$/;"	f	namespace:vk	signature:(Device *device)
createPipeline	src/renderer/vulkan/Pipeline.cpp	/^    VkResult createPipeline(const Device &device, const SwapChain &swapChain, const RenderPass &renderPass, const VkDescriptorSetLayout &descriptorLayout, const VertexBufferInfo *vbInfo, Pipeline *pipeline, const char **shaders)$/;"	f	namespace:vk	signature:(const Device &device, const SwapChain &swapChain, const RenderPass &renderPass, const VkDescriptorSetLayout &descriptorLayout, const VertexBufferInfo *vbInfo, Pipeline *pipeline, const char **shaders)
createRenderPass	src/renderer/vulkan/Pipeline.cpp	/^    VkResult createRenderPass(const Device &device, const SwapChain &swapChain, RenderPass *renderPass)$/;"	f	namespace:vk	signature:(const Device &device, const SwapChain &swapChain, RenderPass *renderPass)
createShaderModule	src/renderer/vulkan/Pipeline.cpp	/^    static VkShaderModule createShaderModule(const Device &device, const uint32_t *shaderSrc, size_t codeSize)$/;"	f	namespace:vk	signature:(const Device &device, const uint32_t *shaderSrc, size_t codeSize)
createStagingBuffer	src/renderer/vulkan/Buffers.cpp	/^    VkResult createStagingBuffer(const Device &device, VkDeviceSize size, Buffer *dstBuffer)$/;"	f	namespace:vk	signature:(const Device &device, VkDeviceSize size, Buffer *dstBuffer)
createSwapChain	src/renderer/vulkan/Device.cpp	/^    VkResult createSwapChain(const Device &device, const VkSurfaceKHR &surface, SwapChain *swapChain, VkSwapchainKHR oldSwapchain)$/;"	f	namespace:vk	signature:(const Device &device, const VkSurfaceKHR &surface, SwapChain *swapChain, VkSwapchainKHR oldSwapchain)
createTexture	src/renderer/vulkan/Image.cpp	/^    void createTexture(const Device &device, const VkCommandPool &commandPool, Texture *dstTex, const unsigned char *data, uint32_t width, uint32_t height)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, Texture *dstTex, const unsigned char *data, uint32_t width, uint32_t height)
createTextureImage	src/renderer/vulkan/Image.cpp	/^    void createTextureImage(const Device &device, const VkCommandPool &commandPool, Texture *dstTex, const unsigned char *data, uint32_t width, uint32_t height)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, Texture *dstTex, const unsigned char *data, uint32_t width, uint32_t height)
createTextureSampler	src/renderer/vulkan/Image.cpp	/^    VkResult createTextureSampler(const Device &device, Texture *texture)$/;"	f	namespace:vk	signature:(const Device &device, Texture *texture)
createUniformBuffer	src/renderer/vulkan/Buffers.cpp	/^    VkResult createUniformBuffer(const Device &device, VkDeviceSize size, Buffer *dstBuffer)$/;"	f	namespace:vk	signature:(const Device &device, VkDeviceSize size, Buffer *dstBuffer)
createValidationLayers	src/renderer/vulkan/Validation.cpp	/^    void createValidationLayers(const VkInstance &instance)$/;"	f	namespace:vk	signature:(const VkInstance &instance)
createVertexBuffer	src/renderer/vulkan/Buffers.cpp	/^    void createVertexBuffer(const Device &device, const VkCommandPool &commandPool, const void *data, VkDeviceSize size, Buffer *dstBuffer)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, const void *data, VkDeviceSize size, Buffer *dstBuffer)
create_png_image	src/renderer/stb_image.c	/^static int create_png_image(png *a, uint8 *raw, uint32 raw_len, int out_n, int interlaced)$/;"	f	file:	signature:(png *a, uint8 *raw, uint32 raw_len, int out_n, int interlaced)
create_png_image_raw	src/renderer/stb_image.c	/^static int create_png_image_raw(png *a, uint8 *raw, uint32 raw_len, int out_n, uint32 x, uint32 y)$/;"	f	file:	signature:(png *a, uint8 *raw, uint32 raw_len, int out_n, uint32 x, uint32 y)
cullMode	src/renderer/vulkan/Pipeline.hpp	/^        VkCullModeFlags cullMode = VK_CULL_MODE_BACK_BIT;$/;"	m	struct:vk::Pipeline	access:public
cur_x	src/renderer/stb_image.c	/^   int cur_x, cur_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
cur_y	src/renderer/stb_image.c	/^   int cur_x, cur_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
data	src/renderer/stb_image.c	/^      uint8 *data;$/;"	m	struct:__anon5::__anon6	file:	access:public
data	src/renderer/vulkan/vk_mem_alloc.h	/^    T* data() { return m_pArray; }$/;"	f	class:VmaVector	access:public	signature:()
data	src/renderer/vulkan/vk_mem_alloc.h	/^    const T* data() const { return m_pArray; }$/;"	f	class:VmaVector	access:public	signature:() const
dc_pred	src/renderer/stb_image.c	/^      int dc_pred;$/;"	m	struct:__anon5::__anon6	file:	access:public
deallocate	src/renderer/vulkan/vk_mem_alloc.h	/^    void deallocate(T* p, size_t n) { VmaFree(m_pCallbacks, p); }$/;"	f	class:VmaStlAllocator	access:public	signature:(T* p, size_t n)
debugCallback	src/renderer/vulkan/Validation.cpp	/^static VKAPI_ATTR VkBool32 VKAPI_CALL debugCallback(VkDebugReportFlagsEXT flags,$/;"	f	file:	signature:(VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objType, uint64_t obj, size_t location, int32_t code, const char* layerPrefix, const char* msg, void* userData)
decode	src/renderer/stb_image.c	/^stbi_inline static int decode(jpeg *j, huffman *h)$/;"	f	file:	signature:(jpeg *j, huffman *h)
decode_block	src/renderer/stb_image.c	/^static int decode_block(jpeg *j, short data[64], huffman *hdc, huffman *hac, int b)$/;"	f	file:	signature:(jpeg *j, short data[64], huffman *hdc, huffman *hac, int b)
decode_jpeg_header	src/renderer/stb_image.c	/^static int decode_jpeg_header(jpeg *z, int scan)$/;"	f	file:	signature:(jpeg *z, int scan)
decode_jpeg_image	src/renderer/stb_image.c	/^static int decode_jpeg_image(jpeg *j)$/;"	f	file:	signature:(jpeg *j)
default_distance	src/renderer/stb_image.c	/^static uint8 default_length[288], default_distance[32];$/;"	v	file:
default_length	src/renderer/stb_image.c	/^static uint8 default_length[288], default_distance[32];$/;"	v	file:
delta	src/renderer/stb_image.c	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon4	file:	access:public
depthTestEnable	src/renderer/vulkan/Pipeline.hpp	/^        VkBool32 depthTestEnable = VK_TRUE;$/;"	m	struct:vk::Pipeline	access:public
dequant	src/renderer/stb_image.c	/^   uint8 dequant[4][64];$/;"	m	struct:__anon5	file:	access:public
dequant2	src/renderer/stb_image.c	/^   unsigned short dequant2[4][64];$/;"	m	struct:__anon5	file:	access:public
descriptor	src/q3bsp/Q3BspRenderHelpers.hpp	/^    vk::Descriptor descriptor;$/;"	m	struct:FaceBuffers	access:public
destroyAllocator	src/renderer/vulkan/Base.cpp	/^    void destroyAllocator(VmaAllocator &allocator)$/;"	f	namespace:vk	signature:(VmaAllocator &allocator)
destroyPipeline	src/renderer/vulkan/Pipeline.cpp	/^    void destroyPipeline(const Device &device, Pipeline &pipeline)$/;"	f	namespace:vk	signature:(const Device &device, Pipeline &pipeline)
destroyRenderPass	src/renderer/vulkan/Pipeline.cpp	/^    void destroyRenderPass(const Device &device, RenderPass &renderPass)$/;"	f	namespace:vk	signature:(const Device &device, RenderPass &renderPass)
destroyValidationLayers	src/renderer/vulkan/Validation.cpp	/^    void destroyValidationLayers(const VkInstance &instance)$/;"	f	namespace:vk	signature:(const VkInstance &instance)
devExtensions	src/renderer/vulkan/Device.cpp	/^    static std::vector<const char *> devExtensions = { VK_KHR_SWAPCHAIN_EXTENSION_NAME };$/;"	m	namespace:vk	file:
device	src/renderer/RenderContext.hpp	/^    vk::Device device;$/;"	m	class:RenderContext	access:public
device	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDevice device;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
deviceExtensionsSupported	src/renderer/vulkan/Device.cpp	/^    bool deviceExtensionsSupported(const VkPhysicalDevice &device, const char **requested, size_t count)$/;"	f	namespace:vk	signature:(const VkPhysicalDevice &device, const char **requested, size_t count)
deviceMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceMemory deviceMemory;$/;"	m	struct:VmaAllocationInfo	access:public
deviceMemoryBlocksFreed	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t deviceMemoryBlocksFreed;$/;"	m	struct:VmaDefragmentationStats	access:public
dezigzag	src/renderer/stb_image.c	/^static uint8 dezigzag[64+15] =$/;"	v	file:
dir	src/q3bsp/Q3Bsp.hpp	/^    unsigned char dir[2];$/;"	m	struct:Q3BspLightVolLump	access:public
directional	src/q3bsp/Q3Bsp.hpp	/^    unsigned char directional[3];$/;"	m	struct:Q3BspLightVolLump	access:public
direntries	src/q3bsp/Q3Bsp.hpp	/^    Q3BspDirEntry direntries[17];$/;"	m	struct:Q3BspHeader	access:public
dist	src/q3bsp/Q3Bsp.hpp	/^    float dist;$/;"	m	struct:Q3BspPlaneLump	access:public
dist_base	src/renderer/stb_image.c	/^static int dist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v	file:
dist_extra	src/renderer/stb_image.c	/^static int dist_extra[32] =$/;"	v	file:
div16	src/renderer/stb_image.c	1439;"	d	file:
div4	src/renderer/stb_image.c	1390;"	d	file:
do_png	src/renderer/stb_image.c	/^static unsigned char *do_png(png *p, int *x, int *y, int *n, int req_comp)$/;"	f	file:	signature:(png *p, int *x, int *y, int *n, int req_comp)
do_zlib	src/renderer/stb_image.c	/^static int do_zlib(zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f	file:	signature:(zbuf *a, char *obuf, int olen, int exp, int parse_header)
e	src/renderer/stb_image.c	/^static int e(const char *str)$/;"	f	file:	signature:(const char *str)
e	src/renderer/stb_image.c	247;"	d	file:
e	src/renderer/stb_image.c	249;"	d	file:
e	src/renderer/stb_image.c	251;"	d	file:
effect	src/q3bsp/Q3Bsp.hpp	/^    int   effect;$/;"	m	struct:Q3BspFaceLump	access:public
effects	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspEffectLump>    effects;$/;"	m	class:Q3BspMap	access:public
eflags	src/renderer/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
empty	src/renderer/vulkan/vk_mem_alloc.h	/^    bool empty() const { return m_Count == 0; }$/;"	f	class:VmaVector	access:public	signature:() const
empty	src/renderer/vulkan/vk_mem_alloc.h	/^    bool empty() const { return m_RawList.IsEmpty(); }$/;"	f	class:VmaList	access:public	signature:() const
end	src/renderer/vulkan/vk_mem_alloc.h	/^    iterator end() { return iterator(&m_RawList, VMA_NULL); }$/;"	f	class:VmaList	access:public	signature:()
end	src/renderer/vulkan/vk_mem_alloc.h	/^    iterator end() { return m_pArray + m_Count; }$/;"	f	class:VmaVector	access:public	signature:()
endOneTimeCommand	src/renderer/vulkan/CmdBuffer.cpp	/^    void endOneTimeCommand(const Device &device, const VkCommandBuffer &commandBuffer, const VkCommandPool &commandPool, const VkQueue &graphicsQueue)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandBuffer &commandBuffer, const VkCommandPool &commandPool, const VkQueue &graphicsQueue)
entities	src/q3bsp/Q3BspMap.hpp	/^    Q3BspEntityLump entities;$/;"	m	class:Q3BspMap	access:public
ents	src/q3bsp/Q3Bsp.hpp	/^    char *ents;$/;"	m	struct:Q3BspEntityLump	access:public
eof	src/renderer/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon15	access:public
epf	src/renderer/stb_image.c	254;"	d	file:
epuc	src/renderer/stb_image.c	255;"	d	file:
erase	src/renderer/vulkan/vk_mem_alloc.h	/^    void erase(iterator it) { m_RawList.Remove(it.m_pItem); }$/;"	f	class:VmaList	access:public	signature:(iterator it)
expand	src/renderer/stb_image.c	/^static int expand(zbuf *z, int n)  \/\/ need to make room for n bytes$/;"	f	file:	signature:(zbuf *z, int n)
expand_palette	src/renderer/stb_image.c	/^static int expand_palette(png *a, uint8 *palette, int len, int pal_img_n)$/;"	f	file:	signature:(png *a, uint8 *palette, int len, int pal_img_n)
expanded	src/renderer/stb_image.c	/^   uint8 *idata, *expanded, *out;$/;"	m	struct:__anon11	file:	access:public
extend_receive	src/renderer/stb_image.c	/^stbi_inline static int extend_receive(jpeg *j, int n)$/;"	f	file:	signature:(jpeg *j, int n)
extent	src/renderer/vulkan/Device.hpp	/^        VkExtent2D extent = { 0, 0 };$/;"	m	struct:vk::SwapChain	access:public
f2f	src/renderer/stb_image.c	937;"	d	file:
face	src/q3bsp/Q3Bsp.hpp	/^    int   face;$/;"	m	struct:Q3BspModelLump	access:public
face	src/q3bsp/Q3Bsp.hpp	/^    int face;$/;"	m	struct:Q3BspLeafFaceLump	access:public
faces	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspFaceLump>      faces;$/;"	m	class:Q3BspMap	access:public
failure_reason	src/renderer/stb_image.c	/^static const char *failure_reason;$/;"	v	file:
farPlane	src/renderer/RenderContext.hpp	/^    float farPlane  = 1000.f;$/;"	m	class:RenderContext	access:public
fast	src/renderer/stb_image.c	/^   uint16 fast[1 << ZFAST_BITS];$/;"	m	struct:__anon8	file:	access:public
fast	src/renderer/stb_image.c	/^   uint8  fast[1 << FAST_BITS];$/;"	m	struct:__anon4	file:	access:public
features	build/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
fill_bits	src/renderer/stb_image.c	/^static void fill_bits(zbuf *z)$/;"	f	file:	signature:(zbuf *z)
first	src/renderer/stb_image.c	/^   uint8 first;$/;"	m	struct:stbi_gif_lzw_struct	file:	access:public
firstFace	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int firstFace  = 0;$/;"	m	struct:Q3LeafRenderable	access:public
first_row_filter	src/renderer/stb_image.c	/^static uint8 first_row_filter[5] =$/;"	v	file:
firstcode	src/renderer/stb_image.c	/^   uint16 firstcode[16];$/;"	m	struct:__anon8	file:	access:public
firstsymbol	src/renderer/stb_image.c	/^   uint16 firstsymbol[16];$/;"	m	struct:__anon8	file:	access:public
flags	src/q3bsp/Q3Bsp.hpp	/^    int  flags;$/;"	m	struct:Q3BspTextureLump	access:public
flags	src/renderer/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
flags	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaAllocationCreateFlags flags;$/;"	m	struct:VmaAllocationCreateInfo	access:public
flags	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaAllocatorCreateFlags flags;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
flags	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaPoolCreateFlags flags;$/;"	m	struct:VmaPoolCreateInfo	access:public
float2fixed	src/renderer/stb_image.c	1476;"	d	file:
float2int	src/renderer/stb_image.c	629;"	d	file:
format	src/renderer/vulkan/Device.hpp	/^        VkFormat format = VK_FORMAT_UNDEFINED;$/;"	m	struct:vk::SwapChain	access:public
format	src/renderer/vulkan/Image.hpp	/^        VkFormat  format    = VK_FORMAT_R8G8B8A8_UNORM;$/;"	m	struct:vk::Texture	access:public
formatCount	src/renderer/vulkan/Device.cpp	/^        uint32_t formatCount = 0;$/;"	m	struct:vk::SwapChainInfo	file:	access:public
formats	src/renderer/vulkan/Device.cpp	/^        VkSurfaceFormatKHR *formats = nullptr;$/;"	m	struct:vk::SwapChainInfo	file:	access:public
fov	src/renderer/RenderContext.hpp	/^    float fov = 75.f * PIdiv180;$/;"	m	class:RenderContext	access:public
fragShader	src/renderer/vulkan/Pipeline.cpp	/^        VkShaderModule fragShader = VK_NULL_HANDLE;$/;"	m	struct:vk::ShaderProgram	file:	access:public
frameBuffers	src/renderer/RenderContext.hpp	/^    std::vector<VkFramebuffer> frameBuffers;$/;"	m	class:RenderContext	access:public
frameInUseCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t frameInUseCount;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
frameInUseCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t frameInUseCount;$/;"	m	struct:VmaPoolCreateInfo	access:public
freeBuffer	src/renderer/vulkan/Buffers.cpp	/^    void freeBuffer(const Device &device, Buffer &buffer)$/;"	f	namespace:vk	signature:(const Device &device, Buffer &buffer)
freeCommandBuffers	src/renderer/vulkan/CmdBuffer.cpp	/^    void freeCommandBuffers(const Device &device, const VkCommandPool &commandPool, CmdBufferList &commandBuffers)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, CmdBufferList &commandBuffers)
front	src/renderer/vulkan/vk_mem_alloc.h	/^    T& front()$/;"	f	class:VmaVector	access:public	signature:()
front	src/renderer/vulkan/vk_mem_alloc.h	/^    const T& front() const$/;"	f	class:VmaVector	access:public	signature:() const
fsh	src/renderer/stb_image.c	938;"	d	file:
gDebugGlobalMutex	src/renderer/vulkan/vk_mem_alloc.h	/^    static VMA_MUTEX gDebugGlobalMutex;$/;"	v
g_application	src/main.cpp	/^Application    g_application;$/;"	v
g_cameraDirector	src/main.cpp	/^CameraDirector g_cameraDirector;$/;"	v
g_fps	src/main.cpp	/^int g_fps = 1;$/;"	v
g_renderContext	src/main.cpp	/^RenderContext  g_renderContext;$/;"	v
get16	src/renderer/stb_image.c	/^static int get16(stbi *s)$/;"	f	file:	signature:(stbi *s)
get16le	src/renderer/stb_image.c	/^static int get16le(stbi *s)$/;"	f	file:	signature:(stbi *s)
get32	src/renderer/stb_image.c	/^static uint32 get32(stbi *s)$/;"	f	file:	signature:(stbi *s)
get32le	src/renderer/stb_image.c	/^static uint32 get32le(stbi *s)$/;"	f	file:	signature:(stbi *s)
get8	src/renderer/stb_image.c	/^stbi_inline static int get8(stbi *s)$/;"	f	file:	signature:(stbi *s)
get8u	src/renderer/stb_image.c	/^stbi_inline static uint8 get8u(stbi *s)$/;"	f	file:	signature:(stbi *s)
getAttributeDescription	src/renderer/vulkan/Buffers.cpp	/^    VkVertexInputAttributeDescription getAttributeDescription(uint32_t location, VkFormat format, uint32_t offset)$/;"	f	namespace:vk	signature:(uint32_t location, VkFormat format, uint32_t offset)
getBestPhysicalDevice	src/renderer/vulkan/Device.cpp	/^    VkPhysicalDevice getBestPhysicalDevice(const VkPhysicalDevice *devices, size_t count, const VkSurfaceKHR &surface, Device *device)$/;"	f	namespace:vk	signature:(const VkPhysicalDevice *devices, size_t count, const VkSurfaceKHR &surface, Device *device)
getBindingDescription	src/renderer/vulkan/Buffers.cpp	/^    VkVertexInputBindingDescription getBindingDescription(uint32_t stride)$/;"	f	namespace:vk	signature:(uint32_t stride)
getSwapChainInfo	src/renderer/vulkan/Device.cpp	/^    void getSwapChainInfo(VkPhysicalDevice device, const VkSurfaceKHR &surface, SwapChainInfo *scInfo)$/;"	f	namespace:vk	signature:(VkPhysicalDevice device, const VkSurfaceKHR &surface, SwapChainInfo *scInfo)
getSwapExtent	src/renderer/vulkan/Device.cpp	/^    void getSwapExtent(const SwapChainInfo &scInfo, VkExtent2D *swapExtent, const VkExtent2D &currentSize)$/;"	f	namespace:vk	signature:(const SwapChainInfo &scInfo, VkExtent2D *swapExtent, const VkExtent2D &currentSize)
getSwapPresentMode	src/renderer/vulkan/Device.cpp	/^    void getSwapPresentMode(const SwapChainInfo &scInfo, VkPresentModeKHR *presentMode)$/;"	f	namespace:vk	signature:(const SwapChainInfo &scInfo, VkPresentModeKHR *presentMode)
getSwapSurfaceFormat	src/renderer/vulkan/Device.cpp	/^    void getSwapSurfaceFormat(const SwapChainInfo &scInfo, VkSurfaceFormatKHR *surfaceFormat)$/;"	f	namespace:vk	signature:(const SwapChainInfo &scInfo, VkSurfaceFormatKHR *surfaceFormat)
get_chunk_header	src/renderer/stb_image.c	/^static chunk get_chunk_header(stbi *s)$/;"	f	file:	signature:(stbi *s)
get_marker	src/renderer/stb_image.c	/^static uint8 get_marker(jpeg *j)$/;"	f	file:	signature:(jpeg *j)
getn	src/renderer/stb_image.c	/^static int getn(stbi *s, stbi_uc *buffer, int n)$/;"	f	file:	signature:(stbi *s, stbi_uc *buffer, int n)
gif_test	src/renderer/stb_image.c	/^static int gif_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
graphicsQueue	src/renderer/vulkan/Base.hpp	/^        VkQueue graphicsQueue = VK_NULL_HANDLE;$/;"	m	struct:vk::Device	access:public
grow_buffer_unsafe	src/renderer/stb_image.c	/^static void grow_buffer_unsafe(jpeg *j)$/;"	f	file:	signature:(jpeg *j)
h	src/renderer/stb_image.c	/^      int h,v;$/;"	m	struct:__anon5::__anon6	file:	access:public
h	src/renderer/stb_image.c	/^   int w,h;$/;"	m	struct:stbi_gif_struct	file:	access:public
h2	src/renderer/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon5::__anon6	file:	access:public
h2l_gamma_i	src/renderer/stb_image.c	/^static float h2l_gamma_i=1.0f\/2.2f, h2l_scale_i=1.0f;$/;"	v	file:
h2l_scale_i	src/renderer/stb_image.c	/^static float h2l_gamma_i=1.0f\/2.2f, h2l_scale_i=1.0f;$/;"	v	file:
hAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaAllocation hAllocation;$/;"	m	struct:VmaSuballocation	access:public
ha	src/renderer/stb_image.c	/^      int hd,ha;$/;"	m	struct:__anon5::__anon6	file:	access:public
halfHeight	src/renderer/RenderContext.hpp	/^    int   halfHeight = 0;$/;"	m	class:RenderContext	access:public
halfWidth	src/renderer/RenderContext.hpp	/^    int   halfWidth = 0;$/;"	m	class:RenderContext	access:public
hd	src/renderer/stb_image.c	/^      int hd,ha;$/;"	m	struct:__anon5::__anon6	file:	access:public
hdr_convert	src/renderer/stb_image.c	/^static void hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f	file:	signature:(float *output, stbi_uc *input, int req_comp)
hdr_gettoken	src/renderer/stb_image.c	/^static char *hdr_gettoken(stbi *z, char *buffer)$/;"	f	file:	signature:(stbi *z, char *buffer)
hdr_load	src/renderer/stb_image.c	/^static float *hdr_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
hdr_test	src/renderer/stb_image.c	/^static int hdr_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
hdr_to_ldr	src/renderer/stb_image.c	/^static stbi_uc *hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f	file:	signature:(float *data, int x, int y, int comp)
header	src/q3bsp/Q3BspMap.hpp	/^    Q3BspHeader     header;$/;"	m	class:Q3BspMap	access:public
height	src/q3bsp/Q3BspPatch.hpp	/^    int height = 0;$/;"	m	struct:Q3BspPatch	access:public
height	src/renderer/RenderContext.hpp	/^    int   height    = 0;$/;"	m	class:RenderContext	access:public
high_bit	src/renderer/stb_image.c	/^static int high_bit(unsigned int z)$/;"	f	file:	signature:(unsigned int z)
hs	src/renderer/stb_image.c	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon7	file:	access:public
huff_ac	src/renderer/stb_image.c	/^   huffman huff_ac[4];$/;"	m	struct:__anon5	file:	access:public
huff_dc	src/renderer/stb_image.c	/^   huffman huff_dc[4];$/;"	m	struct:__anon5	file:	access:public
huffman	src/renderer/stb_image.c	/^} huffman;$/;"	t	typeref:struct:__anon4	file:
id	src/renderer/stb_image.c	/^      int id;$/;"	m	struct:__anon5::__anon6	file:	access:public
idata	src/renderer/stb_image.c	/^   uint8 *idata, *expanded, *out;$/;"	m	struct:__anon11	file:	access:public
idct_block	src/renderer/stb_image.c	/^static void idct_block(uint8 *out, int out_stride, short data[64], stbi_dequantize_t *dequantize)$/;"	f	file:	signature:(uint8 *out, int out_stride, short data[64], stbi_dequantize_t *dequantize)
image	src/renderer/vulkan/Image.hpp	/^        VkImage image = VK_NULL_HANDLE;$/;"	m	struct:vk::Texture	access:public
imageView	src/renderer/vulkan/Image.hpp	/^        VkImageView   imageView  = VK_NULL_HANDLE;$/;"	m	struct:vk::Texture	access:public
images	src/renderer/vulkan/Device.hpp	/^        std::vector<VkImage> images;$/;"	m	struct:vk::SwapChain	access:public
img_buffer	src/renderer/stb_image.c	/^   uint8 *img_buffer, *img_buffer_end;$/;"	m	struct:__anon2	file:	access:public
img_buffer_end	src/renderer/stb_image.c	/^   uint8 *img_buffer, *img_buffer_end;$/;"	m	struct:__anon2	file:	access:public
img_buffer_original	src/renderer/stb_image.c	/^   uint8 *img_buffer_original;$/;"	m	struct:__anon2	file:	access:public
img_comp	src/renderer/stb_image.c	/^   } img_comp[4];$/;"	m	struct:__anon5	typeref:struct:__anon5::__anon6	file:	access:public
img_h_max	src/renderer/stb_image.c	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon5	file:	access:public
img_mcu_h	src/renderer/stb_image.c	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon5	file:	access:public
img_mcu_w	src/renderer/stb_image.c	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon5	file:	access:public
img_mcu_x	src/renderer/stb_image.c	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon5	file:	access:public
img_mcu_y	src/renderer/stb_image.c	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon5	file:	access:public
img_n	src/renderer/stb_image.c	/^   int img_n, img_out_n;$/;"	m	struct:__anon2	file:	access:public
img_out_n	src/renderer/stb_image.c	/^   int img_n, img_out_n;$/;"	m	struct:__anon2	file:	access:public
img_v_max	src/renderer/stb_image.c	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon5	file:	access:public
img_x	src/renderer/stb_image.c	/^   uint32 img_x, img_y;$/;"	m	struct:__anon2	file:	access:public
img_y	src/renderer/stb_image.c	/^   uint32 img_x, img_y;$/;"	m	struct:__anon2	file:	access:public
inColor	src/renderer/RenderContext.hpp	/^    inColor = 2,$/;"	e	enum:uint32_t
inTexCoord	src/renderer/RenderContext.hpp	/^    inTexCoord = 1,$/;"	e	enum:uint32_t
inTexCoordLightmap	src/renderer/RenderContext.hpp	/^    inTexCoordLightmap = 2,$/;"	e	enum:uint32_t
inVertex	src/renderer/RenderContext.hpp	/^    inVertex = 0,$/;"	e	enum:uint32_t
index	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int index = 0;$/;"	m	struct:Q3FaceRenderable	access:public
indexBuffer	src/q3bsp/Q3BspRenderHelpers.hpp	/^    vk::Buffer indexBuffer;$/;"	m	struct:FaceBuffers	access:public
indexCount	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int indexCount  = 0;$/;"	m	struct:FaceBuffers	access:public
info_arch	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_language_dialect_default	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
init_defaults	src/renderer/stb_image.c	/^static void init_defaults(void)$/;"	f	file:	signature:(void)
insert	src/renderer/vulkan/vk_mem_alloc.h	/^    iterator insert(iterator it, const T& value) { return iterator(&m_RawList, m_RawList.InsertBefore(it.m_pItem, value)); }$/;"	f	class:VmaList	access:public	signature:(iterator it, const T& value)
insert	src/renderer/vulkan/vk_mem_alloc.h	/^    void insert(size_t index, const T& src)$/;"	f	class:VmaVector	access:public	signature:(size_t index, const T& src)
int16	src/renderer/stb_image.c	/^typedef   signed short  int16;$/;"	t	file:
int32	src/renderer/stb_image.c	/^typedef   signed int    int32;$/;"	t	file:
io	src/renderer/stb_image.c	/^   stbi_io_callbacks io;$/;"	m	struct:__anon2	file:	access:public
io_user_data	src/renderer/stb_image.c	/^   void *io_user_data;$/;"	m	struct:__anon2	file:	access:public
item	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaSuballocationList::iterator item;$/;"	m	struct:VmaAllocationRequest	access:public
itemsToMakeLostCount	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t itemsToMakeLostCount;$/;"	m	struct:VmaAllocationRequest	access:public
iterator	src/renderer/vulkan/vk_mem_alloc.h	/^        iterator() :$/;"	f	class:VmaList::iterator	access:public	signature:()
iterator	src/renderer/vulkan/vk_mem_alloc.h	/^        iterator(VmaRawList<T>* pList, VmaListItem<T>* pItem) :$/;"	f	class:VmaList::iterator	access:private	signature:(VmaRawList<T>* pList, VmaListItem<T>* pItem)
iterator	src/renderer/vulkan/vk_mem_alloc.h	/^    class iterator$/;"	c	class:VmaList	access:public
iterator	src/renderer/vulkan/vk_mem_alloc.h	/^    typedef T* iterator;$/;"	t	class:VmaVector	access:public
jpeg	src/renderer/stb_image.c	/^} jpeg;$/;"	t	typeref:struct:__anon5	file:
l2h_gamma	src/renderer/stb_image.c	/^static float l2h_gamma=2.2f, l2h_scale=1.0f;$/;"	v	file:
l2h_scale	src/renderer/stb_image.c	/^static float l2h_gamma=2.2f, l2h_scale=1.0f;$/;"	v	file:
layout	src/renderer/vulkan/Pipeline.hpp	/^        VkPipelineLayout layout = VK_NULL_HANDLE;$/;"	m	struct:vk::Pipeline	access:public
ldr_to_hdr	src/renderer/stb_image.c	/^static float   *ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f	file:	signature:(stbi_uc *data, int x, int y, int comp)
leafBrush	src/q3bsp/Q3Bsp.hpp	/^    int   leafBrush;$/;"	m	struct:Q3BspLeafLump	access:public
leafBrushes	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspLeafBrushLump> leafBrushes;$/;"	m	class:Q3BspMap	access:public
leafFace	src/q3bsp/Q3Bsp.hpp	/^    int   leafFace;$/;"	m	struct:Q3BspLeafLump	access:public
leafFaces	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspLeafFaceLump>  leafFaces;$/;"	m	class:Q3BspMap	access:public
leaves	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspLeafLump>      leaves;$/;"	m	class:Q3BspMap	access:public
left	src/renderer/RenderContext.hpp	/^    float left   = 0.f;$/;"	m	class:RenderContext	access:public
length	src/q3bsp/Q3Bsp.hpp	/^    int length;$/;"	m	struct:Q3BspDirEntry	access:public
length	src/renderer/stb_image.c	/^   uint32 length;$/;"	m	struct:__anon10	file:	access:public
length_base	src/renderer/stb_image.c	/^static int length_base[31] = {$/;"	v	file:
length_extra	src/renderer/stb_image.c	/^static int length_extra[31]= $/;"	v	file:
lflags	src/renderer/stb_image.c	/^   int lflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
lightMaps	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspLightMapLump>  lightMaps;$/;"	m	class:Q3BspMap	access:public
lightVols	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspLightVolLump>  lightVols;$/;"	m	class:Q3BspMap	access:public
lightmapIdx	src/q3bsp/Q3BspPatch.hpp	/^    int lightmapIdx = 0; \/\/ surface lightmap index$/;"	m	struct:Q3BspPatch	access:public
line0	src/renderer/stb_image.c	/^   uint8 *line0,*line1;$/;"	m	struct:__anon7	file:	access:public
line1	src/renderer/stb_image.c	/^   uint8 *line0,*line1;$/;"	m	struct:__anon7	file:	access:public
line_size	src/renderer/stb_image.c	/^   int line_size;$/;"	m	struct:stbi_gif_struct	file:	access:public
linebuf	src/renderer/stb_image.c	/^      uint8 *linebuf;$/;"	m	struct:__anon5::__anon6	file:	access:public
lm_index	src/q3bsp/Q3Bsp.hpp	/^    int   lm_index;$/;"	m	struct:Q3BspFaceLump	access:public
lm_origin	src/q3bsp/Q3Bsp.hpp	/^    vec3f lm_origin;$/;"	m	struct:Q3BspFaceLump	access:public
lm_size	src/q3bsp/Q3Bsp.hpp	/^    vec2i lm_size;$/;"	m	struct:Q3BspFaceLump	access:public
lm_start	src/q3bsp/Q3Bsp.hpp	/^    vec2i lm_start;$/;"	m	struct:Q3BspFaceLump	access:public
lm_vecs	src/q3bsp/Q3Bsp.hpp	/^    vec3f lm_vecs[2];$/;"	m	struct:Q3BspFaceLump	access:public
loadShader	src/renderer/vulkan/Pipeline.cpp	/^    static ShaderProgram loadShader(const Device &device, const char* vshFilename, const char *fshFilename)$/;"	f	namespace:vk	signature:(const Device &device, const char* vshFilename, const char *fshFilename)
load_jpeg_image	src/renderer/stb_image.c	/^static uint8 *load_jpeg_image(jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f	file:	signature:(jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)
logical	src/renderer/vulkan/Base.hpp	/^        VkDevice         logical   = VK_NULL_HANDLE;$/;"	m	struct:vk::Device	access:public
lpal	src/renderer/stb_image.c	/^   uint8 lpal[256][4];$/;"	m	struct:stbi_gif_struct	file:	access:public
m_Alignment	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_Alignment;$/;"	m	struct:VmaAllocation_T	access:private
m_AllocationCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    VkAllocationCallbacks m_AllocationCallbacks;$/;"	m	struct:VmaAllocator_T	access:public
m_AllocationCallbacksSpecified	src/renderer/vulkan/vk_mem_alloc.h	/^    bool m_AllocationCallbacksSpecified;$/;"	m	struct:VmaAllocator_T	access:public
m_Allocations	src/renderer/vulkan/vk_mem_alloc.h	/^        VmaVector< AllocationInfo, VmaStlAllocator<AllocationInfo> > m_Allocations;$/;"	m	struct:VmaDefragmentator::BlockInfo	access:public
m_Allocations	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector< AllocationInfo, VmaStlAllocator<AllocationInfo> > m_Allocations;$/;"	m	class:VmaDefragmentator	access:private
m_AllocationsMoved	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t m_AllocationsMoved;$/;"	m	class:VmaDefragmentator	access:private
m_Allocator	src/renderer/vulkan/vk_mem_alloc.h	/^    AllocatorT m_Allocator;$/;"	m	class:VmaVector	access:private
m_Block	src/renderer/vulkan/vk_mem_alloc.h	/^        VmaDeviceMemoryBlock* m_Block;$/;"	m	struct:VmaAllocation_T::BlockAllocation	access:public
m_BlockAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^        BlockAllocation m_BlockAllocation;$/;"	m	union:VmaAllocation_T::__anon1	access:public
m_BlockVector	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaBlockVector m_BlockVector;$/;"	m	struct:VmaPool_T	access:public
m_Blocks	src/renderer/vulkan/vk_mem_alloc.h	/^    BlockInfoVector m_Blocks;$/;"	m	class:VmaDefragmentator	access:private
m_Blocks	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector< VmaDeviceMemoryBlock*, VmaStlAllocator<VmaDeviceMemoryBlock*> > m_Blocks;$/;"	m	struct:VmaBlockVector	access:private
m_BufferImageGranularity	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkDeviceSize m_BufferImageGranularity;$/;"	m	struct:VmaBlockVector	access:private
m_BytesMoved	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_BytesMoved;$/;"	m	class:VmaDefragmentator	access:private
m_CanBecomeLost	src/renderer/vulkan/vk_mem_alloc.h	/^        bool m_CanBecomeLost;$/;"	m	struct:VmaAllocation_T::BlockAllocation	access:public
m_Capacity	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t m_Capacity;$/;"	m	class:VmaVector	access:private
m_Count	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t m_Count;$/;"	m	class:VmaRawList	access:private
m_Count	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t m_Count;$/;"	m	class:VmaVector	access:private
m_CurrentFrameIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_ATOMIC_UINT32 m_CurrentFrameIndex;$/;"	m	struct:VmaAllocator_T	access:private
m_CurrentFrameIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t m_CurrentFrameIndex;$/;"	m	class:VmaDefragmentator	access:private
m_Data	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector< char, VmaStlAllocator<char> > m_Data;$/;"	m	class:VmaStringBuilder	access:private
m_DedicatedAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^        DedicatedAllocation m_DedicatedAllocation;$/;"	m	union:VmaAllocation_T::__anon1	access:public
m_DedicatedAllocationsMutex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MUTEX m_DedicatedAllocationsMutex[VK_MAX_MEMORY_TYPES];$/;"	m	struct:VmaAllocator_T	access:public
m_DeviceMemoryCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaDeviceMemoryCallbacks m_DeviceMemoryCallbacks;$/;"	m	struct:VmaAllocator_T	access:public
m_Flags	src/renderer/vulkan/vk_mem_alloc.h	/^    uint8_t m_Flags; \/\/ enum FLAGS$/;"	m	struct:VmaAllocation_T	access:private
m_FrameInUseCount	src/renderer/vulkan/vk_mem_alloc.h	/^    const uint32_t m_FrameInUseCount;$/;"	m	struct:VmaBlockVector	access:private
m_FreeCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t m_FreeCount;$/;"	m	class:VmaBlockMetadata	access:private
m_FreeSuballocationsBySize	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector< VmaSuballocationList::iterator, VmaStlAllocator< VmaSuballocationList::iterator > > m_FreeSuballocationsBySize;$/;"	m	class:VmaBlockMetadata	access:private
m_HasEmptyBlock	src/renderer/vulkan/vk_mem_alloc.h	/^    bool m_HasEmptyBlock;$/;"	m	struct:VmaBlockVector	access:private
m_HasNonMovableAllocations	src/renderer/vulkan/vk_mem_alloc.h	/^        bool m_HasNonMovableAllocations;$/;"	m	struct:VmaDefragmentator::BlockInfo	access:public
m_HeapSizeLimit	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_HeapSizeLimit[VK_MAX_MEMORY_HEAPS];$/;"	m	struct:VmaAllocator_T	access:public
m_HeapSizeLimitMutex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MUTEX m_HeapSizeLimitMutex;$/;"	m	struct:VmaAllocator_T	access:public
m_InsideString	src/renderer/vulkan/vk_mem_alloc.h	/^    bool m_InsideString;$/;"	m	class:VmaJsonWriter	access:private
m_IsCustomPool	src/renderer/vulkan/vk_mem_alloc.h	/^    const bool m_IsCustomPool;$/;"	m	struct:VmaBlockVector	access:private
m_ItemAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaPoolAllocator<ItemType> m_ItemAllocator;$/;"	m	class:VmaRawList	access:private
m_ItemBlocks	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector< ItemBlock, VmaStlAllocator<ItemBlock> > m_ItemBlocks;$/;"	m	class:VmaPoolAllocator	access:private
m_ItemsPerBlock	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t m_ItemsPerBlock;$/;"	m	class:VmaPoolAllocator	access:private
m_LastUseFrameIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_ATOMIC_UINT32 m_LastUseFrameIndex;$/;"	m	struct:VmaAllocation_T	access:private
m_MapCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t m_MapCount;$/;"	m	class:VmaDeviceMemoryMapping	access:private
m_MapCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint8_t m_MapCount;$/;"	m	struct:VmaAllocation_T	access:private
m_Mapping	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaDeviceMemoryMapping m_Mapping;    $/;"	m	class:VmaDeviceMemoryBlock	access:public
m_MaxBlockCount	src/renderer/vulkan/vk_mem_alloc.h	/^    const size_t m_MaxBlockCount;$/;"	m	struct:VmaBlockVector	access:private
m_MemProps	src/renderer/vulkan/vk_mem_alloc.h	/^    VkPhysicalDeviceMemoryProperties m_MemProps;$/;"	m	struct:VmaAllocator_T	access:public
m_MemoryTypeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^        uint32_t m_MemoryTypeIndex;$/;"	m	struct:VmaAllocation_T::DedicatedAllocation	access:public
m_MemoryTypeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    const uint32_t m_MemoryTypeIndex;$/;"	m	struct:VmaBlockVector	access:private
m_MemoryTypeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t m_MemoryTypeIndex;$/;"	m	class:VmaDeviceMemoryBlock	access:public
m_Metadata	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaBlockMetadata m_Metadata;$/;"	m	class:VmaDeviceMemoryBlock	access:public
m_MinBlockCount	src/renderer/vulkan/vk_mem_alloc.h	/^    const size_t m_MinBlockCount;$/;"	m	struct:VmaBlockVector	access:private
m_Mutex	src/renderer/vulkan/vk_mem_alloc.h	/^       std::mutex m_Mutex;$/;"	m	class:VmaMutex	access:private
m_Mutex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MUTEX m_Mutex;$/;"	m	class:VmaDeviceMemoryMapping	access:private
m_Mutex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MUTEX m_Mutex;$/;"	m	struct:VmaBlockVector	access:private
m_Offset	src/renderer/vulkan/vk_mem_alloc.h	/^        VkDeviceSize m_Offset;$/;"	m	struct:VmaAllocation_T::BlockAllocation	access:public
m_PhysicalDevice	src/renderer/vulkan/vk_mem_alloc.h	/^    VkPhysicalDevice m_PhysicalDevice;$/;"	m	struct:VmaAllocator_T	access:private
m_PhysicalDeviceProperties	src/renderer/vulkan/vk_mem_alloc.h	/^    VkPhysicalDeviceProperties m_PhysicalDeviceProperties;$/;"	m	struct:VmaAllocator_T	access:public
m_Pools	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector<VmaPool, VmaStlAllocator<VmaPool> > m_Pools;$/;"	m	struct:VmaAllocator_T	access:private
m_PoolsMutex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MUTEX m_PoolsMutex;$/;"	m	struct:VmaAllocator_T	access:private
m_PreferredBlockSize	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkDeviceSize m_PreferredBlockSize;$/;"	m	struct:VmaBlockVector	access:private
m_PreferredLargeHeapBlockSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_PreferredLargeHeapBlockSize;$/;"	m	struct:VmaAllocator_T	access:private
m_PreferredSmallHeapBlockSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_PreferredSmallHeapBlockSize;$/;"	m	struct:VmaAllocator_T	access:private
m_RawList	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaRawList<T> m_RawList;$/;"	m	class:VmaList	access:private
m_SB	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaStringBuilder& m_SB;$/;"	m	class:VmaJsonWriter	access:private
m_Size	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_Size;$/;"	m	class:VmaBlockMetadata	access:private
m_Size	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_Size;$/;"	m	struct:VmaAllocation_T	access:private
m_Stack	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector< StackItem, VmaStlAllocator<StackItem> > m_Stack;$/;"	m	class:VmaJsonWriter	access:private
m_SuballocationType	src/renderer/vulkan/vk_mem_alloc.h	/^    uint8_t m_SuballocationType; \/\/ VmaSuballocationType$/;"	m	struct:VmaAllocation_T	access:private
m_Suballocations	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaSuballocationList m_Suballocations;$/;"	m	class:VmaBlockMetadata	access:private
m_SumFreeSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize m_SumFreeSize;$/;"	m	class:VmaBlockMetadata	access:private
m_Type	src/renderer/vulkan/vk_mem_alloc.h	/^    uint8_t m_Type; \/\/ ALLOCATION_TYPE$/;"	m	struct:VmaAllocation_T	access:private
m_UseKhrDedicatedAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^    bool m_UseKhrDedicatedAllocation;$/;"	m	struct:VmaAllocator_T	access:public
m_UseMutex	src/renderer/vulkan/vk_mem_alloc.h	/^    bool m_UseMutex;$/;"	m	struct:VmaAllocator_T	access:public
m_VulkanFunctions	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVulkanFunctions m_VulkanFunctions;$/;"	m	struct:VmaAllocator_T	access:private
m_activeCamera	src/renderer/CameraDirector.hpp	/^    Camera *m_activeCamera = nullptr;$/;"	m	class:CameraDirector	access:private
m_bspValid	src/BspMap.hpp	/^    bool     m_bspValid;$/;"	m	class:BspMap	access:protected
m_cameras	src/renderer/CameraDirector.hpp	/^    std::vector<Camera *> m_cameras;$/;"	m	class:CameraDirector	access:private
m_charBuffer	src/renderer/Font.hpp	/^    Glyph  m_charBuffer[MAX_CHARS]; \/\/ character data for vertex buffer$/;"	m	class:Font	access:private
m_charCount	src/renderer/Font.hpp	/^    int    m_charCount = 0;         \/\/ number of characters currently queued for drawing$/;"	m	class:Font	access:private
m_color	src/renderer/Font.hpp	/^    Math::Vector3f  m_color;$/;"	m	class:Font	access:private
m_commandBuffers	src/q3bsp/Q3BspMap.hpp	/^    vk::CmdBufferList m_commandBuffers;$/;"	m	class:Q3BspMap	access:private
m_commandBuffers	src/renderer/Font.hpp	/^    vk::CmdBufferList m_commandBuffers;$/;"	m	class:Font	access:private
m_commandPool	src/q3bsp/Q3BspMap.hpp	/^    VkCommandPool  m_commandPool = VK_NULL_HANDLE;$/;"	m	class:Q3BspMap	access:private
m_commandPool	src/renderer/Font.hpp	/^    VkCommandPool  m_commandPool;$/;"	m	class:Font	access:private
m_components	src/renderer/GameTexture.hpp	/^    int m_components;$/;"	m	class:GameTexture	access:private
m_debugRenderState	src/Application.hpp	/^    uint8_t  m_debugRenderState = RenderMapStats;$/;"	m	class:Application	access:private
m_depthBuffer	src/renderer/RenderContext.hpp	/^    vk::Texture m_depthBuffer;$/;"	m	class:RenderContext	access:private
m_descriptor	src/renderer/Font.hpp	/^    vk::Descriptor m_descriptor;$/;"	m	class:Font	access:private
m_dsLayout	src/q3bsp/Q3BspMap.hpp	/^    VkDescriptorSetLayout m_dsLayout;$/;"	m	class:Q3BspMap	access:private
m_faceBuffers	src/q3bsp/Q3BspRenderHelpers.hpp	/^    std::map<int, FaceBuffers> m_faceBuffers;$/;"	m	struct:RenderBuffers	access:public
m_facesPipeline	src/q3bsp/Q3BspMap.hpp	/^    vk::Pipeline   m_facesPipeline; \/\/ used for rendering standard faces$/;"	m	class:Q3BspMap	access:private
m_font	src/q3bsp/Q3BspStatsUI.hpp	/^    Font *m_font = nullptr;$/;"	m	class:Q3StatsUI	access:private
m_frustum	src/q3bsp/Q3BspMap.hpp	/^    Frustum  m_frustum; \/\/ view frustum$/;"	m	class:Q3BspMap	access:private
m_hAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^        VmaAllocation m_hAllocation;$/;"	m	struct:VmaDefragmentator::AllocationInfo	access:public
m_hAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^    const VmaAllocator m_hAllocator;$/;"	m	class:VmaDefragmentator	access:private
m_hAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^    const VmaAllocator m_hAllocator;$/;"	m	struct:VmaBlockVector	access:private
m_hDevice	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDevice m_hDevice;$/;"	m	struct:VmaAllocator_T	access:public
m_hMemory	src/renderer/vulkan/vk_mem_alloc.h	/^        VkDeviceMemory m_hMemory;$/;"	m	struct:VmaAllocation_T::DedicatedAllocation	access:public
m_hMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceMemory m_hMemory;$/;"	m	class:VmaDeviceMemoryBlock	access:public
m_hPool	src/renderer/vulkan/vk_mem_alloc.h	/^        VmaPool m_hPool; \/\/ Null if belongs to general memory.$/;"	m	struct:VmaAllocation_T::BlockAllocation	access:public
m_height	src/renderer/GameTexture.hpp	/^    int m_height;$/;"	m	class:GameTexture	access:private
m_imageAvailableSemaphore	src/renderer/RenderContext.hpp	/^    VkSemaphore m_imageAvailableSemaphore;$/;"	m	class:RenderContext	access:private
m_imageIndex	src/renderer/RenderContext.hpp	/^    uint32_t m_imageIndex;$/;"	m	class:RenderContext	access:private
m_imageViews	src/renderer/RenderContext.hpp	/^    std::vector<VkImageView> m_imageViews;$/;"	m	class:RenderContext	access:private
m_indices	src/q3bsp/Q3BspPatch.hpp	/^    std::vector<unsigned int>    m_indices;$/;"	m	class:Q3BspBiquadPatch	access:public
m_instance	src/renderer/RenderContext.hpp	/^    VkInstance   m_instance = VK_NULL_HANDLE;$/;"	m	class:RenderContext	access:private
m_keyStates	src/Application.hpp	/^    std::map<KeyCode, bool> m_keyStates;$/;"	m	class:Application	access:private
m_lightmapTextures	src/q3bsp/Q3BspMap.hpp	/^    vk::Texture *m_lightmapTextures = nullptr;        \/\/ bsp lightmaps$/;"	m	class:Q3BspMap	access:private
m_m	src/Math.hpp	/^        float m_m[16];$/;"	m	struct:Math::Matrix4f	access:public
m_map	src/StatsUI.hpp	/^    BspMap *m_map;$/;"	m	class:StatsUI	access:protected
m_mapStats	src/BspMap.hpp	/^    BspStats m_mapStats;$/;"	m	class:BspMap	access:protected
m_mappedData	src/renderer/Font.hpp	/^    Glyph *m_mappedData = nullptr;  \/\/ pointer to currently mapped Vulkan data$/;"	m	class:Font	access:private
m_missingTex	src/q3bsp/Q3BspMap.hpp	/^    GameTexture *m_missingTex = nullptr; \/\/ rendered if an in-game texture is missing$/;"	m	class:Q3BspMap	access:private
m_mode	src/renderer/Camera.hpp	/^    CameraMode     m_mode;$/;"	m	class:Camera	access:private
m_noRedraw	src/Application.hpp	/^    bool m_noRedraw    = false;   \/\/  do not perform window redraw$/;"	m	class:Application	access:private
m_pAllocationCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkAllocationCallbacks* const m_pAllocationCallbacks;$/;"	m	class:VmaRawList	access:private
m_pAllocationCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkAllocationCallbacks* m_pAllocationCallbacks;$/;"	m	class:VmaPoolAllocator	access:private
m_pArray	src/renderer/vulkan/vk_mem_alloc.h	/^    T* m_pArray;$/;"	m	class:VmaVector	access:private
m_pBack	src/renderer/vulkan/vk_mem_alloc.h	/^    ItemType* m_pBack;$/;"	m	class:VmaRawList	access:private
m_pBlock	src/renderer/vulkan/vk_mem_alloc.h	/^        VmaDeviceMemoryBlock* m_pBlock;$/;"	m	struct:VmaDefragmentator::BlockInfo	access:public
m_pBlockVector	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaBlockVector* const m_pBlockVector;$/;"	m	class:VmaDefragmentator	access:private
m_pBlockVectors	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaBlockVector* m_pBlockVectors[VK_MAX_MEMORY_TYPES];$/;"	m	struct:VmaAllocator_T	access:public
m_pCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkAllocationCallbacks* const m_pCallbacks;$/;"	m	class:VmaStlAllocator	access:public
m_pChanged	src/renderer/vulkan/vk_mem_alloc.h	/^        VkBool32* m_pChanged;$/;"	m	struct:VmaDefragmentator::AllocationInfo	access:public
m_pDedicatedAllocations	src/renderer/vulkan/vk_mem_alloc.h	/^    AllocationVectorType* m_pDedicatedAllocations[VK_MAX_MEMORY_TYPES];$/;"	m	struct:VmaAllocator_T	access:public
m_pDefragmentator	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaDefragmentator* m_pDefragmentator;$/;"	m	struct:VmaBlockVector	access:private
m_pFront	src/renderer/vulkan/vk_mem_alloc.h	/^    ItemType* m_pFront;$/;"	m	class:VmaRawList	access:private
m_pItem	src/renderer/vulkan/vk_mem_alloc.h	/^        VmaListItem<T>* m_pItem;$/;"	m	class:VmaList::iterator	access:private
m_pItem	src/renderer/vulkan/vk_mem_alloc.h	/^        const VmaListItem<T>* m_pItem;$/;"	m	class:VmaList::const_iterator	access:private
m_pList	src/renderer/vulkan/vk_mem_alloc.h	/^        VmaRawList<T>* m_pList;$/;"	m	class:VmaList::iterator	access:private
m_pList	src/renderer/vulkan/vk_mem_alloc.h	/^        const VmaRawList<T>* m_pList;$/;"	m	class:VmaList::const_iterator	access:private
m_pMappedData	src/renderer/vulkan/vk_mem_alloc.h	/^        void* m_pMappedData; \/\/ Not null means memory is mapped.$/;"	m	struct:VmaAllocation_T::DedicatedAllocation	access:public
m_pMappedData	src/renderer/vulkan/vk_mem_alloc.h	/^    void* m_pMappedData;$/;"	m	class:VmaDeviceMemoryMapping	access:private
m_pMappedDataForDefragmentation	src/renderer/vulkan/vk_mem_alloc.h	/^        void* m_pMappedDataForDefragmentation;$/;"	m	struct:VmaDefragmentator::BlockInfo	access:private
m_pMutex	src/renderer/vulkan/vk_mem_alloc.h	/^    VMA_MUTEX* m_pMutex;$/;"	m	struct:VmaMutexLock	access:private
m_pUserData	src/renderer/vulkan/vk_mem_alloc.h	/^    void* m_pUserData;$/;"	m	struct:VmaAllocation_T	access:private
m_patchBuffers	src/q3bsp/Q3BspRenderHelpers.hpp	/^    std::map<int, std::vector<FaceBuffers> > m_patchBuffers;$/;"	m	struct:RenderBuffers	access:public
m_patchPipeline	src/q3bsp/Q3BspMap.hpp	/^    vk::Pipeline   m_patchPipeline; \/\/ used for rendering curves\/patches$/;"	m	class:Q3BspMap	access:private
m_patches	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspPatch *>       m_patches;        \/\/ curved surfaces$/;"	m	class:Q3BspMap	access:private
m_pipeline	src/renderer/Font.hpp	/^    vk::Pipeline   m_pipeline;$/;"	m	class:Font	access:private
m_planes	src/Frustum.hpp	/^    Plane m_planes[6];$/;"	m	class:Frustum	access:private
m_position	src/renderer/Camera.hpp	/^    Math::Vector3f m_position;$/;"	m	class:Camera	access:private
m_position	src/renderer/Font.hpp	/^    Math::Vector3f  m_position;$/;"	m	class:Font	access:private
m_projectionMatrix	src/renderer/Camera.hpp	/^    Math::Matrix4f m_projectionMatrix;$/;"	m	class:Camera	access:private
m_q3map	src/Application.hpp	/^    BspMap  *m_q3map   = nullptr; \/\/ loaded map$/;"	m	class:Application	access:private
m_q3stats	src/Application.hpp	/^    StatsUI *m_q3stats = nullptr; \/\/ map stats UI$/;"	m	class:Application	access:private
m_renderBuffers	src/q3bsp/Q3BspMap.hpp	/^    RenderBuffers m_renderBuffers;$/;"	m	class:Q3BspMap	access:private
m_renderFaces	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3FaceRenderable>   m_renderFaces;    \/\/ bsp faces in "renderable format"$/;"	m	class:Q3BspMap	access:private
m_renderFlags	src/BspMap.hpp	/^    int      m_renderFlags = 0;$/;"	m	class:BspMap	access:protected
m_renderLeaves	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3LeafRenderable>   m_renderLeaves;   \/\/ bsp leaves in "renderable format"$/;"	m	class:Q3BspMap	access:private
m_renderPass	src/q3bsp/Q3BspMap.hpp	/^    vk::RenderPass m_renderPass;$/;"	m	class:Q3BspMap	access:private
m_renderPass	src/renderer/Font.hpp	/^    vk::RenderPass m_renderPass;$/;"	m	class:Font	access:private
m_rightVector	src/renderer/Camera.hpp	/^    Math::Vector3f m_rightVector;$/;"	m	class:Camera	access:private
m_rotation	src/renderer/Camera.hpp	/^    Math::Vector3f m_rotation;$/;"	m	class:Camera	access:private
m_rowIndexPointers	src/q3bsp/Q3BspPatch.hpp	/^    unsigned int**  m_rowIndexPointers = nullptr;$/;"	m	class:Q3BspBiquadPatch	access:private
m_running	src/Application.hpp	/^    bool m_running     = true;    \/\/ application is running$/;"	m	class:Application	access:private
m_scale	src/renderer/Font.hpp	/^    Math::Vector2f  m_scale;$/;"	m	class:Font	access:private
m_surface	src/renderer/RenderContext.hpp	/^    VkSurfaceKHR m_surface  = VK_NULL_HANDLE;$/;"	m	class:RenderContext	access:private
m_tesselationLevel	src/q3bsp/Q3BspPatch.hpp	/^    int                          m_tesselationLevel = 0;$/;"	m	class:Q3BspBiquadPatch	access:public
m_texture	src/renderer/Font.hpp	/^    GameTexture*    m_texture = nullptr;$/;"	m	class:Font	access:private
m_textureData	src/renderer/GameTexture.hpp	/^    unsigned char *m_textureData;$/;"	m	class:GameTexture	access:private
m_textures	src/q3bsp/Q3BspMap.hpp	/^    std::vector<GameTexture *>      m_textures;       \/\/ loaded in-game textures$/;"	m	class:Q3BspMap	access:private
m_textures	src/renderer/TextureManager.hpp	/^    std::map<std::string, GameTexture *> m_textures;$/;"	m	class:TextureManager	access:private
m_trianglesPerRow	src/q3bsp/Q3BspPatch.hpp	/^    int*            m_trianglesPerRow  = nullptr;$/;"	m	class:Q3BspBiquadPatch	access:private
m_ubo	src/q3bsp/Q3BspMap.hpp	/^    UniformBufferObject m_ubo;$/;"	m	class:Q3BspMap	access:private
m_upVector	src/renderer/Camera.hpp	/^    Math::Vector3f m_upVector;$/;"	m	class:Camera	access:private
m_vbInfo	src/q3bsp/Q3BspMap.hpp	/^    vk::VertexBufferInfo  m_vbInfo;$/;"	m	class:Q3BspMap	access:private
m_vbInfo	src/renderer/Font.hpp	/^    vk::VertexBufferInfo m_vbInfo;$/;"	m	class:Font	access:private
m_vertexBuffer	src/renderer/Font.hpp	/^    vk::Buffer     m_vertexBuffer;$/;"	m	class:Font	access:private
m_vertices	src/q3bsp/Q3BspPatch.hpp	/^    std::vector<Q3BspVertexLump> m_vertices;$/;"	m	class:Q3BspBiquadPatch	access:public
m_viewMatrix	src/renderer/Camera.hpp	/^    Math::Matrix4f m_viewMatrix;$/;"	m	class:Camera	access:private
m_viewVector	src/renderer/Camera.hpp	/^    Math::Vector3f m_viewVector;$/;"	m	class:Camera	access:private
m_visibleFaces	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3FaceRenderable *> m_visibleFaces;   \/\/ list of visible surfaces to render$/;"	m	class:Q3BspMap	access:private
m_visiblePatches	src/q3bsp/Q3BspMap.hpp	/^    std::vector<int>                m_visiblePatches; \/\/ list of visible patches to render$/;"	m	class:Q3BspMap	access:private
m_vkTexture	src/renderer/GameTexture.hpp	/^    vk::Texture m_vkTexture;$/;"	m	class:GameTexture	access:private
m_w	src/Math.hpp	/^        float m_w = 0.f;$/;"	m	class:Math::Quaternion	access:public
m_w	src/Math.hpp	/^        float m_w = 0.f;$/;"	m	struct:Math::Vector4f	access:public
m_whiteTex	src/q3bsp/Q3BspMap.hpp	/^    vk::Texture  m_whiteTex;             \/\/ used if no lightmap specified for a face$/;"	m	class:Q3BspMap	access:private
m_width	src/renderer/GameTexture.hpp	/^    int m_width;$/;"	m	class:GameTexture	access:private
m_x	src/Math.hpp	/^        float m_x = 0.f;$/;"	m	class:Math::Quaternion	access:public
m_x	src/Math.hpp	/^        float m_x = 0.f;$/;"	m	class:Math::Vector3f	access:public
m_x	src/Math.hpp	/^        float m_x = 0.f;$/;"	m	struct:Math::Vector2f	access:public
m_x	src/Math.hpp	/^        float m_x = 0.f;$/;"	m	struct:Math::Vector4f	access:public
m_y	src/Math.hpp	/^        float m_y = 0.f;$/;"	m	class:Math::Quaternion	access:public
m_y	src/Math.hpp	/^        float m_y = 0.f;$/;"	m	class:Math::Vector3f	access:public
m_y	src/Math.hpp	/^        float m_y = 0.f;$/;"	m	struct:Math::Vector2f	access:public
m_y	src/Math.hpp	/^        float m_y = 0.f;$/;"	m	struct:Math::Vector4f	access:public
m_yLimit	src/renderer/Camera.hpp	/^    float          m_yLimit;$/;"	m	class:Camera	access:private
m_z	src/Math.hpp	/^        float m_z = 0.f;$/;"	m	class:Math::Quaternion	access:public
m_z	src/Math.hpp	/^        float m_z = 0.f;$/;"	m	class:Math::Vector3f	access:public
m_z	src/Math.hpp	/^        float m_z = 0.f;$/;"	m	struct:Math::Vector4f	access:public
magFilter	src/renderer/vulkan/Image.hpp	/^        VkFilter  magFilter = VK_FILTER_LINEAR;$/;"	m	struct:vk::Texture	access:public
magic	src/q3bsp/Q3Bsp.hpp	/^    char          magic[4];$/;"	m	struct:Q3BspHeader	access:public
main	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	build/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	signature:(int argc, char** argv)
main	build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	signature:(int argc, char** argv)
main	src/main.cpp	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
map	src/q3bsp/Q3Bsp.hpp	/^    unsigned char map[128 * 128 * 3];$/;"	m	struct:Q3BspLightMapLump	access:public
marker	src/renderer/stb_image.c	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon5	file:	access:public
max	src/renderer/RenderContext.cpp	120;"	d	file:
max	src/renderer/RenderContext.cpp	67;"	d	file:
max	src/renderer/vulkan/Buffers.cpp	5;"	d	file:
max	src/renderer/vulkan/Device.cpp	321;"	d	file:
maxAllocationsToMove	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t maxAllocationsToMove;$/;"	m	struct:VmaDefragmentationInfo	access:public
maxBlockCount	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t maxBlockCount;$/;"	m	struct:VmaPoolCreateInfo	access:public
maxBytesToMove	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize maxBytesToMove;$/;"	m	struct:VmaDefragmentationInfo	access:public
max_x	src/renderer/stb_image.c	/^   int max_x, max_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
max_y	src/renderer/stb_image.c	/^   int max_x, max_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
maxcode	src/renderer/stb_image.c	/^   int maxcode[17];$/;"	m	struct:__anon8	file:	access:public
maxcode	src/renderer/stb_image.c	/^   unsigned int maxcode[18];$/;"	m	struct:__anon4	file:	access:public
maxs	src/q3bsp/Q3Bsp.hpp	/^    vec3f maxs;$/;"	m	struct:Q3BspModelLump	access:public
maxs	src/q3bsp/Q3Bsp.hpp	/^    vec3i maxs;$/;"	m	struct:Q3BspLeafLump	access:public
maxs	src/q3bsp/Q3Bsp.hpp	/^    vec3i maxs;$/;"	m	struct:Q3BspNodeLump	access:public
memFlags	src/renderer/vulkan/Buffers.hpp	/^        VkMemoryPropertyFlags memFlags = 0;$/;"	m	struct:vk::BufferOptions	access:public
memoryHeap	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaStatInfo memoryHeap[VK_MAX_MEMORY_HEAPS];$/;"	m	struct:VmaStats	access:public
memoryType	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaStatInfo memoryType[VK_MAX_MEMORY_TYPES];$/;"	m	struct:VmaStats	access:public
memoryType	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t memoryType;$/;"	m	struct:VmaAllocationInfo	access:public
memoryTypeBits	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t memoryTypeBits;$/;"	m	struct:VmaAllocationCreateInfo	access:public
memoryTypeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t memoryTypeIndex;$/;"	m	struct:VmaPoolCreateInfo	access:public
meshVertices	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspMeshVertLump>  meshVertices;$/;"	m	class:Q3BspMap	access:public
meshvert	src/q3bsp/Q3Bsp.hpp	/^    int   meshvert;$/;"	m	struct:Q3BspFaceLump	access:public
min	src/renderer/RenderContext.cpp	119;"	d	file:
min	src/renderer/vulkan/Buffers.cpp	4;"	d	file:
min	src/renderer/vulkan/Device.cpp	320;"	d	file:
minBlockCount	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t minBlockCount;$/;"	m	struct:VmaPoolCreateInfo	access:public
minFilter	src/renderer/vulkan/Image.hpp	/^        VkFilter  minFilter = VK_FILTER_LINEAR;$/;"	m	struct:vk::Texture	access:public
mins	src/q3bsp/Q3Bsp.hpp	/^    vec3f mins;$/;"	m	struct:Q3BspModelLump	access:public
mins	src/q3bsp/Q3Bsp.hpp	/^    vec3i mins;$/;"	m	struct:Q3BspLeafLump	access:public
mins	src/q3bsp/Q3Bsp.hpp	/^    vec3i mins;$/;"	m	struct:Q3BspNodeLump	access:public
mode	src/renderer/vulkan/Pipeline.hpp	/^        VkPolygonMode mode = VK_POLYGON_MODE_FILL;$/;"	m	struct:vk::Pipeline	access:public
models	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspModelLump>     models;$/;"	m	class:Q3BspMap	access:public
n_brushSides	src/q3bsp/Q3Bsp.hpp	/^    int n_brushSides;$/;"	m	struct:Q3BspBrushLump	access:public
n_brushes	src/q3bsp/Q3Bsp.hpp	/^    int   n_brushes;$/;"	m	struct:Q3BspModelLump	access:public
n_faces	src/q3bsp/Q3Bsp.hpp	/^    int   n_faces;$/;"	m	struct:Q3BspModelLump	access:public
n_leafBrushes	src/q3bsp/Q3Bsp.hpp	/^    int   n_leafBrushes;$/;"	m	struct:Q3BspLeafLump	access:public
n_leafFaces	src/q3bsp/Q3Bsp.hpp	/^    int   n_leafFaces;$/;"	m	struct:Q3BspLeafLump	access:public
n_meshverts	src/q3bsp/Q3Bsp.hpp	/^    int   n_meshverts;$/;"	m	struct:Q3BspFaceLump	access:public
n_vecs	src/q3bsp/Q3Bsp.hpp	/^    int n_vecs;$/;"	m	struct:Q3BspVisDataLump	access:public
n_vertexes	src/q3bsp/Q3Bsp.hpp	/^    int   n_vertexes;$/;"	m	struct:Q3BspFaceLump	access:public
name	src/q3bsp/Q3Bsp.hpp	/^    char name[64];$/;"	m	struct:Q3BspEffectLump	access:public
name	src/q3bsp/Q3Bsp.hpp	/^    char name[64];$/;"	m	struct:Q3BspTextureLump	access:public
nearPlane	src/renderer/RenderContext.hpp	/^    float nearPlane = 0.1f;$/;"	m	class:RenderContext	access:public
nodes	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspNodeLump>      nodes;$/;"	m	class:Q3BspMap	access:public
nomore	src/renderer/stb_image.c	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon5	file:	access:public
normal	src/q3bsp/Q3Bsp.hpp	/^    vec3f normal;$/;"	m	struct:Q3BspFaceLump	access:public
normal	src/q3bsp/Q3Bsp.hpp	/^    vec3f normal;$/;"	m	struct:Q3BspPlaneLump	access:public
normal	src/q3bsp/Q3Bsp.hpp	/^    vec3f normal;$/;"	m	struct:Q3BspVertexLump	access:public
numFaces	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int numFaces   = 0;$/;"	m	struct:Q3LeafRenderable	access:public
num_bits	src/renderer/stb_image.c	/^   int num_bits;$/;"	m	struct:__anon9	file:	access:public
offset	src/q3bsp/Q3Bsp.hpp	/^    int offset;$/;"	m	struct:Q3BspDirEntry	access:public
offset	src/q3bsp/Q3Bsp.hpp	/^    int offset;$/;"	m	struct:Q3BspMeshVertLump	access:public
offset	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize offset;$/;"	m	struct:VmaAllocationInfo	access:public
offset	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize offset;$/;"	m	struct:VmaAllocationRequest	access:public
offset	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize offset;$/;"	m	struct:VmaSuballocation	access:public
operator !=	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator!=(const const_iterator& rhs) const$/;"	f	class:VmaList::const_iterator	access:public	signature:(const const_iterator& rhs) const
operator !=	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator!=(const iterator& rhs) const$/;"	f	class:VmaList::iterator	access:public	signature:(const iterator& rhs) const
operator !=	src/renderer/vulkan/vk_mem_alloc.h	/^    bool operator!=(const VmaStlAllocator<U>& rhs) const$/;"	f	class:VmaStlAllocator	access:public	signature:(const VmaStlAllocator<U>& rhs) const
operator ()	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator()(const AllocationInfo& lhs, const AllocationInfo& rhs) const$/;"	f	struct:VmaDefragmentator::AllocationInfoSizeGreater	access:public	signature:(const AllocationInfo& lhs, const AllocationInfo& rhs) const
operator ()	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator()(const BlockInfo* pLhsBlockInfo, const BlockInfo* pRhsBlockInfo) const$/;"	f	struct:VmaDefragmentator::BlockInfoCompareMoveDestination	access:public	signature:(const BlockInfo* pLhsBlockInfo, const BlockInfo* pRhsBlockInfo) const
operator ()	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator()(const BlockInfo* pLhsBlockInfo, const BlockInfo* pRhsBlockInfo) const$/;"	f	struct:VmaDefragmentator::BlockPointerLess	access:public	signature:(const BlockInfo* pLhsBlockInfo, const BlockInfo* pRhsBlockInfo) const
operator ()	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator()(const BlockInfo* pLhsBlockInfo, const VmaDeviceMemoryBlock* pRhsBlock) const$/;"	f	struct:VmaDefragmentator::BlockPointerLess	access:public	signature:(const BlockInfo* pLhsBlockInfo, const VmaDeviceMemoryBlock* pRhsBlock) const
operator ()	src/renderer/vulkan/vk_mem_alloc.h	/^    bool operator()($/;"	f	struct:VmaSuballocationItemSizeLess	access:public	signature:( const VmaSuballocationList::iterator lhs, VkDeviceSize rhsSize) const
operator ()	src/renderer/vulkan/vk_mem_alloc.h	/^    bool operator()($/;"	f	struct:VmaSuballocationItemSizeLess	access:public	signature:( const VmaSuballocationList::iterator lhs, const VmaSuballocationList::iterator rhs) const
operator ()	src/renderer/vulkan/vk_mem_alloc.h	/^    bool operator()(const void* lhs, const void* rhs) const$/;"	f	struct:VmaPointerLess	access:public	signature:(const void* lhs, const void* rhs) const
operator *	src/Math.cpp	/^    Matrix4f Matrix4f::operator*(const Matrix4f &m2) const$/;"	f	class:Math::Matrix4f	signature:(const Matrix4f &m2) const
operator *	src/Math.cpp	/^    Quaternion Quaternion::operator*(const Quaternion &q2) const$/;"	f	class:Math::Quaternion	signature:(const Quaternion &q2) const
operator *	src/Math.cpp	/^    Vector3f Matrix4f::operator*(const Vector3f &v) const$/;"	f	class:Math::Matrix4f	signature:(const Vector3f &v) const
operator *	src/Math.cpp	/^    Vector3f Quaternion::operator*(const Vector3f &vec) const$/;"	f	class:Math::Quaternion	signature:(const Vector3f &vec) const
operator *	src/Math.cpp	/^    Vector3f Vector3f::operator*( float r ) const$/;"	f	class:Math::Vector3f	signature:( float r ) const
operator *	src/Math.cpp	/^    Vector4f Matrix4f::operator*(const Vector4f &v) const$/;"	f	class:Math::Matrix4f	signature:(const Vector4f &v) const
operator *	src/q3bsp/Q3Bsp.hpp	/^    Q3BspVertexLump operator*(const float rhs) const$/;"	f	struct:Q3BspVertexLump	access:public	signature:(const float rhs) const
operator *	src/renderer/vulkan/vk_mem_alloc.h	/^        T& operator*() const$/;"	f	class:VmaList::iterator	access:public	signature:() const
operator *	src/renderer/vulkan/vk_mem_alloc.h	/^        const T& operator*() const$/;"	f	class:VmaList::const_iterator	access:public	signature:() const
operator +	src/Math.cpp	/^    Vector3f Vector3f::operator+(const Vector3f &v2) const $/;"	f	class:Math::Vector3f	signature:(const Vector3f &v2) const
operator +	src/q3bsp/Q3Bsp.hpp	/^    Q3BspVertexLump operator+(const Q3BspVertexLump & rhs) const$/;"	f	struct:Q3BspVertexLump	access:public	signature:(const Q3BspVertexLump & rhs) const
operator ++	src/renderer/vulkan/vk_mem_alloc.h	/^        const_iterator operator++(int)$/;"	f	class:VmaList::const_iterator	access:public	signature:(int)
operator ++	src/renderer/vulkan/vk_mem_alloc.h	/^        const_iterator& operator++()$/;"	f	class:VmaList::const_iterator	access:public	signature:()
operator ++	src/renderer/vulkan/vk_mem_alloc.h	/^        iterator operator++(int)$/;"	f	class:VmaList::iterator	access:public	signature:(int)
operator ++	src/renderer/vulkan/vk_mem_alloc.h	/^        iterator& operator++()$/;"	f	class:VmaList::iterator	access:public	signature:()
operator -	src/Math.cpp	/^    Vector3f Vector3f::operator-(const Vector3f &v2) const$/;"	f	class:Math::Vector3f	signature:(const Vector3f &v2) const
operator --	src/renderer/vulkan/vk_mem_alloc.h	/^        const_iterator operator--(int)$/;"	f	class:VmaList::const_iterator	access:public	signature:(int)
operator --	src/renderer/vulkan/vk_mem_alloc.h	/^        const_iterator& operator--()$/;"	f	class:VmaList::const_iterator	access:public	signature:()
operator --	src/renderer/vulkan/vk_mem_alloc.h	/^        iterator operator--(int)$/;"	f	class:VmaList::iterator	access:public	signature:(int)
operator --	src/renderer/vulkan/vk_mem_alloc.h	/^        iterator& operator--()$/;"	f	class:VmaList::iterator	access:public	signature:()
operator ->	src/renderer/vulkan/vk_mem_alloc.h	/^        T* operator->() const$/;"	f	class:VmaList::iterator	access:public	signature:() const
operator ->	src/renderer/vulkan/vk_mem_alloc.h	/^        const T* operator->() const$/;"	f	class:VmaList::const_iterator	access:public	signature:() const
operator /	src/Math.cpp	/^    Vector3f Vector3f::operator\/(float r) const$/;"	f	class:Math::Vector3f	signature:(float r) const
operator =	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaVector& operator=(const VmaVector<T, AllocatorT>& rhs)$/;"	f	class:VmaVector	access:public	signature:(const VmaVector<T, AllocatorT>& rhs)
operator ==	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator==(const const_iterator& rhs) const$/;"	f	class:VmaList::const_iterator	access:public	signature:(const const_iterator& rhs) const
operator ==	src/renderer/vulkan/vk_mem_alloc.h	/^        bool operator==(const iterator& rhs) const$/;"	f	class:VmaList::iterator	access:public	signature:(const iterator& rhs) const
operator ==	src/renderer/vulkan/vk_mem_alloc.h	/^    bool operator==(const VmaStlAllocator<U>& rhs) const$/;"	f	class:VmaStlAllocator	access:public	signature:(const VmaStlAllocator<U>& rhs) const
operator []	src/Math.hpp	/^        const float& operator[](unsigned int i)const{ return m_m[i]; }$/;"	f	struct:Math::Matrix4f	access:public	signature:(unsigned int i) const
operator []	src/Math.hpp	/^        float& operator[](unsigned int i){ return m_m[i]; }$/;"	f	struct:Math::Matrix4f	access:public	signature:(unsigned int i)
operator []	src/renderer/vulkan/vk_mem_alloc.h	/^    T& operator[](size_t index)$/;"	f	class:VmaVector	access:public	signature:(size_t index)
operator []	src/renderer/vulkan/vk_mem_alloc.h	/^    const T& operator[](size_t index) const$/;"	f	class:VmaVector	access:public	signature:(size_t index) const
operator const vk::Texture*	src/renderer/GameTexture.hpp	/^    operator const vk::Texture*() const { return &m_vkTexture; }$/;"	f	class:GameTexture	access:public	signature:() const
order	src/renderer/stb_image.c	/^   int scan_n, order[4];$/;"	m	struct:__anon5	file:	access:public
out	src/renderer/stb_image.c	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:stbi_gif_struct	file:	access:public
out	src/renderer/stb_image.c	/^   uint8 *idata, *expanded, *out;$/;"	m	struct:__anon11	file:	access:public
pAllocationCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkAllocationCallbacks* pAllocationCallbacks;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
pDeviceMemoryCallbacks	src/renderer/vulkan/vk_mem_alloc.h	/^    const VmaDeviceMemoryCallbacks* pDeviceMemoryCallbacks;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
pHeapSizeLimit	src/renderer/vulkan/vk_mem_alloc.h	/^    const VkDeviceSize* pHeapSizeLimit;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
pItems	src/renderer/vulkan/vk_mem_alloc.h	/^        Item* pItems;$/;"	m	struct:VmaPoolAllocator::ItemBlock	access:public
pMappedData	src/renderer/vulkan/vk_mem_alloc.h	/^    void* pMappedData;$/;"	m	struct:VmaAllocationInfo	access:public
pNext	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaListItem* pNext;$/;"	m	struct:VmaListItem	access:public
pPrev	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaListItem* pPrev;$/;"	m	struct:VmaListItem	access:public
pUserData	src/renderer/vulkan/vk_mem_alloc.h	/^    void* pUserData;$/;"	m	struct:VmaAllocationCreateInfo	access:public
pUserData	src/renderer/vulkan/vk_mem_alloc.h	/^    void* pUserData;$/;"	m	struct:VmaAllocationInfo	access:public
pVulkanFunctions	src/renderer/vulkan/vk_mem_alloc.h	/^    const VmaVulkanFunctions* pVulkanFunctions;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
paeth	src/renderer/stb_image.c	/^static int paeth(int a, int b, int c)$/;"	f	file:	signature:(int a, int b, int c)
pal	src/renderer/stb_image.c	/^   uint8  pal[256][4];$/;"	m	struct:stbi_gif_struct	file:	access:public
parse	src/renderer/stb_image.c	/^   int parse, step;$/;"	m	struct:stbi_gif_struct	file:	access:public
parse_entropy_coded_data	src/renderer/stb_image.c	/^static int parse_entropy_coded_data(jpeg *z)$/;"	f	file:	signature:(jpeg *z)
parse_huffman_block	src/renderer/stb_image.c	/^static int parse_huffman_block(zbuf *a)$/;"	f	file:	signature:(zbuf *a)
parse_png_file	src/renderer/stb_image.c	/^static int parse_png_file(png *z, int scan, int req_comp)$/;"	f	file:	signature:(png *z, int scan, int req_comp)
parse_uncompressed_block	src/renderer/stb_image.c	/^static int parse_uncompressed_block(zbuf *a)$/;"	f	file:	signature:(zbuf *a)
parse_zlib	src/renderer/stb_image.c	/^static int parse_zlib(zbuf *a, int parse_header)$/;"	f	file:	signature:(zbuf *a, int parse_header)
parse_zlib_header	src/renderer/stb_image.c	/^static int parse_zlib_header(zbuf *a)$/;"	f	file:	signature:(zbuf *a)
pfnAllocate	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vmaAllocateDeviceMemoryFunction pfnAllocate;$/;"	m	struct:VmaDeviceMemoryCallbacks	access:public
pfnFree	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vmaFreeDeviceMemoryFunction pfnFree;$/;"	m	struct:VmaDeviceMemoryCallbacks	access:public
physical	src/renderer/vulkan/Base.hpp	/^        VkPhysicalDevice physical  = VK_NULL_HANDLE;$/;"	m	struct:vk::Device	access:public
physicalDevice	src/renderer/vulkan/vk_mem_alloc.h	/^    VkPhysicalDevice physicalDevice;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
pic_copyval	src/renderer/stb_image.c	/^static void pic_copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f	file:	signature:(int channel,stbi_uc *dest,const stbi_uc *src)
pic_is4	src/renderer/stb_image.c	/^static int pic_is4(stbi *s,const char *str)$/;"	f	file:	signature:(stbi *s,const char *str)
pic_load	src/renderer/stb_image.c	/^static stbi_uc *pic_load(stbi *s,int *px,int *py,int *comp,int req_comp)$/;"	f	file:	signature:(stbi *s,int *px,int *py,int *comp,int req_comp)
pic_load2	src/renderer/stb_image.c	/^static stbi_uc *pic_load2(stbi *s,int width,int height,int *comp, stbi_uc *result)$/;"	f	file:	signature:(stbi *s,int width,int height,int *comp, stbi_uc *result)
pic_packet_t	src/renderer/stb_image.c	/^} pic_packet_t;$/;"	t	typeref:struct:__anon13	file:
pic_readval	src/renderer/stb_image.c	/^static stbi_uc *pic_readval(stbi *s, int channel, stbi_uc *dest)$/;"	f	file:	signature:(stbi *s, int channel, stbi_uc *dest)
pic_test	src/renderer/stb_image.c	/^static int pic_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
pipeline	src/renderer/vulkan/Pipeline.hpp	/^        VkPipeline pipeline = VK_NULL_HANDLE;$/;"	m	struct:vk::Pipeline	access:public
plane	src/q3bsp/Q3Bsp.hpp	/^    int   plane;$/;"	m	struct:Q3BspNodeLump	access:public
plane	src/q3bsp/Q3Bsp.hpp	/^    int plane;$/;"	m	struct:Q3BspBrushSideLump	access:public
planes	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspPlaneLump>     planes;$/;"	m	class:Q3BspMap	access:public
png	src/renderer/stb_image.c	/^} png;$/;"	t	typeref:struct:__anon11	file:
pool	src/renderer/vulkan/Base.hpp	/^        VkDescriptorPool pool = VK_NULL_HANDLE;$/;"	m	struct:vk::Descriptor	access:public
pool	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaPool pool;$/;"	m	struct:VmaAllocationCreateInfo	access:public
pop_back	src/renderer/vulkan/vk_mem_alloc.h	/^    void pop_back()$/;"	f	class:VmaVector	access:public	signature:()
pop_front	src/renderer/vulkan/vk_mem_alloc.h	/^    void pop_front()$/;"	f	class:VmaVector	access:public	signature:()
pos	src/renderer/Font.hpp	/^        float pos[3];$/;"	m	struct:Font::GlyphVertex	access:public
position	src/q3bsp/Q3Bsp.hpp	/^    vec3f position;$/;"	m	struct:Q3BspVertexLump	access:public
preferredFlags	src/renderer/vulkan/vk_mem_alloc.h	/^    VkMemoryPropertyFlags preferredFlags;$/;"	m	struct:VmaAllocationCreateInfo	access:public
preferredLargeHeapBlockSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize preferredLargeHeapBlockSize;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
preferredSmallHeapBlockSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize preferredSmallHeapBlockSize;$/;"	m	struct:VmaAllocatorCreateInfo	access:public
prefix	src/renderer/stb_image.c	/^   int16 prefix;$/;"	m	struct:stbi_gif_lzw_struct	file:	access:public
presentFamilyIndex	src/renderer/vulkan/Base.hpp	/^        int presentFamilyIndex = -1; \/\/ physical device presentation family index$/;"	m	struct:vk::Device	access:public
presentModes	src/renderer/vulkan/Device.cpp	/^        VkPresentModeKHR *presentModes = nullptr;$/;"	m	struct:vk::SwapChainInfo	file:	access:public
presentModesCount	src/renderer/vulkan/Device.cpp	/^        uint32_t presentModesCount = 0;$/;"	m	struct:vk::SwapChainInfo	file:	access:public
presentQueue	src/renderer/vulkan/Base.hpp	/^        VkQueue presentQueue  = VK_NULL_HANDLE;$/;"	m	struct:vk::Device	access:public
processEvents	src/InputHandlers.cpp	/^void processEvents()$/;"	f	signature:()
process_frame_header	src/renderer/stb_image.c	/^static int process_frame_header(jpeg *z, int scan)$/;"	f	file:	signature:(jpeg *z, int scan)
process_marker	src/renderer/stb_image.c	/^static int process_marker(jpeg *z, int m)$/;"	f	file:	signature:(jpeg *z, int m)
process_scan_header	src/renderer/stb_image.c	/^static int process_scan_header(jpeg *z)$/;"	f	file:	signature:(jpeg *z)
psd_load	src/renderer/stb_image.c	/^static stbi_uc *psd_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
psd_test	src/renderer/stb_image.c	/^static int psd_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
push_back	src/renderer/vulkan/vk_mem_alloc.h	/^    void push_back(const T& src)$/;"	f	class:VmaVector	access:public	signature:(const T& src)
push_back	src/renderer/vulkan/vk_mem_alloc.h	/^    void push_back(const T& value) { m_RawList.PushBack(value); }$/;"	f	class:VmaList	access:public	signature:(const T& value)
push_front	src/renderer/vulkan/vk_mem_alloc.h	/^    void push_front(const T& src)$/;"	f	class:VmaVector	access:public	signature:(const T& src)
qnxnto	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
quadraticPatches	src/q3bsp/Q3BspPatch.hpp	/^    std::vector<Q3BspBiquadPatch> quadraticPatches;$/;"	m	struct:Q3BspPatch	access:public
queueFamilyIndex	src/renderer/vulkan/Base.hpp	/^        int queueFamilyIndex   = -1; \/\/ physical device queue family index$/;"	m	struct:vk::Device	access:public
ratio	src/renderer/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
raw_data	src/renderer/stb_image.c	/^      void *raw_data;$/;"	m	struct:__anon5::__anon6	file:	access:public
read	src/renderer/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read $/;"	m	struct:__anon15	access:public
read_from_callbacks	src/renderer/stb_image.c	/^   int read_from_callbacks;$/;"	m	struct:__anon2	file:	access:public
refill_buffer	src/renderer/stb_image.c	/^static void refill_buffer(stbi *s)$/;"	f	file:	signature:(stbi *s)
releaseTexture	src/renderer/vulkan/Image.cpp	/^    void releaseTexture(const Device &device, Texture &texture)$/;"	f	namespace:vk	signature:(const Device &device, Texture &texture)
remove	src/renderer/vulkan/vk_mem_alloc.h	/^    void remove(size_t index)$/;"	f	class:VmaVector	access:public	signature:(size_t index)
renderFinishedSemaphore	src/renderer/RenderContext.hpp	/^    VkSemaphore renderFinishedSemaphore;$/;"	m	class:RenderContext	access:public
renderLightmaps	src/renderer/RenderContext.hpp	/^    int renderLightmaps = 0;$/;"	m	struct:UniformBufferObject	access:public
renderPass	src/renderer/vulkan/Pipeline.hpp	/^        VkRenderPass renderPass = VK_NULL_HANDLE;$/;"	m	struct:vk::RenderPass	access:public
renderUIFinishedSemaphore	src/renderer/RenderContext.hpp	/^    VkSemaphore renderUIFinishedSemaphore;$/;"	m	class:RenderContext	access:public
requiredFlags	src/renderer/vulkan/vk_mem_alloc.h	/^    VkMemoryPropertyFlags requiredFlags;$/;"	m	struct:VmaAllocationCreateInfo	access:public
resample	src/renderer/stb_image.c	/^   resample_row_func resample;$/;"	m	struct:__anon7	file:	access:public
resample_row_1	src/renderer/stb_image.c	/^static uint8 *resample_row_1(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)$/;"	f	file:	signature:(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)
resample_row_func	src/renderer/stb_image.c	/^typedef uint8 *(*resample_row_func)(uint8 *out, uint8 *in0, uint8 *in1,$/;"	t	file:
resample_row_generic	src/renderer/stb_image.c	/^static uint8 *resample_row_generic(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)$/;"	f	file:	signature:(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)
resample_row_h_2	src/renderer/stb_image.c	/^static uint8*  resample_row_h_2(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)$/;"	f	file:	signature:(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)
resample_row_hv_2	src/renderer/stb_image.c	/^static uint8 *resample_row_hv_2(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)$/;"	f	file:	signature:(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)
resample_row_v_2	src/renderer/stb_image.c	/^static uint8* resample_row_v_2(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)$/;"	f	file:	signature:(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)
reserve	src/renderer/vulkan/vk_mem_alloc.h	/^    void reserve(size_t newCapacity, bool freeMemory = false)$/;"	f	class:VmaVector	access:public	signature:(size_t newCapacity, bool freeMemory = false)
reset	src/renderer/stb_image.c	/^static void reset(jpeg *j)$/;"	f	file:	signature:(jpeg *j)
resize	src/renderer/vulkan/vk_mem_alloc.h	/^    void resize(size_t newCount, bool freeMemory = false)$/;"	f	class:VmaVector	access:public	signature:(size_t newCount, bool freeMemory = false)
restart_interval	src/renderer/stb_image.c	/^   int restart_interval, todo;$/;"	m	struct:__anon5	file:	access:public
right	src/renderer/RenderContext.hpp	/^    float right  = 0.f;$/;"	m	class:RenderContext	access:public
rotateX	src/renderer/Camera.cpp	/^void Camera::rotateX(float angle)$/;"	f	class:Camera	signature:(float angle)
rotateY	src/renderer/Camera.cpp	/^void Camera::rotateY(float angle)$/;"	f	class:Camera	signature:(float angle)
rotateZ	src/renderer/Camera.cpp	/^void Camera::rotateZ(float angle)$/;"	f	class:Camera	signature:(float angle)
s	src/renderer/stb_image.c	/^   stbi *s;$/;"	m	struct:__anon11	file:	access:public
s	src/renderer/stb_image.c	/^   stbi *s;$/;"	m	struct:__anon5	file:	access:public
s_tesselationLevel	src/q3bsp/Q3BspMap.cpp	/^const int   Q3BspMap::s_tesselationLevel = 10;   \/\/ level of curved surface tesselation$/;"	m	class:Q3BspMap	file:
s_tesselationLevel	src/q3bsp/Q3BspMap.hpp	/^    static const int   s_tesselationLevel; \/\/ level of curved surface tesselation$/;"	m	class:Q3BspMap	access:public
s_worldScale	src/q3bsp/Q3BspMap.cpp	/^const float Q3BspMap::s_worldScale       = 64.f; \/\/ scale down factor for the map$/;"	m	class:Q3BspMap	file:
s_worldScale	src/q3bsp/Q3BspMap.hpp	/^    static const float s_worldScale;       \/\/ scale down factor for the map$/;"	m	class:Q3BspMap	access:public
sampler	src/renderer/vulkan/Image.hpp	/^        VkSampler sampler   = VK_NULL_HANDLE;$/;"	m	struct:vk::Texture	access:public
sc	src/renderer/vulkan/Device.hpp	/^        VkSwapchainKHR sc = VK_NULL_HANDLE;$/;"	m	struct:vk::SwapChain	access:public
scan_n	src/renderer/stb_image.c	/^   int scan_n, order[4];$/;"	m	struct:__anon5	file:	access:public
scrRatio	src/renderer/RenderContext.hpp	/^    float scrRatio  = 0.f;$/;"	m	class:RenderContext	access:public
selectPhysicalDevice	src/renderer/vulkan/Device.cpp	/^    VkResult selectPhysicalDevice(const VkInstance &instance, const VkSurfaceKHR &surface, Device *device)$/;"	f	namespace:vk	signature:(const VkInstance &instance, const VkSurfaceKHR &surface, Device *device)
set	src/renderer/vulkan/Base.hpp	/^        VkDescriptorSet  set  = VK_NULL_HANDLE; \/\/ automatically cleaned with descriptor pools$/;"	m	struct:vk::Descriptor	access:public
setLayout	src/renderer/vulkan/Base.hpp	/^        VkDescriptorSetLayout setLayout = VK_NULL_HANDLE;$/;"	m	struct:vk::Descriptor	access:public
shiftsigned	src/renderer/stb_image.c	/^static int shiftsigned(int v, int shift, int bits)$/;"	f	file:	signature:(int v, int shift, int bits)
singleLineMode	src/renderer/vulkan/vk_mem_alloc.h	/^        bool singleLineMode;$/;"	m	struct:VmaJsonWriter::StackItem	access:public
size	src/q3bsp/Q3Bsp.hpp	/^    int  size;$/;"	m	struct:Q3BspEntityLump	access:public
size	src/q3bsp/Q3Bsp.hpp	/^    vec2i size;$/;"	m	struct:Q3BspFaceLump	access:public
size	src/renderer/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon13	file:	access:public
size	src/renderer/stb_image.c	/^   uint8  size[257];$/;"	m	struct:__anon4	file:	access:public
size	src/renderer/stb_image.c	/^   uint8  size[288];$/;"	m	struct:__anon8	file:	access:public
size	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize size;$/;"	m	struct:VmaAllocationInfo	access:public
size	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize size;$/;"	m	struct:VmaPoolStats	access:public
size	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize size;$/;"	m	struct:VmaSuballocation	access:public
size	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t size() const { return m_Count; }$/;"	f	class:VmaVector	access:public	signature:() const
size	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t size() const { return m_RawList.GetCount(); }$/;"	f	class:VmaList	access:public	signature:() const
skip	src/renderer/stb_image.c	/^static void skip(stbi *s, int n)$/;"	f	file:	signature:(stbi *s, int n)
skip	src/renderer/stb_image.h	/^   void     (*skip)  (void *user,unsigned n);            \/\/ skip the next 'n' bytes$/;"	m	struct:__anon15	access:public
start_callbacks	src/renderer/stb_image.c	/^static void start_callbacks(stbi *s, stbi_io_callbacks *c, void *user)$/;"	f	file:	signature:(stbi *s, stbi_io_callbacks *c, void *user)
start_file	src/renderer/stb_image.c	/^static void start_file(stbi *s, FILE *f)$/;"	f	file:	signature:(stbi *s, FILE *f)
start_mem	src/renderer/stb_image.c	/^static void start_mem(stbi *s, uint8 const *buffer, int len)$/;"	f	file:	signature:(stbi *s, uint8 const *buffer, int len)
start_x	src/renderer/stb_image.c	/^   int start_x, start_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
start_y	src/renderer/stb_image.c	/^   int start_x, start_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi	src/renderer/stb_image.c	/^} stbi;$/;"	t	typeref:struct:__anon2	file:
stbi_YCbCr_installed	src/renderer/stb_image.c	/^static stbi_YCbCr_to_RGB_run stbi_YCbCr_installed = YCbCr_to_RGB_row;$/;"	v	file:
stbi_YCbCr_to_RGB_run	src/renderer/stb_image.h	/^typedef void (*stbi_YCbCr_to_RGB_run)(stbi_uc *output, stbi_uc const  *y, stbi_uc const *cb, stbi_uc const *cr, int count, int step);$/;"	t
stbi_bmp_info	src/renderer/stb_image.c	/^static int stbi_bmp_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_bmp_load	src/renderer/stb_image.c	/^static stbi_uc *stbi_bmp_load(stbi *s,int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s,int *x, int *y, int *comp, int req_comp)
stbi_bmp_test	src/renderer/stb_image.c	/^static int stbi_bmp_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_convert_iphone_png_to_rgb	src/renderer/stb_image.c	/^void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f	signature:(int flag_true_if_should_convert)
stbi_de_iphone	src/renderer/stb_image.c	/^static void stbi_de_iphone(png *z)$/;"	f	file:	signature:(png *z)
stbi_de_iphone_flag	src/renderer/stb_image.c	/^static int stbi_de_iphone_flag = 0;$/;"	v	file:
stbi_dequantize_t	src/renderer/stb_image.c	/^typedef uint8 stbi_dequantize_t;$/;"	t	file:
stbi_dequantize_t	src/renderer/stb_image.c	/^typedef unsigned short stbi_dequantize_t;$/;"	t	file:
stbi_failure_reason	src/renderer/stb_image.c	/^const char *stbi_failure_reason(void)$/;"	f	signature:(void)
stbi_fill_gif_background	src/renderer/stb_image.c	/^static void stbi_fill_gif_background(stbi_gif *g)$/;"	f	file:	signature:(stbi_gif *g)
stbi_gif	src/renderer/stb_image.c	/^} stbi_gif;$/;"	t	typeref:struct:stbi_gif_struct	file:
stbi_gif_header	src/renderer/stb_image.c	/^static int stbi_gif_header(stbi *s, stbi_gif *g, int *comp, int is_info)$/;"	f	file:	signature:(stbi *s, stbi_gif *g, int *comp, int is_info)
stbi_gif_info	src/renderer/stb_image.c	/^static int stbi_gif_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_gif_info_raw	src/renderer/stb_image.c	/^static int stbi_gif_info_raw(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_gif_load	src/renderer/stb_image.c	/^static stbi_uc *stbi_gif_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_gif_load_next	src/renderer/stb_image.c	/^static uint8 *stbi_gif_load_next(stbi *s, stbi_gif *g, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, stbi_gif *g, int *comp, int req_comp)
stbi_gif_lzw	src/renderer/stb_image.c	/^} stbi_gif_lzw;$/;"	t	typeref:struct:stbi_gif_lzw_struct	file:
stbi_gif_lzw_struct	src/renderer/stb_image.c	/^typedef struct stbi_gif_lzw_struct {$/;"	s	file:
stbi_gif_lzw_struct::first	src/renderer/stb_image.c	/^   uint8 first;$/;"	m	struct:stbi_gif_lzw_struct	file:	access:public
stbi_gif_lzw_struct::prefix	src/renderer/stb_image.c	/^   int16 prefix;$/;"	m	struct:stbi_gif_lzw_struct	file:	access:public
stbi_gif_lzw_struct::suffix	src/renderer/stb_image.c	/^   uint8 suffix;$/;"	m	struct:stbi_gif_lzw_struct	file:	access:public
stbi_gif_parse_colortable	src/renderer/stb_image.c	/^static void stbi_gif_parse_colortable(stbi *s, uint8 pal[256][4], int num_entries, int transp)$/;"	f	file:	signature:(stbi *s, uint8 pal[256][4], int num_entries, int transp)
stbi_gif_struct	src/renderer/stb_image.c	/^typedef struct stbi_gif_struct$/;"	s	file:
stbi_gif_struct::bgindex	src/renderer/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::codes	src/renderer/stb_image.c	/^   stbi_gif_lzw codes[4096];$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::color_table	src/renderer/stb_image.c	/^   uint8 *color_table;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::cur_x	src/renderer/stb_image.c	/^   int cur_x, cur_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::cur_y	src/renderer/stb_image.c	/^   int cur_x, cur_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::eflags	src/renderer/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::flags	src/renderer/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::h	src/renderer/stb_image.c	/^   int w,h;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::lflags	src/renderer/stb_image.c	/^   int lflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::line_size	src/renderer/stb_image.c	/^   int line_size;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::lpal	src/renderer/stb_image.c	/^   uint8 lpal[256][4];$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::max_x	src/renderer/stb_image.c	/^   int max_x, max_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::max_y	src/renderer/stb_image.c	/^   int max_x, max_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::out	src/renderer/stb_image.c	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::pal	src/renderer/stb_image.c	/^   uint8  pal[256][4];$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::parse	src/renderer/stb_image.c	/^   int parse, step;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::ratio	src/renderer/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::start_x	src/renderer/stb_image.c	/^   int start_x, start_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::start_y	src/renderer/stb_image.c	/^   int start_x, start_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::step	src/renderer/stb_image.c	/^   int parse, step;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::transparent	src/renderer/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::w	src/renderer/stb_image.c	/^   int w,h;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_test	src/renderer/stb_image.c	/^static int stbi_gif_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_hdr_info	src/renderer/stb_image.c	/^static int stbi_hdr_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_hdr_load	src/renderer/stb_image.c	/^static float *stbi_hdr_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_hdr_test	src/renderer/stb_image.c	/^static int stbi_hdr_test(stbi* s)$/;"	f	file:	signature:(stbi* s)
stbi_hdr_to_ldr_gamma	src/renderer/stb_image.c	/^void   stbi_hdr_to_ldr_gamma(float gamma) { h2l_gamma_i = 1\/gamma; }$/;"	f	signature:(float gamma)
stbi_hdr_to_ldr_scale	src/renderer/stb_image.c	/^void   stbi_hdr_to_ldr_scale(float scale) { h2l_scale_i = 1\/scale; }$/;"	f	signature:(float scale)
stbi_idct_8x8	src/renderer/stb_image.h	/^typedef void (*stbi_idct_8x8)(stbi_uc *out, int out_stride, short data[64], unsigned short *dequantize);$/;"	t
stbi_idct_installed	src/renderer/stb_image.c	/^static stbi_idct_8x8 stbi_idct_installed = idct_block;$/;"	v	file:
stbi_image_free	src/renderer/stb_image.c	/^void stbi_image_free(void *retval_from_stbi_load)$/;"	f	signature:(void *retval_from_stbi_load)
stbi_info	src/renderer/stb_image.c	/^int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp)
stbi_info_from_callbacks	src/renderer/stb_image.c	/^int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f	signature:(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)
stbi_info_from_file	src/renderer/stb_image.c	/^int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp)
stbi_info_from_memory	src/renderer/stb_image.c	/^int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp)
stbi_info_main	src/renderer/stb_image.c	/^static int stbi_info_main(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_inline	src/renderer/stb_image.c	84;"	d	file:
stbi_inline	src/renderer/stb_image.c	86;"	d	file:
stbi_inline	src/renderer/stb_image.c	89;"	d	file:
stbi_install_YCbCr_to_RGB	src/renderer/stb_image.c	/^void stbi_install_YCbCr_to_RGB(stbi_YCbCr_to_RGB_run func)$/;"	f	signature:(stbi_YCbCr_to_RGB_run func)
stbi_install_idct	src/renderer/stb_image.c	/^void stbi_install_idct(stbi_idct_8x8 func)$/;"	f	signature:(stbi_idct_8x8 func)
stbi_io_callbacks	src/renderer/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon15
stbi_is_hdr	src/renderer/stb_image.c	/^extern int      stbi_is_hdr          (char const *filename)$/;"	f	signature:(char const *filename)
stbi_is_hdr_from_callbacks	src/renderer/stb_image.c	/^extern int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user)
stbi_is_hdr_from_file	src/renderer/stb_image.c	/^extern int      stbi_is_hdr_from_file(FILE *f)$/;"	f	signature:(FILE *f)
stbi_is_hdr_from_memory	src/renderer/stb_image.c	/^int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f	signature:(stbi_uc const *buffer, int len)
stbi_jpeg_info	src/renderer/stb_image.c	/^static int stbi_jpeg_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_jpeg_info_raw	src/renderer/stb_image.c	/^static int stbi_jpeg_info_raw(jpeg *j, int *x, int *y, int *comp)$/;"	f	file:	signature:(jpeg *j, int *x, int *y, int *comp)
stbi_jpeg_load	src/renderer/stb_image.c	/^static unsigned char *stbi_jpeg_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_jpeg_test	src/renderer/stb_image.c	/^static int stbi_jpeg_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_ldr_to_hdr_gamma	src/renderer/stb_image.c	/^void   stbi_ldr_to_hdr_gamma(float gamma) { l2h_gamma = gamma; }$/;"	f	signature:(float gamma)
stbi_ldr_to_hdr_scale	src/renderer/stb_image.c	/^void   stbi_ldr_to_hdr_scale(float scale) { l2h_scale = scale; }$/;"	f	signature:(float scale)
stbi_load	src/renderer/stb_image.c	/^unsigned char *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_load_from_callbacks	src/renderer/stb_image.c	/^unsigned char *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_load_from_file	src/renderer/stb_image.c	/^unsigned char *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_load_from_memory	src/renderer/stb_image.c	/^unsigned char *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_load_main	src/renderer/stb_image.c	/^static unsigned char *stbi_load_main(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_loadf	src/renderer/stb_image.c	/^float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_callbacks	src/renderer/stb_image.c	/^float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_file	src/renderer/stb_image.c	/^float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_memory	src/renderer/stb_image.c	/^float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_loadf_main	src/renderer/stb_image.c	/^float *stbi_loadf_main(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_lrot	src/renderer/stb_image.c	115;"	d	file:
stbi_lrot	src/renderer/stb_image.c	117;"	d	file:
stbi_out_gif_code	src/renderer/stb_image.c	/^static void stbi_out_gif_code(stbi_gif *g, uint16 code)$/;"	f	file:	signature:(stbi_gif *g, uint16 code)
stbi_pic_info	src/renderer/stb_image.c	/^static int stbi_pic_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_pic_load	src/renderer/stb_image.c	/^static stbi_uc *stbi_pic_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_pic_test	src/renderer/stb_image.c	/^static int stbi_pic_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_png_info	src/renderer/stb_image.c	/^static int      stbi_png_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_png_info_raw	src/renderer/stb_image.c	/^static int stbi_png_info_raw(png *p, int *x, int *y, int *comp)$/;"	f	file:	signature:(png *p, int *x, int *y, int *comp)
stbi_png_load	src/renderer/stb_image.c	/^static unsigned char *stbi_png_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_png_partial	src/renderer/stb_image.c	/^int stbi_png_partial; \/\/ a quick hack to only allow decoding some of a PNG... I should implement real streaming support instead$/;"	v
stbi_png_test	src/renderer/stb_image.c	/^static int stbi_png_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_process_gif_raster	src/renderer/stb_image.c	/^static uint8 *stbi_process_gif_raster(stbi *s, stbi_gif *g)$/;"	f	file:	signature:(stbi *s, stbi_gif *g)
stbi_psd_info	src/renderer/stb_image.c	/^static int stbi_psd_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_psd_load	src/renderer/stb_image.c	/^static stbi_uc *stbi_psd_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_psd_test	src/renderer/stb_image.c	/^static int stbi_psd_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_resample	src/renderer/stb_image.c	/^} stbi_resample;$/;"	t	typeref:struct:__anon7	file:
stbi_rewind	src/renderer/stb_image.c	/^static void stbi_rewind(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_set_unpremultiply_on_load	src/renderer/stb_image.c	/^void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f	signature:(int flag_true_if_should_unpremultiply)
stbi_stdio_callbacks	src/renderer/stb_image.c	/^static stbi_io_callbacks stbi_stdio_callbacks =$/;"	v	file:
stbi_tga_info	src/renderer/stb_image.c	/^int stbi_tga_info(stbi *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi *s, int *x, int *y, int *comp)
stbi_tga_load	src/renderer/stb_image.c	/^static stbi_uc *stbi_tga_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_tga_test	src/renderer/stb_image.c	/^static int stbi_tga_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_uc	src/renderer/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_unpremultiply_on_load	src/renderer/stb_image.c	/^static int stbi_unpremultiply_on_load = 0;$/;"	v	file:
stbi_zlib_decode_buffer	src/renderer/stb_image.c	/^int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f	signature:(char *obuffer, int olen, char const *ibuffer, int ilen)
stbi_zlib_decode_malloc	src/renderer/stb_image.c	/^char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f	signature:(char const *buffer, int len, int *outlen)
stbi_zlib_decode_malloc_guesssize	src/renderer/stb_image.c	/^char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f	signature:(const char *buffer, int len, int initial_size, int *outlen)
stbi_zlib_decode_malloc_guesssize_headerflag	src/renderer/stb_image.c	/^char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f	signature:(const char *buffer, int len, int initial_size, int *outlen, int parse_header)
stbi_zlib_decode_noheader_buffer	src/renderer/stb_image.c	/^int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f	signature:(char *obuffer, int olen, const char *ibuffer, int ilen)
stbi_zlib_decode_noheader_malloc	src/renderer/stb_image.c	/^char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f	signature:(char const *buffer, int len, int *outlen)
stdio_eof	src/renderer/stb_image.c	/^static int stdio_eof(void *user)$/;"	f	file:	signature:(void *user)
stdio_read	src/renderer/stb_image.c	/^static int stdio_read(void *user, char *data, int size)$/;"	f	file:	signature:(void *user, char *data, int size)
stdio_skip	src/renderer/stb_image.c	/^static void stdio_skip(void *user, unsigned n)$/;"	f	file:	signature:(void *user, unsigned n)
step	src/renderer/stb_image.c	/^   int parse, step;$/;"	m	struct:stbi_gif_struct	file:	access:public
submitInfo	src/renderer/RenderContext.hpp	/^    VkSubmitInfo submitInfo = {};$/;"	m	class:RenderContext	access:public
suffix	src/renderer/stb_image.c	/^   uint8 suffix;$/;"	m	struct:stbi_gif_lzw_struct	file:	access:public
sumFreeSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize sumFreeSize; \/\/ Sum size of free items that overlap with proposed allocation.$/;"	m	struct:VmaAllocationRequest	access:public
sumItemSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize sumItemSize; \/\/ Sum size of items to make lost that overlap with proposed allocation.$/;"	m	struct:VmaAllocationRequest	access:public
surfaceCaps	src/renderer/vulkan/Device.cpp	/^        VkSurfaceCapabilitiesKHR surfaceCaps = {};$/;"	m	struct:vk::SwapChainInfo	file:	access:public
swapChain	src/renderer/RenderContext.hpp	/^    vk::SwapChain swapChain;$/;"	m	class:RenderContext	access:public
sz_vecs	src/q3bsp/Q3Bsp.hpp	/^    int sz_vecs;$/;"	m	struct:Q3BspVisDataLump	access:public
texcoord	src/q3bsp/Q3Bsp.hpp	/^    vec2f texcoord[2];$/;"	m	struct:Q3BspVertexLump	access:public
texture	src/q3bsp/Q3Bsp.hpp	/^    int   texture;$/;"	m	struct:Q3BspFaceLump	access:public
texture	src/q3bsp/Q3Bsp.hpp	/^    int texture;$/;"	m	struct:Q3BspBrushLump	access:public
texture	src/q3bsp/Q3Bsp.hpp	/^    int texture;$/;"	m	struct:Q3BspBrushSideLump	access:public
textureIdx	src/q3bsp/Q3BspPatch.hpp	/^    int textureIdx  = 0; \/\/ surface texture index$/;"	m	struct:Q3BspPatch	access:public
textures	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspTextureLump>   textures;$/;"	m	class:Q3BspMap	access:public
tga_info	src/renderer/stb_image.c	/^static int tga_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
tga_load	src/renderer/stb_image.c	/^static stbi_uc *tga_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
tga_test	src/renderer/stb_image.c	/^static int tga_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
todo	src/renderer/stb_image.c	/^   int restart_interval, todo;$/;"	m	struct:__anon5	file:	access:public
tokenizeString	src/StringHelpers.cpp	/^    std::vector<std::string> tokenizeString(const char *str, char c, int tokenLimit)$/;"	f	namespace:StringHelpers	signature:(const char *str, char c, int tokenLimit)
top	src/renderer/RenderContext.hpp	/^    float top = 0.f;$/;"	m	class:RenderContext	access:public
topology	src/renderer/vulkan/Pipeline.hpp	/^        VkPrimitiveTopology topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;$/;"	m	struct:vk::Pipeline	access:public
total	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaStatInfo total;$/;"	m	struct:VmaStats	access:public
totalFaces	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int totalFaces      = 0;$/;"	m	struct:BspStats	access:public
totalPatches	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int totalPatches    = 0;$/;"	m	struct:BspStats	access:public
totalVertices	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int totalVertices   = 0;$/;"	m	struct:BspStats	access:public
tq	src/renderer/stb_image.c	/^      int tq;$/;"	m	struct:__anon5::__anon6	file:	access:public
transitionImageLayout	src/renderer/vulkan/Image.cpp	/^    void transitionImageLayout(const Device &device, const VkCommandPool &commandPool, const Texture &texture, const VkImageLayout &oldLayout, const VkImageLayout &newLayout)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, const Texture &texture, const VkImageLayout &oldLayout, const VkImageLayout &newLayout)
transparent	src/renderer/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
trim	src/StringHelpers.cpp	/^    std::string trim(const std::string &str, char c)$/;"	f	namespace:StringHelpers	signature:(const std::string &str, char c)
type	src/q3bsp/Q3Bsp.hpp	/^    int   type;$/;"	m	struct:Q3BspFaceLump	access:public
type	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int type  = 0;$/;"	m	struct:Q3FaceRenderable	access:public
type	src/renderer/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon13	file:	access:public
type	src/renderer/stb_image.c	/^   uint32 type;$/;"	m	struct:__anon10	file:	access:public
type	src/renderer/vulkan/vk_mem_alloc.h	/^        COLLECTION_TYPE type;$/;"	m	struct:VmaJsonWriter::StackItem	access:public
type	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaSuballocationType type;$/;"	m	struct:VmaSuballocation	access:public
uint	src/renderer/stb_image.c	/^typedef unsigned int   uint;$/;"	t	file:
uint16	src/renderer/stb_image.c	/^typedef unsigned short uint16;$/;"	t	file:
uint32	src/renderer/stb_image.c	/^typedef unsigned int   uint32;$/;"	t	file:
uint32_t	src/renderer/RenderContext.hpp	/^enum Attributes : uint32_t$/;"	g
uint8	src/renderer/stb_image.c	/^typedef unsigned char  uint8;$/;"	t	file:
uniformBuffer	src/q3bsp/Q3BspRenderHelpers.hpp	/^    vk::Buffer uniformBuffer;$/;"	m	struct:RenderBuffers	access:public
unknown	src/q3bsp/Q3Bsp.hpp	/^    int  unknown;$/;"	m	struct:Q3BspEffectLump	access:public
unusedBytes	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize unusedBytes;$/;"	m	struct:VmaStatInfo	access:public
unusedRangeCount	src/renderer/vulkan/vk_mem_alloc.h	/^    size_t unusedRangeCount;$/;"	m	struct:VmaPoolStats	access:public
unusedRangeCount	src/renderer/vulkan/vk_mem_alloc.h	/^    uint32_t unusedRangeCount;$/;"	m	struct:VmaStatInfo	access:public
unusedRangeSizeAvg	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize unusedRangeSizeMin, unusedRangeSizeAvg, unusedRangeSizeMax;$/;"	m	struct:VmaStatInfo	access:public
unusedRangeSizeMax	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize unusedRangeSizeMax;$/;"	m	struct:VmaPoolStats	access:public
unusedRangeSizeMax	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize unusedRangeSizeMin, unusedRangeSizeAvg, unusedRangeSizeMax;$/;"	m	struct:VmaStatInfo	access:public
unusedRangeSizeMin	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize unusedRangeSizeMin, unusedRangeSizeAvg, unusedRangeSizeMax;$/;"	m	struct:VmaStatInfo	access:public
unusedSize	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize unusedSize;$/;"	m	struct:VmaPoolStats	access:public
usage	src/renderer/vulkan/Buffers.hpp	/^        VkBufferUsageFlags usage = 0;$/;"	m	struct:vk::BufferOptions	access:public
usage	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaMemoryUsage usage;$/;"	m	struct:VmaAllocationCreateInfo	access:public
useAlphaTest	src/renderer/RenderContext.hpp	/^    int useAlphaTest = 0;$/;"	m	struct:UniformBufferObject	access:public
useLightmaps	src/renderer/RenderContext.hpp	/^    int useLightmaps = 1;$/;"	m	struct:UniformBufferObject	access:public
usedBytes	src/renderer/vulkan/vk_mem_alloc.h	/^    VkDeviceSize usedBytes;$/;"	m	struct:VmaStatInfo	access:public
uv	src/renderer/Font.hpp	/^        float uv[2];$/;"	m	struct:Font::GlyphVertex	access:public
v	src/renderer/stb_image.c	/^      int h,v;$/;"	m	struct:__anon5::__anon6	file:	access:public
validate_uint32	src/renderer/stb_image.c	/^typedef unsigned char validate_uint32[sizeof(uint32)==4 ? 1 : -1];$/;"	t	file:
validationLayerCallback	src/renderer/vulkan/Validation.cpp	/^static VkDebugReportCallbackEXT validationLayerCallback;$/;"	v	file:
validationLayers	src/renderer/vulkan/Validation.hpp	/^    static const char *validationLayers[] = { "VK_LAYER_LUNARG_standard_validation" };$/;"	m	namespace:vk
validationLayersAvailable	src/renderer/vulkan/Validation.cpp	/^    bool validationLayersAvailable(const char **requested, size_t count)$/;"	f	namespace:vk	signature:(const char **requested, size_t count)
value	src/renderer/stb_image.c	/^   uint16 value[288]; $/;"	m	struct:__anon8	file:	access:public
valueCount	src/renderer/vulkan/vk_mem_alloc.h	/^        uint32_t valueCount;$/;"	m	struct:VmaJsonWriter::StackItem	access:public
value_type	src/renderer/vulkan/vk_mem_alloc.h	/^    typedef T value_type;$/;"	t	class:VmaStlAllocator	access:public
value_type	src/renderer/vulkan/vk_mem_alloc.h	/^    typedef T value_type;$/;"	t	class:VmaVector	access:public
values	src/renderer/stb_image.c	/^   uint8  values[256];$/;"	m	struct:__anon4	file:	access:public
vec2f	src/q3bsp/Q3Bsp.hpp	/^struct vec2f$/;"	s
vec2f::x	src/q3bsp/Q3Bsp.hpp	/^    float x, y;$/;"	m	struct:vec2f	access:public
vec2f::y	src/q3bsp/Q3Bsp.hpp	/^    float x, y;$/;"	m	struct:vec2f	access:public
vec2i	src/q3bsp/Q3Bsp.hpp	/^struct vec2i$/;"	s
vec2i::x	src/q3bsp/Q3Bsp.hpp	/^    int x, y;$/;"	m	struct:vec2i	access:public
vec2i::y	src/q3bsp/Q3Bsp.hpp	/^    int x, y;$/;"	m	struct:vec2i	access:public
vec3f	src/q3bsp/Q3Bsp.hpp	/^struct vec3f$/;"	s
vec3f::x	src/q3bsp/Q3Bsp.hpp	/^    float x, y, z;$/;"	m	struct:vec3f	access:public
vec3f::y	src/q3bsp/Q3Bsp.hpp	/^    float x, y, z;$/;"	m	struct:vec3f	access:public
vec3f::z	src/q3bsp/Q3Bsp.hpp	/^    float x, y, z;$/;"	m	struct:vec3f	access:public
vec3i	src/q3bsp/Q3Bsp.hpp	/^struct vec3i$/;"	s
vec3i::x	src/q3bsp/Q3Bsp.hpp	/^    int x, y, z;$/;"	m	struct:vec3i	access:public
vec3i::y	src/q3bsp/Q3Bsp.hpp	/^    int x, y, z;$/;"	m	struct:vec3i	access:public
vec3i::z	src/q3bsp/Q3Bsp.hpp	/^    int x, y, z;$/;"	m	struct:vec3i	access:public
vecs	src/q3bsp/Q3Bsp.hpp	/^    unsigned char* vecs;$/;"	m	struct:Q3BspVisDataLump	access:public
version	src/q3bsp/Q3Bsp.hpp	/^    int           version;$/;"	m	struct:Q3BspHeader	access:public
vertShader	src/renderer/vulkan/Pipeline.cpp	/^        VkShaderModule vertShader = VK_NULL_HANDLE;$/;"	m	struct:vk::ShaderProgram	file:	access:public
vertex	src/q3bsp/Q3Bsp.hpp	/^    int   vertex;$/;"	m	struct:Q3BspFaceLump	access:public
vertexBuffer	src/q3bsp/Q3BspRenderHelpers.hpp	/^    vk::Buffer vertexBuffer;$/;"	m	struct:FaceBuffers	access:public
vertexCount	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int vertexCount = 0;$/;"	m	struct:FaceBuffers	access:public
vertices	src/q3bsp/Q3BspMap.hpp	/^    std::vector<Q3BspVertexLump>    vertices;$/;"	m	class:Q3BspMap	access:public
verts	src/renderer/Font.hpp	/^        GlyphVertex verts[4];$/;"	m	struct:Font::Glyph	access:public
visCluster	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int visCluster = 0;$/;"	m	struct:Q3LeafRenderable	access:public
visData	src/q3bsp/Q3BspMap.hpp	/^    Q3BspVisDataLump                visData;$/;"	m	class:Q3BspMap	access:public
visibleFaces	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int visibleFaces    = 0;$/;"	m	struct:BspStats	access:public
visiblePatches	src/q3bsp/Q3BspRenderHelpers.hpp	/^    int visiblePatches  = 0;$/;"	m	struct:BspStats	access:public
vk	src/renderer/vulkan/Base.cpp	/^namespace vk$/;"	n	file:
vk	src/renderer/vulkan/Base.hpp	/^namespace vk$/;"	n
vk	src/renderer/vulkan/Buffers.cpp	/^namespace vk$/;"	n	file:
vk	src/renderer/vulkan/Buffers.hpp	/^namespace vk$/;"	n
vk	src/renderer/vulkan/CmdBuffer.cpp	/^namespace vk$/;"	n	file:
vk	src/renderer/vulkan/CmdBuffer.hpp	/^namespace vk$/;"	n
vk	src/renderer/vulkan/Device.cpp	/^namespace vk$/;"	n	file:
vk	src/renderer/vulkan/Device.hpp	/^namespace vk$/;"	n
vk	src/renderer/vulkan/Image.cpp	/^namespace vk$/;"	n	file:
vk	src/renderer/vulkan/Image.hpp	/^namespace vk$/;"	n
vk	src/renderer/vulkan/Pipeline.cpp	/^namespace vk$/;"	n	file:
vk	src/renderer/vulkan/Pipeline.hpp	/^namespace vk$/;"	n
vk	src/renderer/vulkan/Validation.cpp	/^namespace vk$/;"	n	file:
vk	src/renderer/vulkan/Validation.hpp	/^namespace vk$/;"	n
vk::Buffer	src/renderer/vulkan/Buffers.hpp	/^    struct Buffer$/;"	s	namespace:vk
vk::Buffer::allocation	src/renderer/vulkan/Buffers.hpp	/^        VmaAllocation allocation = VK_NULL_HANDLE;$/;"	m	struct:vk::Buffer	access:public
vk::Buffer::buffer	src/renderer/vulkan/Buffers.hpp	/^        VkBuffer      buffer     = VK_NULL_HANDLE;$/;"	m	struct:vk::Buffer	access:public
vk::BufferOptions	src/renderer/vulkan/Buffers.hpp	/^    struct BufferOptions$/;"	s	namespace:vk
vk::BufferOptions::memFlags	src/renderer/vulkan/Buffers.hpp	/^        VkMemoryPropertyFlags memFlags = 0;$/;"	m	struct:vk::BufferOptions	access:public
vk::BufferOptions::usage	src/renderer/vulkan/Buffers.hpp	/^        VkBufferUsageFlags usage = 0;$/;"	m	struct:vk::BufferOptions	access:public
vk::BufferOptions::vmaFlags	src/renderer/vulkan/Buffers.hpp	/^        VmaAllocationCreateFlags vmaFlags = 0;$/;"	m	struct:vk::BufferOptions	access:public
vk::BufferOptions::vmaUsage	src/renderer/vulkan/Buffers.hpp	/^        VmaMemoryUsage vmaUsage = VMA_MEMORY_USAGE_UNKNOWN;$/;"	m	struct:vk::BufferOptions	access:public
vk::CmdBufferList	src/renderer/vulkan/CmdBuffer.hpp	/^    typedef std::vector<VkCommandBuffer> CmdBufferList;$/;"	t	namespace:vk
vk::Descriptor	src/renderer/vulkan/Base.hpp	/^    struct Descriptor$/;"	s	namespace:vk
vk::Descriptor::pool	src/renderer/vulkan/Base.hpp	/^        VkDescriptorPool pool = VK_NULL_HANDLE;$/;"	m	struct:vk::Descriptor	access:public
vk::Descriptor::set	src/renderer/vulkan/Base.hpp	/^        VkDescriptorSet  set  = VK_NULL_HANDLE; \/\/ automatically cleaned with descriptor pools$/;"	m	struct:vk::Descriptor	access:public
vk::Descriptor::setLayout	src/renderer/vulkan/Base.hpp	/^        VkDescriptorSetLayout setLayout = VK_NULL_HANDLE;$/;"	m	struct:vk::Descriptor	access:public
vk::Device	src/renderer/vulkan/Base.hpp	/^    struct Device$/;"	s	namespace:vk
vk::Device::allocator	src/renderer/vulkan/Base.hpp	/^        VmaAllocator     allocator = VK_NULL_HANDLE;$/;"	m	struct:vk::Device	access:public
vk::Device::graphicsQueue	src/renderer/vulkan/Base.hpp	/^        VkQueue graphicsQueue = VK_NULL_HANDLE;$/;"	m	struct:vk::Device	access:public
vk::Device::logical	src/renderer/vulkan/Base.hpp	/^        VkDevice         logical   = VK_NULL_HANDLE;$/;"	m	struct:vk::Device	access:public
vk::Device::physical	src/renderer/vulkan/Base.hpp	/^        VkPhysicalDevice physical  = VK_NULL_HANDLE;$/;"	m	struct:vk::Device	access:public
vk::Device::presentFamilyIndex	src/renderer/vulkan/Base.hpp	/^        int presentFamilyIndex = -1; \/\/ physical device presentation family index$/;"	m	struct:vk::Device	access:public
vk::Device::presentQueue	src/renderer/vulkan/Base.hpp	/^        VkQueue presentQueue  = VK_NULL_HANDLE;$/;"	m	struct:vk::Device	access:public
vk::Device::queueFamilyIndex	src/renderer/vulkan/Base.hpp	/^        int queueFamilyIndex   = -1; \/\/ physical device queue family index$/;"	m	struct:vk::Device	access:public
vk::Pipeline	src/renderer/vulkan/Pipeline.hpp	/^    struct Pipeline$/;"	s	namespace:vk
vk::Pipeline::blendMode	src/renderer/vulkan/Pipeline.hpp	/^        VkBlendFactor blendMode = VK_BLEND_FACTOR_ZERO;$/;"	m	struct:vk::Pipeline	access:public
vk::Pipeline::cullMode	src/renderer/vulkan/Pipeline.hpp	/^        VkCullModeFlags cullMode = VK_CULL_MODE_BACK_BIT;$/;"	m	struct:vk::Pipeline	access:public
vk::Pipeline::depthTestEnable	src/renderer/vulkan/Pipeline.hpp	/^        VkBool32 depthTestEnable = VK_TRUE;$/;"	m	struct:vk::Pipeline	access:public
vk::Pipeline::layout	src/renderer/vulkan/Pipeline.hpp	/^        VkPipelineLayout layout = VK_NULL_HANDLE;$/;"	m	struct:vk::Pipeline	access:public
vk::Pipeline::mode	src/renderer/vulkan/Pipeline.hpp	/^        VkPolygonMode mode = VK_POLYGON_MODE_FILL;$/;"	m	struct:vk::Pipeline	access:public
vk::Pipeline::pipeline	src/renderer/vulkan/Pipeline.hpp	/^        VkPipeline pipeline = VK_NULL_HANDLE;$/;"	m	struct:vk::Pipeline	access:public
vk::Pipeline::topology	src/renderer/vulkan/Pipeline.hpp	/^        VkPrimitiveTopology topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;$/;"	m	struct:vk::Pipeline	access:public
vk::ReadShaderFromFile	src/renderer/vulkan/Pipeline.cpp	/^    static uint32_t *ReadShaderFromFile(const char *filename, size_t *buffSize)$/;"	f	namespace:vk	signature:(const char *filename, size_t *buffSize)
vk::RenderPass	src/renderer/vulkan/Pipeline.hpp	/^    struct RenderPass$/;"	s	namespace:vk
vk::RenderPass::colorLoadOp	src/renderer/vulkan/Pipeline.hpp	/^        VkAttachmentLoadOp colorLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR;$/;"	m	struct:vk::RenderPass	access:public
vk::RenderPass::renderPass	src/renderer/vulkan/Pipeline.hpp	/^        VkRenderPass renderPass = VK_NULL_HANDLE;$/;"	m	struct:vk::RenderPass	access:public
vk::ShaderProgram	src/renderer/vulkan/Pipeline.cpp	/^    struct ShaderProgram$/;"	s	namespace:vk	file:
vk::ShaderProgram::fragShader	src/renderer/vulkan/Pipeline.cpp	/^        VkShaderModule fragShader = VK_NULL_HANDLE;$/;"	m	struct:vk::ShaderProgram	file:	access:public
vk::ShaderProgram::vertShader	src/renderer/vulkan/Pipeline.cpp	/^        VkShaderModule vertShader = VK_NULL_HANDLE;$/;"	m	struct:vk::ShaderProgram	file:	access:public
vk::SwapChain	src/renderer/vulkan/Device.hpp	/^    struct SwapChain$/;"	s	namespace:vk
vk::SwapChain::extent	src/renderer/vulkan/Device.hpp	/^        VkExtent2D extent = { 0, 0 };$/;"	m	struct:vk::SwapChain	access:public
vk::SwapChain::format	src/renderer/vulkan/Device.hpp	/^        VkFormat format = VK_FORMAT_UNDEFINED;$/;"	m	struct:vk::SwapChain	access:public
vk::SwapChain::images	src/renderer/vulkan/Device.hpp	/^        std::vector<VkImage> images;$/;"	m	struct:vk::SwapChain	access:public
vk::SwapChain::sc	src/renderer/vulkan/Device.hpp	/^        VkSwapchainKHR sc = VK_NULL_HANDLE;$/;"	m	struct:vk::SwapChain	access:public
vk::SwapChainInfo	src/renderer/vulkan/Device.cpp	/^    struct SwapChainInfo$/;"	s	namespace:vk	file:
vk::SwapChainInfo::formatCount	src/renderer/vulkan/Device.cpp	/^        uint32_t formatCount = 0;$/;"	m	struct:vk::SwapChainInfo	file:	access:public
vk::SwapChainInfo::formats	src/renderer/vulkan/Device.cpp	/^        VkSurfaceFormatKHR *formats = nullptr;$/;"	m	struct:vk::SwapChainInfo	file:	access:public
vk::SwapChainInfo::presentModes	src/renderer/vulkan/Device.cpp	/^        VkPresentModeKHR *presentModes = nullptr;$/;"	m	struct:vk::SwapChainInfo	file:	access:public
vk::SwapChainInfo::presentModesCount	src/renderer/vulkan/Device.cpp	/^        uint32_t presentModesCount = 0;$/;"	m	struct:vk::SwapChainInfo	file:	access:public
vk::SwapChainInfo::surfaceCaps	src/renderer/vulkan/Device.cpp	/^        VkSurfaceCapabilitiesKHR surfaceCaps = {};$/;"	m	struct:vk::SwapChainInfo	file:	access:public
vk::SwapChainInfo::~SwapChainInfo	src/renderer/vulkan/Device.cpp	/^        ~SwapChainInfo()$/;"	f	struct:vk::SwapChainInfo	access:public	signature:()
vk::Texture	src/renderer/vulkan/Image.hpp	/^    struct Texture$/;"	s	namespace:vk
vk::Texture::allocation	src/renderer/vulkan/Image.hpp	/^        VmaAllocation allocation = VK_NULL_HANDLE;$/;"	m	struct:vk::Texture	access:public
vk::Texture::format	src/renderer/vulkan/Image.hpp	/^        VkFormat  format    = VK_FORMAT_R8G8B8A8_UNORM;$/;"	m	struct:vk::Texture	access:public
vk::Texture::image	src/renderer/vulkan/Image.hpp	/^        VkImage image = VK_NULL_HANDLE;$/;"	m	struct:vk::Texture	access:public
vk::Texture::imageView	src/renderer/vulkan/Image.hpp	/^        VkImageView   imageView  = VK_NULL_HANDLE;$/;"	m	struct:vk::Texture	access:public
vk::Texture::magFilter	src/renderer/vulkan/Image.hpp	/^        VkFilter  magFilter = VK_FILTER_LINEAR;$/;"	m	struct:vk::Texture	access:public
vk::Texture::minFilter	src/renderer/vulkan/Image.hpp	/^        VkFilter  minFilter = VK_FILTER_LINEAR;$/;"	m	struct:vk::Texture	access:public
vk::Texture::sampler	src/renderer/vulkan/Image.hpp	/^        VkSampler sampler   = VK_NULL_HANDLE;$/;"	m	struct:vk::Texture	access:public
vk::VertexBufferInfo	src/renderer/vulkan/Buffers.hpp	/^    struct VertexBufferInfo$/;"	s	namespace:vk
vk::VertexBufferInfo::attributeDescriptions	src/renderer/vulkan/Buffers.hpp	/^        std::vector<VkVertexInputAttributeDescription> attributeDescriptions;$/;"	m	struct:vk::VertexBufferInfo	access:public
vk::VertexBufferInfo::bindingDescriptions	src/renderer/vulkan/Buffers.hpp	/^        std::vector<VkVertexInputBindingDescription> bindingDescriptions;$/;"	m	struct:vk::VertexBufferInfo	access:public
vk::beginOneTimeCommand	src/renderer/vulkan/CmdBuffer.cpp	/^    VkCommandBuffer beginOneTimeCommand(const Device &device, const VkCommandPool &commandPool)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool)
vk::copyBuffer	src/renderer/vulkan/Buffers.cpp	/^    void copyBuffer(const Device &device, const VkCommandPool &commandPool, const VkBuffer &src, VkBuffer &dst, VkDeviceSize size)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, const VkBuffer &src, VkBuffer &dst, VkDeviceSize size)
vk::copyBufferToImage	src/renderer/vulkan/Image.cpp	/^    void copyBufferToImage(const Device &device, const VkCommandPool &commandPool, const VkBuffer &buffer, const VkImage &image, uint32_t width, uint32_t height)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, const VkBuffer &buffer, const VkImage &image, uint32_t width, uint32_t height)
vk::createAllocator	src/renderer/vulkan/Base.cpp	/^    VkResult createAllocator(const Device &device, VmaAllocator *allocator)$/;"	f	namespace:vk	signature:(const Device &device, VmaAllocator *allocator)
vk::createBuffer	src/renderer/vulkan/Buffers.cpp	/^    VkResult createBuffer(const Device &device, VkDeviceSize size, Buffer *dstBuffer, const BufferOptions &bOpts)$/;"	f	namespace:vk	signature:(const Device &device, VkDeviceSize size, Buffer *dstBuffer, const BufferOptions &bOpts)
vk::createCommandBuffers	src/renderer/vulkan/CmdBuffer.cpp	/^    VkResult createCommandBuffers(const Device &device, const VkCommandPool &commandPool, CmdBufferList &commandBuffers, size_t fbCount)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, CmdBufferList &commandBuffers, size_t fbCount)
vk::createCommandPool	src/renderer/vulkan/CmdBuffer.cpp	/^    VkResult createCommandPool(const Device &device, VkCommandPool *commandPool)$/;"	f	namespace:vk	signature:(const Device &device, VkCommandPool *commandPool)
vk::createDepthBuffer	src/renderer/vulkan/Image.cpp	/^    Texture createDepthBuffer(const Device &device, const SwapChain &swapChain, const VkCommandPool &commandPool)$/;"	f	namespace:vk	signature:(const Device &device, const SwapChain &swapChain, const VkCommandPool &commandPool)
vk::createDescriptorSet	src/renderer/vulkan/Base.cpp	/^    VkResult createDescriptorSet(const Device &device, Descriptor *descriptor)$/;"	f	namespace:vk	signature:(const Device &device, Descriptor *descriptor)
vk::createDevice	src/renderer/vulkan/Device.cpp	/^    Device createDevice(const VkInstance &instance, const VkSurfaceKHR &surface)$/;"	f	namespace:vk	signature:(const VkInstance &instance, const VkSurfaceKHR &surface)
vk::createImage	src/renderer/vulkan/Image.cpp	/^    VkResult createImage(const Device &device, uint32_t width, uint32_t height, VkFormat format, VkImageTiling tiling, VkImageUsageFlags usage, VkMemoryPropertyFlags properties, Texture *texture)$/;"	f	namespace:vk	signature:(const Device &device, uint32_t width, uint32_t height, VkFormat format, VkImageTiling tiling, VkImageUsageFlags usage, VkMemoryPropertyFlags properties, Texture *texture)
vk::createImageView	src/renderer/vulkan/Image.cpp	/^    VkResult createImageView(const Device &device, const VkImage &image, VkImageAspectFlags aspectFlags, VkImageView *imageView, VkFormat format)$/;"	f	namespace:vk	signature:(const Device &device, const VkImage &image, VkImageAspectFlags aspectFlags, VkImageView *imageView, VkFormat format)
vk::createIndexBuffer	src/renderer/vulkan/Buffers.cpp	/^    void createIndexBuffer(const Device &device, const VkCommandPool &commandPool, const void *data, VkDeviceSize size, Buffer *dstBuffer)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, const void *data, VkDeviceSize size, Buffer *dstBuffer)
vk::createInstance	src/renderer/vulkan/Base.cpp	/^    VkResult createInstance(SDL_Window *window, VkInstance *instance, const char *title)$/;"	f	namespace:vk	signature:(SDL_Window *window, VkInstance *instance, const char *title)
vk::createLogicalDevice	src/renderer/vulkan/Device.cpp	/^    VkResult createLogicalDevice(Device *device)$/;"	f	namespace:vk	signature:(Device *device)
vk::createPipeline	src/renderer/vulkan/Pipeline.cpp	/^    VkResult createPipeline(const Device &device, const SwapChain &swapChain, const RenderPass &renderPass, const VkDescriptorSetLayout &descriptorLayout, const VertexBufferInfo *vbInfo, Pipeline *pipeline, const char **shaders)$/;"	f	namespace:vk	signature:(const Device &device, const SwapChain &swapChain, const RenderPass &renderPass, const VkDescriptorSetLayout &descriptorLayout, const VertexBufferInfo *vbInfo, Pipeline *pipeline, const char **shaders)
vk::createRenderPass	src/renderer/vulkan/Pipeline.cpp	/^    VkResult createRenderPass(const Device &device, const SwapChain &swapChain, RenderPass *renderPass)$/;"	f	namespace:vk	signature:(const Device &device, const SwapChain &swapChain, RenderPass *renderPass)
vk::createShaderModule	src/renderer/vulkan/Pipeline.cpp	/^    static VkShaderModule createShaderModule(const Device &device, const uint32_t *shaderSrc, size_t codeSize)$/;"	f	namespace:vk	signature:(const Device &device, const uint32_t *shaderSrc, size_t codeSize)
vk::createStagingBuffer	src/renderer/vulkan/Buffers.cpp	/^    VkResult createStagingBuffer(const Device &device, VkDeviceSize size, Buffer *dstBuffer)$/;"	f	namespace:vk	signature:(const Device &device, VkDeviceSize size, Buffer *dstBuffer)
vk::createSwapChain	src/renderer/vulkan/Device.cpp	/^    VkResult createSwapChain(const Device &device, const VkSurfaceKHR &surface, SwapChain *swapChain, VkSwapchainKHR oldSwapchain)$/;"	f	namespace:vk	signature:(const Device &device, const VkSurfaceKHR &surface, SwapChain *swapChain, VkSwapchainKHR oldSwapchain)
vk::createTexture	src/renderer/vulkan/Image.cpp	/^    void createTexture(const Device &device, const VkCommandPool &commandPool, Texture *dstTex, const unsigned char *data, uint32_t width, uint32_t height)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, Texture *dstTex, const unsigned char *data, uint32_t width, uint32_t height)
vk::createTextureImage	src/renderer/vulkan/Image.cpp	/^    void createTextureImage(const Device &device, const VkCommandPool &commandPool, Texture *dstTex, const unsigned char *data, uint32_t width, uint32_t height)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, Texture *dstTex, const unsigned char *data, uint32_t width, uint32_t height)
vk::createTextureSampler	src/renderer/vulkan/Image.cpp	/^    VkResult createTextureSampler(const Device &device, Texture *texture)$/;"	f	namespace:vk	signature:(const Device &device, Texture *texture)
vk::createUniformBuffer	src/renderer/vulkan/Buffers.cpp	/^    VkResult createUniformBuffer(const Device &device, VkDeviceSize size, Buffer *dstBuffer)$/;"	f	namespace:vk	signature:(const Device &device, VkDeviceSize size, Buffer *dstBuffer)
vk::createValidationLayers	src/renderer/vulkan/Validation.cpp	/^    void createValidationLayers(const VkInstance &instance)$/;"	f	namespace:vk	signature:(const VkInstance &instance)
vk::createVertexBuffer	src/renderer/vulkan/Buffers.cpp	/^    void createVertexBuffer(const Device &device, const VkCommandPool &commandPool, const void *data, VkDeviceSize size, Buffer *dstBuffer)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, const void *data, VkDeviceSize size, Buffer *dstBuffer)
vk::destroyAllocator	src/renderer/vulkan/Base.cpp	/^    void destroyAllocator(VmaAllocator &allocator)$/;"	f	namespace:vk	signature:(VmaAllocator &allocator)
vk::destroyPipeline	src/renderer/vulkan/Pipeline.cpp	/^    void destroyPipeline(const Device &device, Pipeline &pipeline)$/;"	f	namespace:vk	signature:(const Device &device, Pipeline &pipeline)
vk::destroyRenderPass	src/renderer/vulkan/Pipeline.cpp	/^    void destroyRenderPass(const Device &device, RenderPass &renderPass)$/;"	f	namespace:vk	signature:(const Device &device, RenderPass &renderPass)
vk::destroyValidationLayers	src/renderer/vulkan/Validation.cpp	/^    void destroyValidationLayers(const VkInstance &instance)$/;"	f	namespace:vk	signature:(const VkInstance &instance)
vk::devExtensions	src/renderer/vulkan/Device.cpp	/^    static std::vector<const char *> devExtensions = { VK_KHR_SWAPCHAIN_EXTENSION_NAME };$/;"	m	namespace:vk	file:
vk::deviceExtensionsSupported	src/renderer/vulkan/Device.cpp	/^    bool deviceExtensionsSupported(const VkPhysicalDevice &device, const char **requested, size_t count)$/;"	f	namespace:vk	signature:(const VkPhysicalDevice &device, const char **requested, size_t count)
vk::endOneTimeCommand	src/renderer/vulkan/CmdBuffer.cpp	/^    void endOneTimeCommand(const Device &device, const VkCommandBuffer &commandBuffer, const VkCommandPool &commandPool, const VkQueue &graphicsQueue)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandBuffer &commandBuffer, const VkCommandPool &commandPool, const VkQueue &graphicsQueue)
vk::freeBuffer	src/renderer/vulkan/Buffers.cpp	/^    void freeBuffer(const Device &device, Buffer &buffer)$/;"	f	namespace:vk	signature:(const Device &device, Buffer &buffer)
vk::freeCommandBuffers	src/renderer/vulkan/CmdBuffer.cpp	/^    void freeCommandBuffers(const Device &device, const VkCommandPool &commandPool, CmdBufferList &commandBuffers)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, CmdBufferList &commandBuffers)
vk::getAttributeDescription	src/renderer/vulkan/Buffers.cpp	/^    VkVertexInputAttributeDescription getAttributeDescription(uint32_t location, VkFormat format, uint32_t offset)$/;"	f	namespace:vk	signature:(uint32_t location, VkFormat format, uint32_t offset)
vk::getBestPhysicalDevice	src/renderer/vulkan/Device.cpp	/^    VkPhysicalDevice getBestPhysicalDevice(const VkPhysicalDevice *devices, size_t count, const VkSurfaceKHR &surface, Device *device)$/;"	f	namespace:vk	signature:(const VkPhysicalDevice *devices, size_t count, const VkSurfaceKHR &surface, Device *device)
vk::getBindingDescription	src/renderer/vulkan/Buffers.cpp	/^    VkVertexInputBindingDescription getBindingDescription(uint32_t stride)$/;"	f	namespace:vk	signature:(uint32_t stride)
vk::getSwapChainInfo	src/renderer/vulkan/Device.cpp	/^    void getSwapChainInfo(VkPhysicalDevice device, const VkSurfaceKHR &surface, SwapChainInfo *scInfo)$/;"	f	namespace:vk	signature:(VkPhysicalDevice device, const VkSurfaceKHR &surface, SwapChainInfo *scInfo)
vk::getSwapExtent	src/renderer/vulkan/Device.cpp	/^    void getSwapExtent(const SwapChainInfo &scInfo, VkExtent2D *swapExtent, const VkExtent2D &currentSize)$/;"	f	namespace:vk	signature:(const SwapChainInfo &scInfo, VkExtent2D *swapExtent, const VkExtent2D &currentSize)
vk::getSwapPresentMode	src/renderer/vulkan/Device.cpp	/^    void getSwapPresentMode(const SwapChainInfo &scInfo, VkPresentModeKHR *presentMode)$/;"	f	namespace:vk	signature:(const SwapChainInfo &scInfo, VkPresentModeKHR *presentMode)
vk::getSwapSurfaceFormat	src/renderer/vulkan/Device.cpp	/^    void getSwapSurfaceFormat(const SwapChainInfo &scInfo, VkSurfaceFormatKHR *surfaceFormat)$/;"	f	namespace:vk	signature:(const SwapChainInfo &scInfo, VkSurfaceFormatKHR *surfaceFormat)
vk::loadShader	src/renderer/vulkan/Pipeline.cpp	/^    static ShaderProgram loadShader(const Device &device, const char* vshFilename, const char *fshFilename)$/;"	f	namespace:vk	signature:(const Device &device, const char* vshFilename, const char *fshFilename)
vk::releaseTexture	src/renderer/vulkan/Image.cpp	/^    void releaseTexture(const Device &device, Texture &texture)$/;"	f	namespace:vk	signature:(const Device &device, Texture &texture)
vk::selectPhysicalDevice	src/renderer/vulkan/Device.cpp	/^    VkResult selectPhysicalDevice(const VkInstance &instance, const VkSurfaceKHR &surface, Device *device)$/;"	f	namespace:vk	signature:(const VkInstance &instance, const VkSurfaceKHR &surface, Device *device)
vk::transitionImageLayout	src/renderer/vulkan/Image.cpp	/^    void transitionImageLayout(const Device &device, const VkCommandPool &commandPool, const Texture &texture, const VkImageLayout &oldLayout, const VkImageLayout &newLayout)$/;"	f	namespace:vk	signature:(const Device &device, const VkCommandPool &commandPool, const Texture &texture, const VkImageLayout &oldLayout, const VkImageLayout &newLayout)
vk::validationLayers	src/renderer/vulkan/Validation.hpp	/^    static const char *validationLayers[] = { "VK_LAYER_LUNARG_standard_validation" };$/;"	m	namespace:vk
vk::validationLayersAvailable	src/renderer/vulkan/Validation.cpp	/^    bool validationLayersAvailable(const char **requested, size_t count)$/;"	f	namespace:vk	signature:(const char **requested, size_t count)
vkAllocateMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkAllocateMemory vkAllocateMemory;$/;"	m	struct:VmaVulkanFunctions	access:public
vkBindBufferMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkBindBufferMemory vkBindBufferMemory;$/;"	m	struct:VmaVulkanFunctions	access:public
vkBindImageMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkBindImageMemory vkBindImageMemory;$/;"	m	struct:VmaVulkanFunctions	access:public
vkCreateBuffer	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkCreateBuffer vkCreateBuffer;$/;"	m	struct:VmaVulkanFunctions	access:public
vkCreateDebugReportCallbackEXT	src/renderer/vulkan/Validation.cpp	7;"	d	file:
vkCreateImage	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkCreateImage vkCreateImage;$/;"	m	struct:VmaVulkanFunctions	access:public
vkDestroyBuffer	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkDestroyBuffer vkDestroyBuffer;$/;"	m	struct:VmaVulkanFunctions	access:public
vkDestroyDebugReportCallbackEXT	src/renderer/vulkan/Validation.cpp	8;"	d	file:
vkDestroyImage	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkDestroyImage vkDestroyImage;$/;"	m	struct:VmaVulkanFunctions	access:public
vkFreeMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkFreeMemory vkFreeMemory;$/;"	m	struct:VmaVulkanFunctions	access:public
vkGetBufferMemoryRequirements	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkGetBufferMemoryRequirements vkGetBufferMemoryRequirements;$/;"	m	struct:VmaVulkanFunctions	access:public
vkGetBufferMemoryRequirements2KHR	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkGetBufferMemoryRequirements2KHR vkGetBufferMemoryRequirements2KHR;$/;"	m	struct:VmaVulkanFunctions	access:public
vkGetImageMemoryRequirements	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkGetImageMemoryRequirements vkGetImageMemoryRequirements;$/;"	m	struct:VmaVulkanFunctions	access:public
vkGetImageMemoryRequirements2KHR	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkGetImageMemoryRequirements2KHR vkGetImageMemoryRequirements2KHR;$/;"	m	struct:VmaVulkanFunctions	access:public
vkGetPhysicalDeviceMemoryProperties	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkGetPhysicalDeviceMemoryProperties vkGetPhysicalDeviceMemoryProperties;$/;"	m	struct:VmaVulkanFunctions	access:public
vkGetPhysicalDeviceProperties	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkGetPhysicalDeviceProperties vkGetPhysicalDeviceProperties;$/;"	m	struct:VmaVulkanFunctions	access:public
vkMapMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkMapMemory vkMapMemory;$/;"	m	struct:VmaVulkanFunctions	access:public
vkUnmapMemory	src/renderer/vulkan/vk_mem_alloc.h	/^    PFN_vkUnmapMemory vkUnmapMemory;$/;"	m	struct:VmaVulkanFunctions	access:public
vmaAllocateMemory	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult vmaAllocateMemory($/;"	f	signature:( VmaAllocator allocator, const VkMemoryRequirements* pVkMemoryRequirements, const VmaAllocationCreateInfo* pCreateInfo, VmaAllocation* pAllocation, VmaAllocationInfo* pAllocationInfo)
vmaAllocateMemoryForBuffer	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult vmaAllocateMemoryForBuffer($/;"	f	signature:( VmaAllocator allocator, VkBuffer buffer, const VmaAllocationCreateInfo* pCreateInfo, VmaAllocation* pAllocation, VmaAllocationInfo* pAllocationInfo)
vmaAllocateMemoryForImage	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult vmaAllocateMemoryForImage($/;"	f	signature:( VmaAllocator allocator, VkImage image, const VmaAllocationCreateInfo* pCreateInfo, VmaAllocation* pAllocation, VmaAllocationInfo* pAllocationInfo)
vmaBuildStatsString	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaBuildStatsString($/;"	f	signature:( VmaAllocator allocator, char** ppStatsString, VkBool32 detailedMap)
vmaCalculateStats	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaCalculateStats($/;"	f	signature:( VmaAllocator allocator, VmaStats* pStats)
vmaCreateAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult vmaCreateAllocator($/;"	f	signature:( const VmaAllocatorCreateInfo* pCreateInfo, VmaAllocator* pAllocator)
vmaCreateBuffer	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult vmaCreateBuffer($/;"	f	signature:( VmaAllocator allocator, const VkBufferCreateInfo* pBufferCreateInfo, const VmaAllocationCreateInfo* pAllocationCreateInfo, VkBuffer* pBuffer, VmaAllocation* pAllocation, VmaAllocationInfo* pAllocationInfo)
vmaCreateImage	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult vmaCreateImage($/;"	f	signature:( VmaAllocator allocator, const VkImageCreateInfo* pImageCreateInfo, const VmaAllocationCreateInfo* pAllocationCreateInfo, VkImage* pImage, VmaAllocation* pAllocation, VmaAllocationInfo* pAllocationInfo)
vmaCreateLostAllocation	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaCreateLostAllocation($/;"	f	signature:( VmaAllocator allocator, VmaAllocation* pAllocation)
vmaCreatePool	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult vmaCreatePool($/;"	f	signature:( VmaAllocator allocator, const VmaPoolCreateInfo* pCreateInfo, VmaPool* pPool)
vmaDefragment	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult vmaDefragment($/;"	f	signature:( VmaAllocator allocator, VmaAllocation* pAllocations, size_t allocationCount, VkBool32* pAllocationsChanged, const VmaDefragmentationInfo *pDefragmentationInfo, VmaDefragmentationStats* pDefragmentationStats)
vmaDestroyAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaDestroyAllocator($/;"	f	signature:( VmaAllocator allocator)
vmaDestroyBuffer	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaDestroyBuffer($/;"	f	signature:( VmaAllocator allocator, VkBuffer buffer, VmaAllocation allocation)
vmaDestroyImage	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaDestroyImage($/;"	f	signature:( VmaAllocator allocator, VkImage image, VmaAllocation allocation)
vmaDestroyPool	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaDestroyPool($/;"	f	signature:( VmaAllocator allocator, VmaPool pool)
vmaFindMemoryTypeIndex	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult vmaFindMemoryTypeIndex($/;"	f	signature:( VmaAllocator allocator, uint32_t memoryTypeBits, const VmaAllocationCreateInfo* pAllocationCreateInfo, uint32_t* pMemoryTypeIndex)
vmaFlags	src/renderer/vulkan/Buffers.hpp	/^        VmaAllocationCreateFlags vmaFlags = 0;$/;"	m	struct:vk::BufferOptions	access:public
vmaFreeMemory	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaFreeMemory($/;"	f	signature:( VmaAllocator allocator, VmaAllocation allocation)
vmaFreeStatsString	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaFreeStatsString($/;"	f	signature:( VmaAllocator allocator, char* pStatsString)
vmaGetAllocationInfo	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaGetAllocationInfo($/;"	f	signature:( VmaAllocator allocator, VmaAllocation allocation, VmaAllocationInfo* pAllocationInfo)
vmaGetMemoryProperties	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaGetMemoryProperties($/;"	f	signature:( VmaAllocator allocator, const VkPhysicalDeviceMemoryProperties** ppPhysicalDeviceMemoryProperties)
vmaGetMemoryTypeProperties	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaGetMemoryTypeProperties($/;"	f	signature:( VmaAllocator allocator, uint32_t memoryTypeIndex, VkMemoryPropertyFlags* pFlags)
vmaGetPhysicalDeviceProperties	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaGetPhysicalDeviceProperties($/;"	f	signature:( VmaAllocator allocator, const VkPhysicalDeviceProperties **ppPhysicalDeviceProperties)
vmaGetPoolStats	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaGetPoolStats($/;"	f	signature:( VmaAllocator allocator, VmaPool pool, VmaPoolStats* pPoolStats)
vmaMakePoolAllocationsLost	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaMakePoolAllocationsLost($/;"	f	signature:( VmaAllocator allocator, VmaPool pool, size_t* pLostAllocationCount)
vmaMapMemory	src/renderer/vulkan/vk_mem_alloc.h	/^VkResult vmaMapMemory($/;"	f	signature:( VmaAllocator allocator, VmaAllocation allocation, void** ppData)
vmaSetAllocationUserData	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaSetAllocationUserData($/;"	f	signature:( VmaAllocator allocator, VmaAllocation allocation, void* pUserData)
vmaSetCurrentFrameIndex	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaSetCurrentFrameIndex($/;"	f	signature:( VmaAllocator allocator, uint32_t frameIndex)
vmaUnmapMemory	src/renderer/vulkan/vk_mem_alloc.h	/^void vmaUnmapMemory($/;"	f	signature:( VmaAllocator allocator, VmaAllocation allocation)
vmaUsage	src/renderer/vulkan/Buffers.hpp	/^        VmaMemoryUsage vmaUsage = VMA_MEMORY_USAGE_UNKNOWN;$/;"	m	struct:vk::BufferOptions	access:public
vma_delete	src/renderer/vulkan/vk_mem_alloc.h	/^static void vma_delete(VmaAllocator hAllocator, T* ptr)$/;"	f	signature:(VmaAllocator hAllocator, T* ptr)
vma_delete	src/renderer/vulkan/vk_mem_alloc.h	/^static void vma_delete(const VkAllocationCallbacks* pAllocationCallbacks, T* ptr)$/;"	f	signature:(const VkAllocationCallbacks* pAllocationCallbacks, T* ptr)
vma_delete_array	src/renderer/vulkan/vk_mem_alloc.h	/^static void vma_delete_array(VmaAllocator hAllocator, T* ptr, size_t count)$/;"	f	signature:(VmaAllocator hAllocator, T* ptr, size_t count)
vma_delete_array	src/renderer/vulkan/vk_mem_alloc.h	/^static void vma_delete_array(const VkAllocationCallbacks* pAllocationCallbacks, T* ptr, size_t count)$/;"	f	signature:(const VkAllocationCallbacks* pAllocationCallbacks, T* ptr, size_t count)
vma_new	src/renderer/vulkan/vk_mem_alloc.h	2130;"	d
vma_new_array	src/renderer/vulkan/vk_mem_alloc.h	2132;"	d
vs	src/renderer/stb_image.c	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon7	file:	access:public
w	src/renderer/stb_image.c	/^   int w,h;$/;"	m	struct:stbi_gif_struct	file:	access:public
w2	src/renderer/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon5::__anon6	file:	access:public
w_lores	src/renderer/stb_image.c	/^   int w_lores; \/\/ horizontal pixels pre-expansion $/;"	m	struct:__anon7	file:	access:public
width	src/q3bsp/Q3BspPatch.hpp	/^    int width  = 0;$/;"	m	struct:Q3BspPatch	access:public
width	src/renderer/RenderContext.hpp	/^    int   width     = 0;$/;"	m	class:RenderContext	access:public
window	src/renderer/RenderContext.hpp	/^    SDL_Window *window = nullptr;$/;"	m	class:RenderContext	access:public
worldScaleFactor	src/renderer/RenderContext.hpp	/^    float worldScaleFactor;$/;"	m	struct:UniformBufferObject	access:public
x	src/q3bsp/Q3Bsp.hpp	/^    float x, y, z;$/;"	m	struct:vec3f	access:public
x	src/q3bsp/Q3Bsp.hpp	/^    float x, y;$/;"	m	struct:vec2f	access:public
x	src/q3bsp/Q3Bsp.hpp	/^    int x, y, z;$/;"	m	struct:vec3i	access:public
x	src/q3bsp/Q3Bsp.hpp	/^    int x, y;$/;"	m	struct:vec2i	access:public
x	src/renderer/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon5::__anon6	file:	access:public
x	src/renderer/vulkan/vk_mem_alloc.h	/^    VmaStlAllocator& operator=(const VmaStlAllocator& x) = delete;$/;"	m	class:VmaStlAllocator	access:public
y	src/q3bsp/Q3Bsp.hpp	/^    float x, y, z;$/;"	m	struct:vec3f	access:public
y	src/q3bsp/Q3Bsp.hpp	/^    float x, y;$/;"	m	struct:vec2f	access:public
y	src/q3bsp/Q3Bsp.hpp	/^    int x, y, z;$/;"	m	struct:vec3i	access:public
y	src/q3bsp/Q3Bsp.hpp	/^    int x, y;$/;"	m	struct:vec2i	access:public
y	src/renderer/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon5::__anon6	file:	access:public
ypos	src/renderer/stb_image.c	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon7	file:	access:public
ystep	src/renderer/stb_image.c	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon7	file:	access:public
z	src/q3bsp/Q3Bsp.hpp	/^    float x, y, z;$/;"	m	struct:vec3f	access:public
z	src/q3bsp/Q3Bsp.hpp	/^    int x, y, z;$/;"	m	struct:vec3i	access:public
z_distance	src/renderer/stb_image.c	/^   zhuffman z_length, z_distance;$/;"	m	struct:__anon9	file:	access:public
z_expandable	src/renderer/stb_image.c	/^   int   z_expandable;$/;"	m	struct:__anon9	file:	access:public
z_length	src/renderer/stb_image.c	/^   zhuffman z_length, z_distance;$/;"	m	struct:__anon9	file:	access:public
zbuf	src/renderer/stb_image.c	/^} zbuf;$/;"	t	typeref:struct:__anon9	file:
zbuffer	src/renderer/stb_image.c	/^   uint8 *zbuffer, *zbuffer_end;$/;"	m	struct:__anon9	file:	access:public
zbuffer_end	src/renderer/stb_image.c	/^   uint8 *zbuffer, *zbuffer_end;$/;"	m	struct:__anon9	file:	access:public
zbuild_huffman	src/renderer/stb_image.c	/^static int zbuild_huffman(zhuffman *z, uint8 *sizelist, int num)$/;"	f	file:	signature:(zhuffman *z, uint8 *sizelist, int num)
zget8	src/renderer/stb_image.c	/^stbi_inline static int zget8(zbuf *z)$/;"	f	file:	signature:(zbuf *z)
zhuffman	src/renderer/stb_image.c	/^} zhuffman;$/;"	t	typeref:struct:__anon8	file:
zhuffman_decode	src/renderer/stb_image.c	/^stbi_inline static int zhuffman_decode(zbuf *a, zhuffman *z)$/;"	f	file:	signature:(zbuf *a, zhuffman *z)
zout	src/renderer/stb_image.c	/^   char *zout;$/;"	m	struct:__anon9	file:	access:public
zout_end	src/renderer/stb_image.c	/^   char *zout_end;$/;"	m	struct:__anon9	file:	access:public
zout_start	src/renderer/stb_image.c	/^   char *zout_start;$/;"	m	struct:__anon9	file:	access:public
zreceive	src/renderer/stb_image.c	/^stbi_inline static unsigned int zreceive(zbuf *z, int n)$/;"	f	file:	signature:(zbuf *z, int n)
~BspMap	src/BspMap.hpp	/^    virtual ~BspMap() {}$/;"	f	class:BspMap	access:public	signature:()
~CameraDirector	src/renderer/CameraDirector.cpp	/^CameraDirector::~CameraDirector()$/;"	f	class:CameraDirector	signature:()
~Font	src/renderer/Font.cpp	/^Font::~Font()$/;"	f	class:Font	signature:()
~GameTexture	src/renderer/GameTexture.cpp	/^GameTexture::~GameTexture()$/;"	f	class:GameTexture	signature:()
~Q3BspBiquadPatch	src/q3bsp/Q3BspPatch.hpp	/^    ~Q3BspBiquadPatch()$/;"	f	class:Q3BspBiquadPatch	access:public	signature:()
~Q3BspMap	src/q3bsp/Q3BspMap.cpp	/^Q3BspMap::~Q3BspMap()$/;"	f	class:Q3BspMap	signature:()
~Q3StatsUI	src/q3bsp/Q3BspStatsUI.hpp	/^    ~Q3StatsUI()$/;"	f	class:Q3StatsUI	access:public	signature:()
~StatsUI	src/StatsUI.hpp	/^    virtual ~StatsUI() {}$/;"	f	class:StatsUI	access:public	signature:()
~SwapChainInfo	src/renderer/vulkan/Device.cpp	/^        ~SwapChainInfo()$/;"	f	struct:vk::SwapChainInfo	access:public	signature:()
~TextureManager	src/renderer/TextureManager.cpp	/^TextureManager::~TextureManager()$/;"	f	class:TextureManager	signature:()
~VmaAllocation_T	src/renderer/vulkan/vk_mem_alloc.h	/^    ~VmaAllocation_T()$/;"	f	struct:VmaAllocation_T	access:public	signature:()
~VmaAllocator_T	src/renderer/vulkan/vk_mem_alloc.h	/^VmaAllocator_T::~VmaAllocator_T()$/;"	f	class:VmaAllocator_T	signature:()
~VmaBlockMetadata	src/renderer/vulkan/vk_mem_alloc.h	/^VmaBlockMetadata::~VmaBlockMetadata()$/;"	f	class:VmaBlockMetadata	signature:()
~VmaBlockVector	src/renderer/vulkan/vk_mem_alloc.h	/^VmaBlockVector::~VmaBlockVector()$/;"	f	class:VmaBlockVector	signature:()
~VmaDefragmentator	src/renderer/vulkan/vk_mem_alloc.h	/^VmaDefragmentator::~VmaDefragmentator()$/;"	f	class:VmaDefragmentator	signature:()
~VmaDeviceMemoryBlock	src/renderer/vulkan/vk_mem_alloc.h	/^    ~VmaDeviceMemoryBlock()$/;"	f	class:VmaDeviceMemoryBlock	access:public	signature:()
~VmaDeviceMemoryMapping	src/renderer/vulkan/vk_mem_alloc.h	/^VmaDeviceMemoryMapping::~VmaDeviceMemoryMapping()$/;"	f	class:VmaDeviceMemoryMapping	signature:()
~VmaJsonWriter	src/renderer/vulkan/vk_mem_alloc.h	/^VmaJsonWriter::~VmaJsonWriter()$/;"	f	class:VmaJsonWriter	signature:()
~VmaMutex	src/renderer/vulkan/vk_mem_alloc.h	/^       ~VmaMutex() { }$/;"	f	class:VmaMutex	access:public	signature:()
~VmaMutexLock	src/renderer/vulkan/vk_mem_alloc.h	/^    ~VmaMutexLock()$/;"	f	struct:VmaMutexLock	access:public	signature:()
~VmaPoolAllocator	src/renderer/vulkan/vk_mem_alloc.h	/^VmaPoolAllocator<T>::~VmaPoolAllocator()$/;"	f	class:VmaPoolAllocator	signature:()
~VmaPool_T	src/renderer/vulkan/vk_mem_alloc.h	/^VmaPool_T::~VmaPool_T()$/;"	f	class:VmaPool_T	signature:()
~VmaRawList	src/renderer/vulkan/vk_mem_alloc.h	/^VmaRawList<T>::~VmaRawList()$/;"	f	class:VmaRawList	signature:()
~VmaVector	src/renderer/vulkan/vk_mem_alloc.h	/^    ~VmaVector()$/;"	f	class:VmaVector	access:public	signature:()
